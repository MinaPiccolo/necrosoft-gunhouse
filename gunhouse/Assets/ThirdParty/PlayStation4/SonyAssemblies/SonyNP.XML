<?xml version="1.0"?>
<doc>
    <assembly>
        <name>SonyNP</name>
    </assembly>
    <members>
        <member name="T:Sony.NP.Auth">
            <summary>
            Authentication service related functionality.
            </summary>
        </member>
        <member name="M:Sony.NP.Auth.GetAuthCode(Sony.NP.Auth.GetAuthCodeRequest,Sony.NP.Auth.AuthCodeResponse)">
            <summary>
            Gets an authorization code from the PSN servers for the calling user.
            </summary>
            <param name="request">The information to obtain the authorization code and environment </param>
            <param name="response">This response contains the return code and the auth.code information and its environment</param>
            <returns>If the operation is asynchronous, the function provides the request Id.</returns>
            <exception cref="T:Sony.NP.NpToolkitException">Will throw an exception either when the request data is invalid, or an internal error has occured inside the NpToolkit plug-in.</exception>
        </member>
        <member name="M:Sony.NP.Auth.GetIdToken(Sony.NP.Auth.GetIdTokenRequest,Sony.NP.Auth.IdTokenResponse)">
            <summary>
            Gets an Id Token from the PSN servers for the calling user.
            </summary>
            <param name="request">The information to obtain the id token </param>
            <param name="response">This response contains the id token obtained by the PSN server for the calling user</param>
            <returns>If the operation is asynchronous, the function provides the request Id.</returns>
            <exception cref="T:Sony.NP.NpToolkitException">Will throw an exception either when the request data is invalid, or an internal error has occured inside the NpToolkit plug-in.</exception>
        </member>
        <member name="T:Sony.NP.Auth.NpClientId">
            <summary>
            This structure represents the client ID.
            </summary>
        </member>
        <member name="F:Sony.NP.Auth.NpClientId.NP_CLIENT_ID_MAX_LEN">
            <summary>
            The maximum size the of the client id
            </summary>
        </member>
        <member name="P:Sony.NP.Auth.NpClientId.Id">
            <summary>
            Client ID string (specify the value issued by the PlayStation®4 Developer Network)
            </summary>
            <exception cref="T:Sony.NP.NpToolkitException">Will throw an exception if the string is more than <see cref="F:Sony.NP.Auth.NpClientId.NP_CLIENT_ID_MAX_LEN"/> characters.</exception>
        </member>
        <member name="T:Sony.NP.Auth.NpClientSecret">
            <summary>
            This structure represents the client secret.
            </summary>
        </member>
        <member name="F:Sony.NP.Auth.NpClientSecret.NP_CLIENT_SECRET_MAX_LEN">
            <summary>
            The maximum size of the client secret string
            </summary>
        </member>
        <member name="P:Sony.NP.Auth.NpClientSecret.Secret">
            <summary>
            Client secret string (specify the value issued by the PlayStation®4 Developer Network)
            </summary>
            <exception cref="T:Sony.NP.NpToolkitException">Will throw an exception if the string is more than <see cref="F:Sony.NP.Auth.NpClientSecret.NP_CLIENT_SECRET_MAX_LEN"/> characters.</exception>
        </member>
        <member name="T:Sony.NP.Auth.GetAuthCodeRequest">
            <summary>
            Parameters passed to get the auth. code from the PSN server to send it to the application server.
            </summary>
        </member>
        <member name="T:Sony.NP.RequestBase">
            <summary>
            The base class contain common settings for all request classes
            </summary>
        </member>
        <member name="M:Sony.NP.RequestBase.#ctor(Sony.NP.ServiceTypes,Sony.NP.FunctionTypes)">
            <summary>
            Initialise the class with its service type and function type.
            </summary>
            <param name="serviceType">The service type.</param>
            <param name="functionType">The function type.</param>
        </member>
        <member name="P:Sony.NP.RequestBase.ServiceType">
            <summary>
            Returns a value representing the service that uses the request.
            </summary>
        </member>
        <member name="P:Sony.NP.RequestBase.FunctionType">
            <summary>
            Returns a value representing the function that uses the request.
            </summary>
        </member>
        <member name="P:Sony.NP.RequestBase.ServiceLabel">
            <summary>
            Service Label for the service, as configured in DevNet Forms
            </summary>
        </member>
        <member name="P:Sony.NP.RequestBase.UserId">
            <summary>
            Calling user Id performing the request
            </summary>
        </member>
        <member name="P:Sony.NP.RequestBase.Async">
            <summary>
            Way the request will be performed: asynchronous or synchronous
            </summary>
        </member>
        <member name="F:Sony.NP.Auth.GetAuthCodeRequest.MAX_SIZE_SCOPE">
            <summary>
            The maximum size the scope string can be
            </summary>
        </member>
        <member name="M:Sony.NP.Auth.GetAuthCodeRequest.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Sony.NP.Auth.GetAuthCodeRequest"/> class.
            </summary>
        </member>
        <member name="P:Sony.NP.Auth.GetAuthCodeRequest.ClientId">
            <summary>
            Client Id provided on DevNet upon registration of the application server
            </summary>
        </member>
        <member name="P:Sony.NP.Auth.GetAuthCodeRequest.Scope">
            <summary>
            Depending on the scope value, the auth.code and its token will be able to access or not certain information
            </summary>
            <exception cref="T:Sony.NP.NpToolkitException">Will throw an exception if the path is more than <see cref="F:Sony.NP.Auth.GetAuthCodeRequest.MAX_SIZE_SCOPE"/> characters.</exception>
        </member>
        <member name="T:Sony.NP.Auth.GetIdTokenRequest">
            <summary>
            Parameters passed to get the Id Token from the PSN server to send it to the application server.
            </summary>
        </member>
        <member name="F:Sony.NP.Auth.GetIdTokenRequest.MAX_SIZE_SCOPE">
            <summary>
            The maximum size the scope string can be
            </summary>
        </member>
        <member name="M:Sony.NP.Auth.GetIdTokenRequest.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Sony.NP.Auth.GetIdTokenRequest"/> class.
            </summary>
        </member>
        <member name="P:Sony.NP.Auth.GetIdTokenRequest.ClientId">
            <summary>
            Client Id provided on DevNet upon registration of the application server
            </summary>
        </member>
        <member name="P:Sony.NP.Auth.GetIdTokenRequest.ClientSecret">
            <summary>
            Client Secret provided on DevNet upon registration of the application server and services
            </summary>
        </member>
        <member name="P:Sony.NP.Auth.GetIdTokenRequest.Scope">
            <summary>
            Depending on the scope value, the token will contain or not contain information
            </summary>
            <exception cref="T:Sony.NP.NpToolkitException">Will throw an exception if the path is more than <see cref="F:Sony.NP.Auth.GetIdTokenRequest.MAX_SIZE_SCOPE"/> characters.</exception>
        </member>
        <member name="T:Sony.NP.Auth.IssuerIdType">
            <summary>
            Enum representing the three type of environments the validated code can be from.
            </summary>
        </member>
        <member name="F:Sony.NP.Auth.IssuerIdType.Invalid">
            <summary> The environment is not recognized. It should never be returned </summary>
        </member>
        <member name="F:Sony.NP.Auth.IssuerIdType.Development">
            <summary> Environment used while the application is being developed </summary>
        </member>
        <member name="F:Sony.NP.Auth.IssuerIdType.Certification">
            <summary> Environment used while the application is being tested by Format QA after submission </summary>
        </member>
        <member name="F:Sony.NP.Auth.IssuerIdType.Live">
            <summary> Environment used by final users for applications that are already released </summary>
        </member>
        <member name="T:Sony.NP.Auth.AuthCodeResponse">
            <summary>
            Response object containing the authorization code that will be sent to the application server.
            </summary>
        </member>
        <member name="T:Sony.NP.ResponseBase">
            <summary>
            Base class that contains common Response data
            </summary>
        </member>
        <member name="M:Sony.NP.ResponseBase.ReadResult(System.UInt32,Sony.NP.FunctionTypes,Sony.NP.RequestBase)">
            <summary>
            Read the response base data from the native plug-in
            </summary>
            <param name="id">The request id.</param>
            <param name="apiCalled">The Api called for the request.</param>
            <param name="request">The Request object that started the request. In the case of Notifications this will be null.</param>
        </member>
        <member name="M:Sony.NP.ResponseBase.ConvertReturnCodeToString(Sony.NP.FunctionTypes)">
            <summary>
            Generate a string containing the Hex return code and if known the Return code name
            taken from the Core.ReturnCodes enum.
            As some of the enums share the same code the returned string will depend on the
            API function used that generated the return code;
            </summary>
            <param name="apiCalled">The API that generated the return code. </param>
            <returns>The constructed string with the Hex and return code name.</returns>
            <remarks>
            By default apiCalled will be FunctionType.invalid. This will return the first Core.ReturnCodes enum that matches the return code value so may produce an incorrect string. 
            </remarks>
        </member>
        <member name="P:Sony.NP.ResponseBase.ReturnCodeValue">
            <summary>
            Gets the return code value of a Response object when it is ready. The return value will be a
            successful result or an error result. See specific functions to know which return codes may be returned
            </summary>
            <remarks>
            This will be an interger value, which will be an error code is less than 0.
            </remarks>
        </member>
        <member name="P:Sony.NP.ResponseBase.ReturnCode">
            <summary>
            Gets the return code enum of a Response object when it is ready. The return value will be a
            successful result or an error result. See specific functions to know which return codes may be returned.
            </summary>
        </member>
        <member name="P:Sony.NP.ResponseBase.Locked">
            <summary>
            Indicates if a Response object is being calculated or it is ready to be read.
            </summary>
        </member>
        <member name="P:Sony.NP.ResponseBase.ServerError">
            <summary>
            Represents additional information provided when there has been a server error.
            </summary>
        </member>
        <member name="P:Sony.NP.ResponseBase.IsErrorCode">
            <summary>
            Does the return code contain an error code.
            </summary>
        </member>
        <member name="P:Sony.NP.ResponseBase.HasServerError">
            <summary>
            Is there a server error object available
            </summary>
        </member>
        <member name="M:Sony.NP.Auth.AuthCodeResponse.ReadResult(System.UInt32,Sony.NP.FunctionTypes,Sony.NP.RequestBase)">
            <summary>
            Read the response data from the plug-in
            </summary>
            <param name="id">The request id.</param>
            <param name="apiCalled">The API called.</param>
            <param name="request">The Request object.</param>
        </member>
        <member name="P:Sony.NP.Auth.AuthCodeResponse.AuthCode">
            <summary>
            Auth. Code returned by the PSN server. It needs to be sent to the application server to obtain a valid token and be able to communicate with PSN servers
            </summary>
        </member>
        <member name="P:Sony.NP.Auth.AuthCodeResponse.IssuerId">
            <summary>
            The environment the <see cref="P:Sony.NP.Auth.AuthCodeResponse.AuthCode"/> is from
            </summary>
        </member>
        <member name="T:Sony.NP.Auth.IdTokenResponse">
            <summary>
            Response object containing the Id token that will be sent to the application server.
            </summary>
        </member>
        <member name="M:Sony.NP.Auth.IdTokenResponse.ReadResult(System.UInt32,Sony.NP.FunctionTypes,Sony.NP.RequestBase)">
            <summary>
            Read the response data from the plug-in
            </summary>
            <param name="id">The request id.</param>
            <param name="apiCalled">The API called.</param>
            <param name="request">The Request object.</param>
        </member>
        <member name="P:Sony.NP.Auth.IdTokenResponse.IdToken">
            <summary>
            The token to be sent to the application server to authenticate the user
            </summary>
        </member>
        <member name="T:Sony.NP.Commerce">
            <summary>
            Commerce service related functionality.
            </summary>
        </member>
        <member name="M:Sony.NP.Commerce.GetCategories(Sony.NP.Commerce.GetCategoriesRequest,Sony.NP.Commerce.CategoriesResponse)">
            <summary>
            Gets information about in-game categories on the PlayStation®Store
            </summary>
            <param name="request">Parameters needed to retrieve category information. To retrieve the root category, don't specify any category IDs</param>
            <param name="response">This response will contain the category information upon successful completion</param>
            <returns>If the operation is asynchronous, the function provides the request Id.</returns>
            <exception cref="T:Sony.NP.NpToolkitException">Will throw an exception either when the request data is invalid, or an internal error has occured inside the NpToolkit plug-in.</exception>
        </member>
        <member name="M:Sony.NP.Commerce.GetProducts(Sony.NP.Commerce.GetProductsRequest,Sony.NP.Commerce.ProductsResponse)">
            <summary>
            Gets products that are available on the PlayStation®Store
            </summary>
            <param name="request">Parameters required for retrieving products for a user. This can contain specific category or product IDs</param>
            <param name="response">This response will contain a list of products upon successful completion</param>
            <returns>If the operation is asynchronous, the function provides the request Id.</returns>
            <exception cref="T:Sony.NP.NpToolkitException">Will throw an exception either when the request data is invalid, or an internal error has occured inside the NpToolkit plug-in.</exception>
        </member>
        <member name="M:Sony.NP.Commerce.GetServiceEntitlements(Sony.NP.Commerce.GetServiceEntitlementsRequest,Sony.NP.Commerce.ServiceEntitlementsResponse)">
            <summary>
            Get a list of Service Entitlements for a given local user
            </summary>
            <param name="request"> Required parameters to retrieve a users Service Entitlements. If a user has many service entitlements, the request can be paged</param>
            <param name="response">This response will contain the users Service Entitlements on successful completion</param>
            <returns>If the operation is asynchronous, the function provides the request Id.</returns>
            <exception cref="T:Sony.NP.NpToolkitException">Will throw an exception either when the request data is invalid, or an internal error has occured inside the NpToolkit plug-in.</exception>
        </member>
        <member name="M:Sony.NP.Commerce.ConsumeServiceEntitlement(Sony.NP.Commerce.ConsumeServiceEntitlementRequest,Sony.NP.Core.EmptyResponse)">
            <summary>
            Consume a Service Entitlement
            </summary>
            <param name="request"> The parameters required to consume from a service entitlement. Includes the entitlement ID and a number to consume</param>
            <param name="response"> This response does not have data, only return code</param>
            <returns>If the operation is asynchronous, the function provides the request Id.</returns>
            <exception cref="T:Sony.NP.NpToolkitException">Will throw an exception either when the request data is invalid, or an internal error has occured inside the NpToolkit plug-in.</exception>
        </member>
        <member name="M:Sony.NP.Commerce.DisplayCategoryBrowseDialog(Sony.NP.Commerce.DisplayCategoryBrowseDialogRequest,Sony.NP.Core.EmptyResponse)">
            <summary>
            This function opens the commerce dialog to a specified category on the PlayStation®Store
            </summary>
            <param name="request"> If no category ID is specified, the root category will be shown </param>
            <param name="response"> This response does not have data, only return code</param>
            <returns>If the operation is asynchronous, the function provides the request Id.</returns>
            <exception cref="T:Sony.NP.NpToolkitException">Will throw an exception either when the request data is invalid, or an internal error has occured inside the NpToolkit plug-in.</exception>
        </member>
        <member name="M:Sony.NP.Commerce.DisplayProductBrowseDialog(Sony.NP.Commerce.DisplayProductBrowseDialogRequest,Sony.NP.Core.EmptyResponse)">
            <summary>
            This function opens the commerce dialog to a specified product on the PlayStation®Store
            </summary>
            <param name="request"> The parameters required to open the dialog to a specified product </param>
            <param name="response"> This response does not have data, only return code</param>
            <returns>If the operation is asynchronous, the function provides the request Id.</returns>
            <exception cref="T:Sony.NP.NpToolkitException">Will throw an exception either when the request data is invalid, or an internal error has occured inside the NpToolkit plug-in.</exception>
        </member>
        <member name="M:Sony.NP.Commerce.DisplayVoucherCodeInputDialog(Sony.NP.Commerce.DisplayVoucherCodeInputDialogRequest,Sony.NP.Core.EmptyResponse)">
            <summary>
            Display a dialog where the user can redeem a voucher code
            </summary>
            <param name="request"> The parameters required to open the voucher redemption dialog </param>
            <param name="response"> This response does not have data, only return code</param>
            <returns>If the operation is asynchronous, the function provides the request Id.</returns>
            <exception cref="T:Sony.NP.NpToolkitException">Will throw an exception either when the request data is invalid, or an internal error has occured inside the NpToolkit plug-in.</exception>
        </member>
        <member name="M:Sony.NP.Commerce.DisplayCheckoutDialog(Sony.NP.Commerce.DisplayCheckoutDialogRequest,Sony.NP.Core.EmptyResponse)">
            <summary>
            This function opens the commerce dialog to a specified SKU ID on the PlayStation®Store
            </summary>
            <param name="request"> The SKU IDs that the user would like to purchase </param>
            <param name="response"> This response does not have data, only return code</param>
            <returns>If the operation is asynchronous, the function provides the request Id.</returns>
            <exception cref="T:Sony.NP.NpToolkitException">Will throw an exception either when the request data is invalid, or an internal error has occured inside the NpToolkit plug-in.</exception>
        </member>
        <member name="M:Sony.NP.Commerce.DisplayDownloadListDialog(Sony.NP.Commerce.DisplayDownloadListDialogRequest,Sony.NP.Core.EmptyResponse)">
            <summary>
            This function opens the commerce dialog to a users download list
            </summary>
            <param name="request"> Parameters required for opening the download list dialog</param>
            <param name="response"> This response does not have data, only return code</param>
            <returns>If the operation is asynchronous, the function provides the request Id.</returns>
            <exception cref="T:Sony.NP.NpToolkitException">Will throw an exception either when the request data is invalid, or an internal error has occured inside the NpToolkit plug-in.</exception>
        </member>
        <member name="M:Sony.NP.Commerce.DisplayJoinPlusDialog(Sony.NP.Commerce.DisplayJoinPlusDialogRequest,Sony.NP.Core.EmptyResponse)">
            <summary>
            Displays a screen to purchase entitlement to join PlayStation®Plus
            </summary>
            <param name="request"> Parameters required to show the join plus dialog </param>
            <param name="response"> This response does not have data, only return code</param>
            <returns>If the operation is asynchronous, the function provides the request Id.</returns>
            <exception cref="T:Sony.NP.NpToolkitException">Will throw an exception either when the request data is invalid, or an internal error has occured inside the NpToolkit plug-in.</exception>
        </member>
        <member name="M:Sony.NP.Commerce.SetPsStoreIconDisplayState(Sony.NP.Commerce.SetPsStoreIconDisplayStateRequest,Sony.NP.Core.EmptyResponse)">
            <summary>
            Show or hide the PlayStation®Store Icon
            </summary>
            <param name="request">  The parameters required to show/hide the icon, along with the position on the screen </param>
            <param name="response"> This response does not have data, only return code</param>
            <returns>If the operation is asynchronous, the function provides the request Id.</returns>
            <exception cref="T:Sony.NP.NpToolkitException">Will throw an exception either when the request data is invalid, or an internal error has occured inside the NpToolkit plug-in.</exception>
        </member>
        <member name="T:Sony.NP.Commerce.CategoryLabel">
            <summary>
             Represents a label of a category on the PlayStation Store.
            </summary>
            <remarks>
            Renamed from CategoryId in SDK 4.5
            </remarks>
        </member>
        <member name="F:Sony.NP.Commerce.CategoryLabel.CATEGORY_LABEL_MAX_LEN">
            <summary>
            Maximum length a category label can have.
            </summary>
        </member>
        <member name="F:Sony.NP.Commerce.CategoryLabel.SDK4_0_CATEGORY_LABEL_MAX_LEN">
            <summary>
            Maximum length a category label in SDK 4.0
            </summary>
        </member>
        <member name="P:Sony.NP.Commerce.CategoryLabel.Value">
            <summary>
            Category label value, identifying a Category of the title.
            </summary>
            <exception cref="T:Sony.NP.NpToolkitException">Will throw an exception if the category id is more than <see cref="F:Sony.NP.Commerce.CategoryLabel.CATEGORY_LABEL_MAX_LEN"/> characters.</exception>
        </member>
        <member name="T:Sony.NP.Commerce.ServiceEntitlementLabel">
            <summary>
            Represents a label of a Service Entitlement on the PlayStation Store.
            </summary>
            <remarks>
            Renamed from EntitlementId in SDK 4.5
            </remarks>
        </member>
        <member name="F:Sony.NP.Commerce.ServiceEntitlementLabel.SERVICE_ENTITLEMENT_LABEL_MAX_LEN">
            <summary>
            Length a service entitlement label has.
            </summary>
        </member>
        <member name="F:Sony.NP.Commerce.ServiceEntitlementLabel.SDK4_0_SERVICE_ENTITLEMENT_LABEL_MAX_LEN">
            <summary>
            Length a service entitlement label in SDK 4.0
            </summary>
        </member>
        <member name="P:Sony.NP.Commerce.ServiceEntitlementLabel.Value">
            <summary>
            Service Entitlement label value, identifying a Service Entitlement of the title.
            </summary>
            <exception cref="T:Sony.NP.NpToolkitException">Will throw an exception if the label is more than <see cref="F:Sony.NP.Commerce.ServiceEntitlementLabel.SERVICE_ENTITLEMENT_LABEL_MAX_LEN"/> characters.</exception>
        </member>
        <member name="T:Sony.NP.Commerce.ProductLabel">
            <summary>
            Represents a label of a Product on the PlayStation Store.
            </summary>
            <remarks>
            Renamed from ProductId in SDK 4.5
            </remarks>
        </member>
        <member name="F:Sony.NP.Commerce.ProductLabel.PRODUCT_LABEL_MAX_LEN">
            <summary>
             Length a product label has.
            </summary>
        </member>
        <member name="F:Sony.NP.Commerce.ProductLabel.SDK4_0_PRODUCT_LABEL_MAX_LEN">
            <summary>
             Length a product label in SDK 4.0
            </summary>
        </member>
        <member name="P:Sony.NP.Commerce.ProductLabel.Value">
            <summary>
            Product label value, identifying a Product of the title.
            </summary>
            <exception cref="T:Sony.NP.NpToolkitException">Will throw an exception if the label is more than <see cref="F:Sony.NP.Commerce.ProductLabel.PRODUCT_LABEL_MAX_LEN"/> characters.</exception>
        </member>
        <member name="T:Sony.NP.Commerce.SkuLabel">
            <summary>
            Represents a label of a Sku on the PlayStation Store.
            </summary>
            <remarks>
            Renamed from SkuId in SDK 4.5
            </remarks>
        </member>
        <member name="F:Sony.NP.Commerce.SkuLabel.SKU_LABEL_MAX_LEN">
            <summary>
            Length a sku label has.
            </summary>
        </member>
        <member name="F:Sony.NP.Commerce.SkuLabel.SDK4_0_SKU_LABEL_MAX_LEN">
            <summary>
            Length of SKU label in SDK 4.0
            </summary>
        </member>
        <member name="P:Sony.NP.Commerce.SkuLabel.Value">
            <summary>
            Sku label value, identifying a Sku of a product of the title.
            </summary>
            <exception cref="T:Sony.NP.NpToolkitException">Will throw an exception if the label is more than <see cref="F:Sony.NP.Commerce.SkuLabel.SKU_LABEL_MAX_LEN"/> characters.</exception>
        </member>
        <member name="T:Sony.NP.Commerce.DownloadListTarget">
            <summary>
             Represents a target of the DownloadList dialog. A target can be contained of only the product label, or the combination of product label and sku label.
            </summary>
        </member>
        <member name="P:Sony.NP.Commerce.DownloadListTarget.ProductLabel">
            <summary>
            The product label of the target to show on the dialog.
            </summary>
        </member>
        <member name="P:Sony.NP.Commerce.DownloadListTarget.SkuLabel">
            <summary>
            Optional. The sku label of the product target to show on the dialog.
            </summary>
        </member>
        <member name="T:Sony.NP.Commerce.CheckoutTarget">
            <summary>
            Represents a target of the Checkout dialog. A target can be contained of only the product label; the combination of product label and sku label; or the combination of product label, sku label and service label.
            </summary>
        </member>
        <member name="F:Sony.NP.Commerce.CheckoutTarget.NP_INVALID_SERVICE_LABEL">
            <summary>
            Invalid service label. Set <see cref="P:Sony.NP.Commerce.CheckoutTarget.ServiceLabel"/> to this if <see cref="P:Sony.NP.Commerce.CheckoutTarget.SkuLabel"/> isn't set.
            </summary>
        </member>
        <member name="P:Sony.NP.Commerce.CheckoutTarget.ProductLabel">
            <summary>
            The product label of the target to show on the dialog.
            </summary>
        </member>
        <member name="P:Sony.NP.Commerce.CheckoutTarget.SkuLabel">
            <summary>
            Optional (mandatory if <see cref="P:Sony.NP.Commerce.CheckoutTarget.ServiceLabel"/> is provided). The sku label of the product target to show on the dialog.
            </summary>
        </member>
        <member name="P:Sony.NP.Commerce.CheckoutTarget.ServiceLabel">
            <summary>
            Optional. The service label of the product and sku to show on the dialog, in case more than one service label is configured.
            </summary>
        </member>
        <member name="T:Sony.NP.Commerce.SubCategory">
            <summary>
            Details of a sub category on the PlayStation Store
            </summary>
        </member>
        <member name="P:Sony.NP.Commerce.SubCategory.CategoryName">
            <summary>
            The name of the subcategory
            </summary>
        </member>
        <member name="P:Sony.NP.Commerce.SubCategory.CategoryDescription">
            <summary>
            The detailed description of the subcategory
            </summary>
        </member>
        <member name="P:Sony.NP.Commerce.SubCategory.ImageUrl">
            <summary>
            The image URL of the subcategory
            </summary>
        </member>
        <member name="P:Sony.NP.Commerce.SubCategory.CategoryLabel">
            <summary>
            The ID of the subcategory
            </summary>
        </member>
        <member name="T:Sony.NP.Commerce.Category">
            <summary>
            The category details that were returned from the PlayStation Store
            </summary>
        </member>
        <member name="P:Sony.NP.Commerce.Category.SubCategories">
            <summary>
            A list of subcategories in this category
            </summary>
        </member>
        <member name="P:Sony.NP.Commerce.Category.CountOfProducts">
            <summary>
            The number of products in the category
            </summary>
        </member>
        <member name="P:Sony.NP.Commerce.Category.CategoryName">
            <summary>
            The name of the category
            </summary>
        </member>
        <member name="P:Sony.NP.Commerce.Category.CategoryDescription">
            <summary>
            The detailed description of the category
            </summary>
        </member>
        <member name="P:Sony.NP.Commerce.Category.ImageUrl">
            <summary>
            The image URL of the category
            </summary>
        </member>
        <member name="P:Sony.NP.Commerce.Category.CategoryLabel">
            <summary>
            The label of the category.
            </summary>
        </member>
        <member name="T:Sony.NP.Commerce.Product">
            <summary>
            Information about a product on the PlayStation Store
            </summary>
        </member>
        <member name="P:Sony.NP.Commerce.Product.ProductLabel">
            <summary>
            The product label to identify the product on the title.
            </summary>
        </member>
        <member name="P:Sony.NP.Commerce.Product.ProductName">
            <summary>
            The name of the product
            </summary>
        </member>
        <member name="P:Sony.NP.Commerce.Product.ImageUrl">
            <summary>
            The product image URL
            </summary>
        </member>
        <member name="P:Sony.NP.Commerce.Product.HasDetails">
            <summary>
            Specifies whether <see cref="P:Sony.NP.Commerce.Product.Details"/> is set or not
            </summary>
        </member>
        <member name="P:Sony.NP.Commerce.Product.Details">
            <summary>
            Additional details that are only set when specific products are requested with <see cref="M:Sony.NP.Commerce.GetProducts(Sony.NP.Commerce.GetProductsRequest,Sony.NP.Commerce.ProductsResponse)"/>
            </summary>
        </member>
        <member name="T:Sony.NP.Commerce.PurchasabilityStatus">
            <summary>
            The purchasability status
            </summary>
        </member>
        <member name="F:Sony.NP.Commerce.PurchasabilityStatus.NotPurchased">
            <summary> Specifies that the user has not purchased this product or SKU </summary>
        </member>
        <member name="F:Sony.NP.Commerce.PurchasabilityStatus.PurchasedCanPurchaseAgain">
            <summary> Specifies that a product has already been purchased and can be purchased again (consumable or time limited entitlements) </summary>
        </member>
        <member name="F:Sony.NP.Commerce.PurchasabilityStatus.PurchasedCannotPurchaseAgain">
            <summary> Specifies that a product has already been purchased and cannot be purchased again </summary>
        </member>
        <member name="T:Sony.NP.Commerce.RatingDescriptor">
            <summary>
            The rating descriptors associated with a product on the PlayStation Store
            </summary>
        </member>
        <member name="P:Sony.NP.Commerce.RatingDescriptor.Name">
            <summary>
            The name rating descriptor, for example "Strong Language" or "Use of Alcohol"
            </summary>
        </member>
        <member name="P:Sony.NP.Commerce.RatingDescriptor.ImageUrl">
            <summary>
            The URL of the rating descriptor image
            </summary>
        </member>
        <member name="T:Sony.NP.Commerce.ProductDetails">
            <summary>
            Detailed information about a product on the PlayStation Store
            </summary>
            <remarks>
            Detailed information about a product on the PlayStation Store. If specific products are requested using <see cref="M:Sony.NP.Commerce.GetProducts(Sony.NP.Commerce.GetProductsRequest,Sony.NP.Commerce.ProductsResponse)"/>,
            the property <see cref="P:Sony.NP.Commerce.Product.Details"/> will contain additional product and SKU details. The product
            details here can be used for 'in-game browsing', with the SKU ID being used in conjunction with "displayCheckoutDialog()".
            </remarks>
        </member>
        <member name="P:Sony.NP.Commerce.ProductDetails.ReleaseDate">
            <summary>
            The product release date
            </summary>
        </member>
        <member name="P:Sony.NP.Commerce.ProductDetails.LongDescription">
            <summary>
            A long description of the product
            </summary>
        </member>
        <member name="P:Sony.NP.Commerce.ProductDetails.SpName">
            <summary>
            The service provider (publisher) name
            </summary>
        </member>
        <member name="P:Sony.NP.Commerce.ProductDetails.RatingSystemId">
            <summary>
            The ID of the rating system (for example: PEGI, ESRB)
            </summary>
        </member>
        <member name="P:Sony.NP.Commerce.ProductDetails.RatingImageUrl">
            <summary>
            The URL of the rating icon image
            </summary>
        </member>
        <member name="P:Sony.NP.Commerce.ProductDetails.RatingDescriptors">
            <summary>
            Rating descriptors
            </summary>
        </member>
        <member name="P:Sony.NP.Commerce.ProductDetails.Skuinfo">
            <summary>
            SKU information
            </summary>
        </member>
        <member name="P:Sony.NP.Commerce.ProductDetails.PurchasabilityStatus">
            <summary>
            Purchasability status
            </summary>
        </member>
        <member name="P:Sony.NP.Commerce.ProductDetails.StarRatingsTotal">
            <summary>
            The total number of star ratings that users have given this product
            </summary>
        </member>
        <member name="P:Sony.NP.Commerce.ProductDetails.StarRatingScore">
            <summary>
            The average star rating given by users
            </summary>
        </member>
        <member name="T:Sony.NP.Commerce.SkuType">
            <summary>
            The type of SKU that was returned
            </summary>
        </member>
        <member name="F:Sony.NP.Commerce.SkuType.Invalid">
            <summary> Value not set </summary>
        </member>
        <member name="F:Sony.NP.Commerce.SkuType.Standard">
            <summary> A standard SKU </summary>
        </member>
        <member name="F:Sony.NP.Commerce.SkuType.Preorder">
            <summary> A pre-order SKU </summary>
        </member>
        <member name="T:Sony.NP.Commerce.SkuInfo">
            <summary>
            SKU information for a product on the PlayStation Store
            </summary>
        </member>
        <member name="P:Sony.NP.Commerce.SkuInfo.Type">
            <summary>
            The type of SKU
            </summary>
        </member>
        <member name="P:Sony.NP.Commerce.SkuInfo.PurchasabilityStatus">
            <summary>
            Purchasability status
            </summary>
        </member>
        <member name="P:Sony.NP.Commerce.SkuInfo.Label">
            <summary>
            The label of the SKU.
            </summary>
        </member>
        <member name="P:Sony.NP.Commerce.SkuInfo.Name">
            <summary>
            The name of the SKU. Only use this in conjunction with the product name if there are more than one SKUs
            </summary>
        </member>
        <member name="P:Sony.NP.Commerce.SkuInfo.Price">
            <summary>
            The price of the SKU. This is formatted to include the currency code or currency symbol
            </summary>
        </member>
        <member name="P:Sony.NP.Commerce.SkuInfo.IntPrice">
            <summary>
            Integer representation of the price. Not for user display
            </summary>
        </member>
        <member name="P:Sony.NP.Commerce.SkuInfo.ConsumableUseCount">
            <summary>
            The number of uses that will be given if the user purchases the SKU (provided that the product entitles the user to a consumable service entitlement)
            </summary>
        </member>
        <member name="T:Sony.NP.Commerce.EntitlementType">
            <summary>
            The type of entitlement
            </summary>
        </member>
        <member name="F:Sony.NP.Commerce.EntitlementType.Invalid">
            <summary> Invalid entitlement type </summary>
        </member>
        <member name="F:Sony.NP.Commerce.EntitlementType.Service">
            <summary> Service entitlement </summary>
        </member>
        <member name="F:Sony.NP.Commerce.EntitlementType.ServiceConsumable">
            <summary> Consumable service entitlement </summary>
        </member>
        <member name="F:Sony.NP.Commerce.EntitlementType.Unified">
            <summary> Unified entitlement </summary>
        </member>
        <member name="T:Sony.NP.Commerce.ServiceEntitlement">
            <summary>
            Represents a service entitlement
            </summary>
        </member>
        <member name="P:Sony.NP.Commerce.ServiceEntitlement.EntitlementLabel">
            <summary>
            The service entitlement ID
            </summary>
        </member>
        <member name="P:Sony.NP.Commerce.ServiceEntitlement.CreatedDate">
            <summary>
            The date when the user initially got the entitlement
            </summary>
        </member>
        <member name="P:Sony.NP.Commerce.ServiceEntitlement.ExpireDate">
            <summary>
            The date when the entitlement expires
            </summary>
        </member>
        <member name="P:Sony.NP.Commerce.ServiceEntitlement.RemainingCount">
            <summary>
            The remaining uses for a consumable service entitlement. This may be a negative value
            </summary>
        </member>
        <member name="P:Sony.NP.Commerce.ServiceEntitlement.ConsumedCount">
            <summary>
            The amount of times a consumable service entitlement has been consumed
            </summary>
        </member>
        <member name="P:Sony.NP.Commerce.ServiceEntitlement.Type">
            <summary>
            The type of entitlement
            </summary>
        </member>
        <member name="T:Sony.NP.Commerce.GetCategoriesRequest">
            <summary>
            Parameters required to retrieve category information from the PlayStation Store
            </summary>
        </member>
        <member name="F:Sony.NP.Commerce.GetCategoriesRequest.MAX_CATEGORIES">
            <summary>
            The maximum number of categories per request
            </summary>
        </member>
        <member name="M:Sony.NP.Commerce.GetCategoriesRequest.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Sony.NP.Commerce.GetCategoriesRequest"/> class.
            </summary>
        </member>
        <member name="P:Sony.NP.Commerce.GetCategoriesRequest.CategoryLabels">
            <summary>
            The labels of the categories to obtain the information about. Set to null to just get information about the root category
            </summary>
        </member>
        <member name="T:Sony.NP.Commerce.ProductSortOrders">
            <summary>
            The sorting order of products that are returned from the PlayStation Store
            </summary>
        </member>
        <member name="F:Sony.NP.Commerce.ProductSortOrders.DefaultOrder">
            <summary> Products will be returned in default order </summary>
        </member>
        <member name="F:Sony.NP.Commerce.ProductSortOrders.Name">
            <summary> Products will be returned in alphabetical order </summary>
        </member>
        <member name="F:Sony.NP.Commerce.ProductSortOrders.Price">
            <summary> Products will be returned ordered by price </summary>
        </member>
        <member name="F:Sony.NP.Commerce.ProductSortOrders.ReleaseDate">
            <summary> Products will be returned ordered by release date </summary>
        </member>
        <member name="T:Sony.NP.Commerce.ProductSortDirections">
            <summary>
            The sorting direction of products that are returned from the PlayStation Store
            </summary>
        </member>
        <member name="F:Sony.NP.Commerce.ProductSortDirections.Ascending">
            <summary> Products returned in ascending order </summary>
        </member>
        <member name="F:Sony.NP.Commerce.ProductSortDirections.Descending">
            <summary> Products returned in descending order </summary>
        </member>
        <member name="T:Sony.NP.Commerce.GetProductsRequest">
            <summary>
            Parameters required to retrieve category information from the PlayStation Store
            </summary>
        </member>
        <member name="F:Sony.NP.Commerce.GetProductsRequest.MAX_PRODUCTS">
            <summary>
            The maximum number of products per request
            </summary>
        </member>
        <member name="F:Sony.NP.Commerce.GetProductsRequest.MAX_CATEGORIES">
            <summary>
            The maximum number of categories per request
            </summary>
        </member>
        <member name="F:Sony.NP.Commerce.GetProductsRequest.DEFAULT_PAGE_SIZE">
            <summary>
            The default page size for product ids
            </summary>
        </member>
        <member name="M:Sony.NP.Commerce.GetProductsRequest.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Sony.NP.Commerce.GetProductsRequest"/> class.
            </summary>
        </member>
        <member name="P:Sony.NP.Commerce.GetProductsRequest.ProductLabels">
            <summary>
            Labels of the specific products we want to retrieve. If null is specified, all products up to pageSize will be retrieved
            </summary>
        </member>
        <member name="P:Sony.NP.Commerce.GetProductsRequest.CategoryLabels">
            <summary>
            The labels of the categories to obtain the information about. Set to null to just get information about the root category
            </summary>
        </member>
        <member name="P:Sony.NP.Commerce.GetProductsRequest.Offset">
            <summary>
            If many products exist, paging can be used. This is the starting index
            </summary>
        </member>
        <member name="P:Sony.NP.Commerce.GetProductsRequest.PageSize">
            <summary>
            Maximum number of entitlements to return. Defaults to <see cref="F:Sony.NP.Commerce.GetProductsRequest.DEFAULT_PAGE_SIZE"/>
            </summary>
        </member>
        <member name="P:Sony.NP.Commerce.GetProductsRequest.SortOrder">
            <summary>
            Sorting order in which the products are returned
            </summary>
        </member>
        <member name="P:Sony.NP.Commerce.GetProductsRequest.SortDirection">
            <summary>
            Sorting direction in which the products are returned
            </summary>
        </member>
        <member name="P:Sony.NP.Commerce.GetProductsRequest.KeepHtmlTags">
            <summary>
            Keep HTML tags in the product long description. false by default
            </summary>
        </member>
        <member name="P:Sony.NP.Commerce.GetProductsRequest.UseCurrencySymbol">
            <summary>
            Use currency symbol (example: $), instead currency code (example: USD). false by default
            </summary>
        </member>
        <member name="T:Sony.NP.Commerce.GetServiceEntitlementsRequest">
            <summary>
            Parameters required to retrieve a users service entitlements
            </summary>
        </member>
        <member name="F:Sony.NP.Commerce.GetServiceEntitlementsRequest.DEFAULT_PAGE_SIZE">
            <summary>
            The default page size for product ids
            </summary>
        </member>
        <member name="M:Sony.NP.Commerce.GetServiceEntitlementsRequest.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Sony.NP.Commerce.GetServiceEntitlementsRequest"/> class.
            </summary>
        </member>
        <member name="P:Sony.NP.Commerce.GetServiceEntitlementsRequest.Offset">
            <summary>
            If many service entitlements exist, paging can be used. This is the starting index
            </summary>
        </member>
        <member name="P:Sony.NP.Commerce.GetServiceEntitlementsRequest.PageSize">
            <summary>
            Maximum number of entitlements to return. Defaults to <see cref="F:Sony.NP.Commerce.GetServiceEntitlementsRequest.DEFAULT_PAGE_SIZE"/>
            </summary>
        </member>
        <member name="T:Sony.NP.Commerce.ConsumeServiceEntitlementRequest">
            <summary>
            Input parameters for consuming from a service entitlement
            </summary>
        </member>
        <member name="M:Sony.NP.Commerce.ConsumeServiceEntitlementRequest.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Sony.NP.Commerce.ConsumeServiceEntitlementRequest"/> class.
            </summary>
        </member>
        <member name="P:Sony.NP.Commerce.ConsumeServiceEntitlementRequest.EntitlementLabel">
            <summary>
            The service entitlement label
            </summary>
        </member>
        <member name="P:Sony.NP.Commerce.ConsumeServiceEntitlementRequest.ConsumedCount">
            <summary>
            The amount to consume
            </summary>
        </member>
        <member name="T:Sony.NP.Commerce.DisplayCategoryBrowseDialogRequest">
            <summary>
            Input parameters required to display a category on the PlayStation Store
            </summary>
        </member>
        <member name="M:Sony.NP.Commerce.DisplayCategoryBrowseDialogRequest.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Sony.NP.Commerce.DisplayCategoryBrowseDialogRequest"/> class.
            </summary>
        </member>
        <member name="P:Sony.NP.Commerce.DisplayCategoryBrowseDialogRequest.CategoryLabel">
            <summary>
            The label of the category to display. To open the root category, don't set this value.
            </summary>
        </member>
        <member name="T:Sony.NP.Commerce.DisplayProductBrowseDialogRequest">
            <summary>
            Parameters required to display a product browse dialog
            </summary>
        </member>
        <member name="M:Sony.NP.Commerce.DisplayProductBrowseDialogRequest.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Sony.NP.Commerce.DisplayProductBrowseDialogRequest"/> class.
            </summary>
        </member>
        <member name="P:Sony.NP.Commerce.DisplayProductBrowseDialogRequest.ProductLabel">
            <summary>
            he label of the product to display.
            </summary>
        </member>
        <member name="T:Sony.NP.Commerce.DisplayVoucherCodeInputDialogRequest">
            <summary>
            Parameters required to display the voucher input dialog
            </summary>
        </member>
        <member name="F:Sony.NP.Commerce.DisplayVoucherCodeInputDialogRequest.VOUCHER_CODE_LEN">
            <summary>
            The default page size for product ids
            </summary>
        </member>
        <member name="M:Sony.NP.Commerce.DisplayVoucherCodeInputDialogRequest.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Sony.NP.Commerce.DisplayVoucherCodeInputDialogRequest"/> class.
            </summary>
        </member>
        <member name="P:Sony.NP.Commerce.DisplayVoucherCodeInputDialogRequest.VoucherCode">
            <summary>
            Voucher code can be pre-filled. If not set, user can input voucher code manually
            </summary>
            <exception cref="T:Sony.NP.NpToolkitException">Will throw an exception if the voucher code is more than <see cref="F:Sony.NP.Commerce.DisplayVoucherCodeInputDialogRequest.VOUCHER_CODE_LEN"/> characters.</exception>
        </member>
        <member name="T:Sony.NP.Commerce.DisplayCheckoutDialogRequest">
            <summary>
            Parameters required to display the checkout dialog
            </summary>
        </member>
        <member name="F:Sony.NP.Commerce.DisplayCheckoutDialogRequest.MAX_TARGETS">
            <summary>
            The maximum amount of targets that can be set.
            </summary>
        </member>
        <member name="M:Sony.NP.Commerce.DisplayCheckoutDialogRequest.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Sony.NP.Commerce.DisplayCheckoutDialogRequest"/> class.
            </summary>
        </member>
        <member name="P:Sony.NP.Commerce.DisplayCheckoutDialogRequest.Targets">
            <summary>
            The targets to display in the checkout.
            </summary>
            <remarks>
            CheckoutTarget Sku Ids must not be hard coded as they can be changed any time after release. 
            CheckoutTarget Sku Ids must be retrieved programactically using APIs such as <see cref="M:Sony.NP.Commerce.GetProducts(Sony.NP.Commerce.GetProductsRequest,Sony.NP.Commerce.ProductsResponse)"/>.
            </remarks>
        </member>
        <member name="T:Sony.NP.Commerce.DisplayDownloadListDialogRequest">
            <summary>
            Parameters required to display a users download list
            </summary>
        </member>
        <member name="F:Sony.NP.Commerce.DisplayDownloadListDialogRequest.MAX_TARGETS">
            <summary>
            The maximum number of targets that can be set.
            </summary>
        </member>
        <member name="M:Sony.NP.Commerce.DisplayDownloadListDialogRequest.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Sony.NP.Commerce.DisplayDownloadListDialogRequest"/> class.
            </summary>
        </member>
        <member name="P:Sony.NP.Commerce.DisplayDownloadListDialogRequest.Targets">
            <summary>
            Specific targets to display in the download list. Specify null to display all available products to the user
            </summary>
        </member>
        <member name="T:Sony.NP.Commerce.DisplayJoinPlusDialogRequest">
            <summary>
            Parameters required to display a screen where the user can join PlayStation Plus
            </summary>
        </member>
        <member name="M:Sony.NP.Commerce.DisplayJoinPlusDialogRequest.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Sony.NP.Commerce.DisplayJoinPlusDialogRequest"/> class.
            </summary>
        </member>
        <member name="T:Sony.NP.Commerce.PsStoreIconPos">
            <summary>
            PS Store Icon Position
            </summary>
        </member>
        <member name="F:Sony.NP.Commerce.PsStoreIconPos.Center">
            <summary> Screen lower center </summary>
        </member>
        <member name="F:Sony.NP.Commerce.PsStoreIconPos.Left">
            <summary> Screen lower left </summary>
        </member>
        <member name="F:Sony.NP.Commerce.PsStoreIconPos.Right">
            <summary> Screen lower right </summary>
        </member>
        <member name="T:Sony.NP.Commerce.SetPsStoreIconDisplayStateRequest">
            <summary>
            Parameters required to show or hide the PlayStation Store icon as an overlay
            </summary>
        </member>
        <member name="M:Sony.NP.Commerce.SetPsStoreIconDisplayStateRequest.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Sony.NP.Commerce.SetPsStoreIconDisplayStateRequest"/> class.
            </summary>
        </member>
        <member name="P:Sony.NP.Commerce.SetPsStoreIconDisplayStateRequest.IconPosition">
            <summary>
            The position of the icon on the screen
            </summary>
        </member>
        <member name="P:Sony.NP.Commerce.SetPsStoreIconDisplayStateRequest.ShowIcon">
            <summary>
            Set to true to display the Store icon, and false to remove it
            </summary>
        </member>
        <member name="T:Sony.NP.Commerce.CategoriesResponse">
            <summary>
            The category details that were returned from the PlayStation Store
            </summary>
        </member>
        <member name="M:Sony.NP.Commerce.CategoriesResponse.ReadResult(System.UInt32,Sony.NP.FunctionTypes,Sony.NP.RequestBase)">
            <summary>
            Read the response data from the plug-in
            </summary>
            <param name="id">The request id.</param>
            <param name="apiCalled">The API called.</param>
            <param name="request">The Request object.</param>
        </member>
        <member name="P:Sony.NP.Commerce.CategoriesResponse.Categories">
            <summary>
            The categories that were retrieved from the Store
            </summary>
        </member>
        <member name="T:Sony.NP.Commerce.ProductsResponse">
            <summary>
            A list of products that were retrieved from the PlayStation Store
            </summary>
        </member>
        <member name="M:Sony.NP.Commerce.ProductsResponse.ReadResult(System.UInt32,Sony.NP.FunctionTypes,Sony.NP.RequestBase)">
            <summary>
            Read the response data from the plug-in
            </summary>
            <param name="id">The request id.</param>
            <param name="apiCalled">The API called.</param>
            <param name="request">The Request object.</param>
        </member>
        <member name="P:Sony.NP.Commerce.ProductsResponse.Products">
            <summary>
            The categories that were retrieved from the Store
            </summary>
        </member>
        <member name="T:Sony.NP.Commerce.ServiceEntitlementsResponse">
            <summary>
            A list of service entitlements for a user that were retrieved from the PlayStation Network
            </summary>
        </member>
        <member name="M:Sony.NP.Commerce.ServiceEntitlementsResponse.ReadResult(System.UInt32,Sony.NP.FunctionTypes,Sony.NP.RequestBase)">
            <summary>
            Read the response data from the plug-in
            </summary>
            <param name="id">The request id.</param>
            <param name="apiCalled">The API called.</param>
            <param name="request">The Request object.</param>
        </member>
        <member name="P:Sony.NP.Commerce.ServiceEntitlementsResponse.Entitlements">
            <summary>
            The service entitlements that were returned
            </summary>
        </member>
        <member name="P:Sony.NP.Commerce.ServiceEntitlementsResponse.TotalEntitlementsAvailable">
            <summary>
            Used for paging
            </summary>
        </member>
        <member name="T:Sony.NP.NpCallbackEvent">
            <summary>
            Callback class containing the results of an async request or notification
            </summary>
        </member>
        <member name="P:Sony.NP.NpCallbackEvent.Service">
            <summary>
            Service for which the request belongs to. The Notification service indicates a modification from the system
            </summary>
        </member>
        <member name="P:Sony.NP.NpCallbackEvent.ApiCalled">
            <summary>
            Function called to perform the request. In case of Notification service, the type of notification
            </summary>
        </member>
        <member name="P:Sony.NP.NpCallbackEvent.NpRequestId">
            <summary>
            The request Id returned when the async request was made
            </summary>
        </member>
        <member name="P:Sony.NP.NpCallbackEvent.Response">
            <summary>
            The response passed when the request was made. In case of notifications, it will be created by the plug-in.
            </summary>
        </member>
        <member name="P:Sony.NP.NpCallbackEvent.Request">
            <summary>
            The request instance that started the async request. Will be null for any Notification responses.
            </summary>
        </member>
        <member name="P:Sony.NP.NpCallbackEvent.UserId">
            <summary>
            The user Id of the user who performed the request
            </summary>
        </member>
        <member name="T:Sony.NP.PendingCallbackQueue">
            <summary>
            Used to store the request id returned by some of the NpToolkit methods.
            This Id can be used to abort the request and remove it from the internal NpToolkit queue.
            </summary>
        </member>
        <member name="F:Sony.NP.ServiceTypes_SDK4_5.Invalid">
            <summary>Non-valid service. It should never be returned (check memset() is not being used in a non-POD object, as a request)</summary>
        </member>
        <member name="F:Sony.NP.ServiceTypes_SDK4_5.Auth">
            <summary>Auth service</summary>
        </member>
        <member name="F:Sony.NP.ServiceTypes_SDK4_5.Presence">
            <summary>Presence service</summary>
        </member>
        <member name="F:Sony.NP.ServiceTypes_SDK4_5.Ranking">
            <summary>Ranking service</summary>
        </member>
        <member name="F:Sony.NP.ServiceTypes_SDK4_5.Trophy">
            <summary>Trophy service</summary>
        </member>
        <member name="F:Sony.NP.ServiceTypes_SDK4_5.NetworkUtils">
            <summary>Network Utils service</summary>
        </member>
        <member name="F:Sony.NP.ServiceTypes_SDK4_5.NpUtils">
            <summary>Np Utils service</summary>
        </member>
        <member name="F:Sony.NP.ServiceTypes_SDK4_5.WordFilter">
            <summary>Wordfilter service</summary>
        </member>
        <member name="F:Sony.NP.ServiceTypes_SDK4_5.UserProfile">
            <summary>User Profile service</summary>
        </member>
        <member name="F:Sony.NP.ServiceTypes_SDK4_5.EventsClient">
            <summary>Events Client service</summary>
        </member>
        <member name="F:Sony.NP.ServiceTypes_SDK4_5.Messaging">
            <summary>Messaging service</summary>
        </member>
        <member name="F:Sony.NP.ServiceTypes_SDK4_5.Matching">
            <summary>Matching service</summary>
        </member>
        <member name="F:Sony.NP.ServiceTypes_SDK4_5.Commerce">
            <summary>Commerce service</summary>
        </member>
        <member name="F:Sony.NP.ServiceTypes_SDK4_5.Challenge">
            <summary>Challenge service</summary>
        </member>
        <member name="F:Sony.NP.ServiceTypes_SDK4_5.Tus">
            <summary>TUS service</summary>
        </member>
        <member name="F:Sony.NP.ServiceTypes_SDK4_5.Tss">
            <summary>TSS service</summary>
        </member>
        <member name="F:Sony.NP.ServiceTypes_SDK4_5.Friends">
            <summary>Friend service</summary>
        </member>
        <member name="F:Sony.NP.ServiceTypes_SDK4_5.Session">
            <summary>Session service</summary>
        </member>
        <member name="F:Sony.NP.ServiceTypes_SDK4_5.ActivityFeed">
            <summary>Activity Feed service</summary>
        </member>
        <member name="F:Sony.NP.ServiceTypes_SDK4_5.SocialMedia">
            <summary>Social Media service</summary>
        </member>
        <member name="F:Sony.NP.ServiceTypes_SDK4_5.SharedMedia">
            <summary>Shared Media service</summary>
        </member>
        <member name="F:Sony.NP.ServiceTypes_SDK4_5.Core">
            <summary>Core service. Used only when a Core request is performed</summary>
        </member>
        <member name="F:Sony.NP.ServiceTypes_SDK4_5.Notification">
            <summary>Notification service. Used to notify when something external to the application happened. Not bound to a request</summary>
        </member>
        <member name="F:Sony.NP.ServiceTypes_SDK4_5.Size">
            <summary>Size of this enum</summary>
        </member>
        <member name="T:Sony.NP.FunctionTypes_SDK4_5">
            <summary>
            Defines the different APIs provided by the NpToolkit2 library.
            It is set automatically when a request object is created, and identifies the function it belongs to.
            </summary>
        </member>
        <member name="F:Sony.NP.FunctionTypes_SDK4_5.Invalid">
            <summary>Non-valid function. It should never be returned (check memset() is not being used in a non-POD object, as a request)</summary>
        </member>
        <member name="F:Sony.NP.FunctionTypes_SDK4_5.ActivityFeedGetSharedVideos">
            <summary>Not implemented</summary>
        </member>
        <member name="F:Sony.NP.FunctionTypes_SDK4_5.ActivityFeedGetPlayedWith">
            <summary>Not implemented</summary>
        </member>
        <member name="F:Sony.NP.FunctionTypes_SDK4_5.ActivityFeedPostPlayedWith">
            <summary>Not implemented</summary>
        </member>
        <member name="F:Sony.NP.FunctionTypes_SDK4_5.ActivityFeedGetWhoLiked">
            <summary>Not implemented</summary>
        </member>
        <member name="F:Sony.NP.FunctionTypes_SDK4_5.ActivityFeedSetLiked">
            <summary>Not implemented</summary>
        </member>
        <member name="F:Sony.NP.FunctionTypes_SDK4_5.ActivityFeedGetFeed">
            <summary>Not implemented</summary>
        </member>
        <member name="F:Sony.NP.FunctionTypes_SDK4_5.ActivityFeedPostInGameStory">
            <summary>Not implemented</summary>
        </member>
        <member name="F:Sony.NP.FunctionTypes_SDK4_5.AuthGetAuthCode">
            <summary>Not implemented</summary>
        </member>
        <member name="F:Sony.NP.FunctionTypes_SDK4_5.AuthGetIdToken">
            <summary>Not implemented</summary>	
        </member>
        <member name="F:Sony.NP.FunctionTypes_SDK4_5.ChallengeConsumeChallenge">
            <summary>Not implemented</summary>
        </member>
        <member name="F:Sony.NP.FunctionTypes_SDK4_5.ChallengeSendChallenge">
            <summary>Not implemented</summary>
        </member>
        <member name="F:Sony.NP.FunctionTypes_SDK4_5.ChallengeGetReceivedChallenges">
            <summary>Not implemented</summary>
        </member>
        <member name="F:Sony.NP.FunctionTypes_SDK4_5.ChallengeGetChallengeData">
            <summary>Not implemented</summary>
        </member>
        <member name="F:Sony.NP.FunctionTypes_SDK4_5.ChallengeGetChallengeThumbnail">
            <summary>Not implemented</summary>
        </member>
        <member name="F:Sony.NP.FunctionTypes_SDK4_5.CommerceGetCategories">
            <summary>Not implemented</summary>
        </member>
        <member name="F:Sony.NP.FunctionTypes_SDK4_5.CommerceGetProducts">
            <summary>Not implemented</summary>
        </member>
        <member name="F:Sony.NP.FunctionTypes_SDK4_5.CommerceGetServiceEntitlements">
            <summary>Not implemented</summary>
        </member>
        <member name="F:Sony.NP.FunctionTypes_SDK4_5.CommerceConsumeServiceEntitlement">
            <summary>Not implemented</summary>
        </member>
        <member name="F:Sony.NP.FunctionTypes_SDK4_5.CommerceDisplayCategoryBrowseDialog">
            <summary>Not implemented</summary>
        </member>
        <member name="F:Sony.NP.FunctionTypes_SDK4_5.CommerceDisplayProductBrowseDialog">
            <summary>Not implemented</summary>
        </member>
        <member name="F:Sony.NP.FunctionTypes_SDK4_5.CommerceDisplayVoucherCodeInputDialog">
            <summary>Not implemented</summary>
        </member>
        <member name="F:Sony.NP.FunctionTypes_SDK4_5.CommerceDisplayCheckoutDialog">
            <summary>Not implemented</summary>
        </member>
        <member name="F:Sony.NP.FunctionTypes_SDK4_5.CommerceDisplayJoinPlusDialog">
            <summary>Not implemented</summary>
        </member>
        <member name="F:Sony.NP.FunctionTypes_SDK4_5.CommerceDisplayDownloadListDialog">
            <summary>Not implemented</summary>
        </member>
        <member name="F:Sony.NP.FunctionTypes_SDK4_5.CommerceSetPsStoreIconDisplayState">
            <summary>Not implemented</summary>
        </member>
        <member name="F:Sony.NP.FunctionTypes_SDK4_5.EventsClientGetEvent">
            <summary>Not implemented</summary>
        </member>
        <member name="F:Sony.NP.FunctionTypes_SDK4_5.FriendsGetFriends">
            <summary>Used by <see cref="M:Sony.NP.Friends.GetFriends(Sony.NP.Friends.GetFriendsRequest,Sony.NP.Friends.FriendsResponse)"/></summary>
        </member>
        <member name="F:Sony.NP.FunctionTypes_SDK4_5.FriendsGetFriendsOfFriends">
            <summary>Used by <see cref="M:Sony.NP.Friends.GetFriendsOfFriends(Sony.NP.Friends.GetFriendsOfFriendsRequest,Sony.NP.Friends.FriendsOfFriendsResponse)"/></summary>
        </member>
        <member name="F:Sony.NP.FunctionTypes_SDK4_5.FriendsGetBlockedUsers">
            <summary>Used by <see cref="M:Sony.NP.Friends.GetBlockedUsers(Sony.NP.Friends.GetBlockedUsersRquest,Sony.NP.Friends.BlockedUsersResponse)"/></summary>
        </member>
        <member name="F:Sony.NP.FunctionTypes_SDK4_5.FriendsDisplayFriendRequestDialog">
            <summary>Used by <see cref="M:Sony.NP.Friends.DisplayFriendRequestDialog(Sony.NP.Friends.DisplayFriendRequestDialogRequest,Sony.NP.Core.EmptyResponse)"/></summary>
        </member>
        <member name="F:Sony.NP.FunctionTypes_SDK4_5.FriendsDisplayBlockUserDialog">
            <summary>Used by <see cref="M:Sony.NP.Friends.DisplayBlockUserDialog(Sony.NP.Friends.DisplayBlockUserDialogRequest,Sony.NP.Core.EmptyResponse)"/></summary>
        </member>
        <member name="F:Sony.NP.FunctionTypes_SDK4_5.MatchingSetInitConfiguration">
            <summary>Not implemented</summary>
        </member>
        <member name="F:Sony.NP.FunctionTypes_SDK4_5.MatchingGetWorlds">
            <summary>Not implemented</summary>
        </member>
        <member name="F:Sony.NP.FunctionTypes_SDK4_5.MatchingCreateRoom">
            <summary>Not implemented</summary>
        </member>
        <member name="F:Sony.NP.FunctionTypes_SDK4_5.MatchingLeaveRoom">
            <summary>Not implemented</summary>
        </member>
        <member name="F:Sony.NP.FunctionTypes_SDK4_5.MatchingSearchRooms">
            <summary>Not implemented</summary>
        </member>
        <member name="F:Sony.NP.FunctionTypes_SDK4_5.MatchingJoinRoom">
            <summary>Not implemented</summary>
        </member>
        <member name="F:Sony.NP.FunctionTypes_SDK4_5.MatchingGetRoomPingTime">
            <summary>Not implemented</summary>
        </member>
        <member name="F:Sony.NP.FunctionTypes_SDK4_5.MatchingKickOutRoomMember">
            <summary>Not implemented</summary>
        </member>
        <member name="F:Sony.NP.FunctionTypes_SDK4_5.MatchingSendRoomMessage">
            <summary>Not implemented</summary>
        </member>
        <member name="F:Sony.NP.FunctionTypes_SDK4_5.MatchingGetAttributes">
            <summary>Not implemented</summary>
        </member>
        <member name="F:Sony.NP.FunctionTypes_SDK4_5.MatchingSetRoomInfo">
            <summary>Not implemented</summary>
        </member>
        <member name="F:Sony.NP.FunctionTypes_SDK4_5.MatchingSendInvitation">
            <summary>Not implemented</summary>
        </member>
        <member name="F:Sony.NP.FunctionTypes_SDK4_5.MatchingGetData">
            <summary>Not implemented</summary>
        </member>
        <member name="F:Sony.NP.FunctionTypes_SDK4_5.MatchingSetMembersAsRecentlyMet">
            <summary>Added In SDK 4.5</summary>
        </member>
        <member name="F:Sony.NP.FunctionTypes_SDK4_5.MessagingSendInGameMessage">
            <summary>Not implemented</summary>
        </member>
        <member name="F:Sony.NP.FunctionTypes_SDK4_5.MessagingSendGameDataMessage">
            <summary>Not implemented</summary>
        </member>
        <member name="F:Sony.NP.FunctionTypes_SDK4_5.MessagingDisplayReceivedGameDataMessagesDialog">
            <summary>Not implemented</summary>
        </member>
        <member name="F:Sony.NP.FunctionTypes_SDK4_5.MessagingGetReceivedGameDataMessages">
            <summary>Not implemented</summary>
        </member>
        <member name="F:Sony.NP.FunctionTypes_SDK4_5.MessagingConsumeGameDataMessage">
            <summary>Not implemented</summary>
        </member>
        <member name="F:Sony.NP.FunctionTypes_SDK4_5.MessagingGetGameDataMessageThumbnail">
            <summary>Not implemented</summary>
        </member>
        <member name="F:Sony.NP.FunctionTypes_SDK4_5.MessagingGetGameDataMessageAttachment">
            <summary>Not implemented</summary>
        </member>
        <member name="F:Sony.NP.FunctionTypes_SDK4_5.NetworkUtilsGetBandwidthInfo">
            <summary>Used by <see cref="M:Sony.NP.NetworkUtils.GetBandwidthInfo(Sony.NP.NetworkUtils.GetBandwidthInfoRequest,Sony.NP.NetworkUtils.BandwidthInfoResponse)"/></summary>
        </member>
        <member name="F:Sony.NP.FunctionTypes_SDK4_5.NetworkUtilsGetBasicNetworkInfo">
            <summary>Used by <see cref="M:Sony.NP.NetworkUtils.GetBasicNetworkInfoInfo(Sony.NP.NetworkUtils.GetBasicNetworkInfoRequest,Sony.NP.NetworkUtils.BasicNetworkInfoResponse)"/></summary>
        </member>
        <member name="F:Sony.NP.FunctionTypes_SDK4_5.NetworkUtilsGetDetailedNetworkInfo">
            <summary>Used by <see cref="M:Sony.NP.NetworkUtils.GetDetailedNetworkInfo(Sony.NP.NetworkUtils.GetDetailedNetworkInfoRequest,Sony.NP.NetworkUtils.DetailedNetworkInfoResponse)"/></summary>
        </member>
        <member name="F:Sony.NP.FunctionTypes_SDK4_5.NpUtilsDisplaySigninDialog">
            <summary>Used by <see cref="M:Sony.NP.NpUtils.DisplaySigninDialog(Sony.NP.NpUtils.DisplaySigninDialogRequest,Sony.NP.Core.EmptyResponse)"/></summary>
        </member>
        <member name="F:Sony.NP.FunctionTypes_SDK4_5.NpUtilsSetTitleIdForDevelopment">
            <summary>Used by <see cref="M:Sony.NP.NpUtils.SetTitleIdForDevelopment(Sony.NP.NpUtils.SetTitleIdForDevelopmentRequest,Sony.NP.Core.EmptyResponse)"/></summary>
        </member>
        <member name="F:Sony.NP.FunctionTypes_SDK4_5.NpUtilsCheckAvailability">
            <summary>Used by <see cref="M:Sony.NP.NpUtils.CheckAvailablity(Sony.NP.NpUtils.CheckAvailablityRequest,Sony.NP.Core.EmptyResponse)"/></summary>
        </member>
        <member name="F:Sony.NP.FunctionTypes_SDK4_5.PresenceSetPresence">
            <summary>Used by <see cref="M:Sony.NP.Presence.SetPresence(Sony.NP.Presence.SetPresenceRequest,Sony.NP.Core.EmptyResponse)"/></summary>
        </member>
        <member name="F:Sony.NP.FunctionTypes_SDK4_5.PresenceGetPresence">
            <summary>Used by <see cref="M:Sony.NP.Presence.GetPresence(Sony.NP.Presence.GetPresenceRequest,Sony.NP.Presence.PresenceResponse)"/></summary>
        </member>
        <member name="F:Sony.NP.FunctionTypes_SDK4_5.PresenceDeletePresence">
            <summary>Used by <see cref="M:Sony.NP.Presence.DeletePresence(Sony.NP.Presence.DeletePresenceRequest,Sony.NP.Core.EmptyResponse)"/></summary>
        </member>
        <member name="F:Sony.NP.FunctionTypes_SDK4_5.RankingSetScore">
            <summary>Not implemented</summary>
        </member>
        <member name="F:Sony.NP.FunctionTypes_SDK4_5.RankingGetRangeOfRanks">
            <summary>Not implemented</summary>
        </member>
        <member name="F:Sony.NP.FunctionTypes_SDK4_5.RankingGetFriendsRanks">
            <summary>Not implemented</summary>
        </member>
        <member name="F:Sony.NP.FunctionTypes_SDK4_5.RankingGetUsersRanks">
            <summary>Not implemented</summary>
        </member>
        <member name="F:Sony.NP.FunctionTypes_SDK4_5.RankingSetGameData">
            <summary>Not implemented</summary>
        </member>
        <member name="F:Sony.NP.FunctionTypes_SDK4_5.RankingGetGameData">
            <summary>Not implemented</summary>
        </member>
        <member name="F:Sony.NP.FunctionTypes_SDK4_5.SessionSendInvitation">
            <summary>Not implemented</summary>
        </member>
        <member name="F:Sony.NP.FunctionTypes_SDK4_5.SessionDisplayReceivedInvitationsDialog">
            <summary>Not implemented</summary>
        </member>
        <member name="F:Sony.NP.FunctionTypes_SDK4_5.SessionGetReceivedInvitations">
            <summary>Not implemented</summary>
        </member>
        <member name="F:Sony.NP.FunctionTypes_SDK4_5.SessionGetInvitationData">
            <summary>Not implemented</summary>
        </member>
        <member name="F:Sony.NP.FunctionTypes_SDK4_5.SessionConsumeInvitation">
            <summary>Not implemented</summary>
        </member>
        <member name="F:Sony.NP.FunctionTypes_SDK4_5.SessionGetData">
            <summary>Not implemented</summary>
        </member>
        <member name="F:Sony.NP.FunctionTypes_SDK4_5.SessionLeave">
            <summary>Not implemented</summary>
        </member>
        <member name="F:Sony.NP.FunctionTypes_SDK4_5.SessionUpdate">
            <summary>Not implemented</summary>
        </member>
        <member name="F:Sony.NP.FunctionTypes_SDK4_5.SessionGetInfo">
            <summary>Not implemented</summary>
        </member>
        <member name="F:Sony.NP.FunctionTypes_SDK4_5.SessionJoin">
            <summary>Not implemented</summary>
        </member>
        <member name="F:Sony.NP.FunctionTypes_SDK4_5.SessionSearch">
            <summary>Not implemented</summary>
        </member>
        <member name="F:Sony.NP.FunctionTypes_SDK4_5.SessionCreate">
            <summary>Not implemented</summary>
        </member>
        <member name="F:Sony.NP.FunctionTypes_SDK4_5.SocialMediaPostMessageToFacebook">
            <summary>Not implemented</summary>
        </member>
        <member name="F:Sony.NP.FunctionTypes_SDK4_5.SharedMediaGetScreenshots">
            <summary>Not implemented</summary>
        </member>
        <member name="F:Sony.NP.FunctionTypes_SDK4_5.SharedMediaGetBroadcasts">
            <summary>Not implemented</summary>
        </member>
        <member name="F:Sony.NP.FunctionTypes_SDK4_5.SharedMediaGetVideos">
            <summary>Not implemented</summary>
        </member>
        <member name="F:Sony.NP.FunctionTypes_SDK4_5.TrophyRegisterTrophyPack">
            <summary>Used by <see cref="M:Sony.NP.Trophies.RegisterTrophyPack(Sony.NP.Trophies.RegisterTrophyPackRequest,Sony.NP.Core.EmptyResponse)"/></summary>
        </member>
        <member name="F:Sony.NP.FunctionTypes_SDK4_5.TrophyUnlock">
            <summary>Used by <see cref="M:Sony.NP.Trophies.UnlockTrophy(Sony.NP.Trophies.UnlockTrophyRequest,Sony.NP.Core.EmptyResponse)"/></summary>
        </member>
        <member name="F:Sony.NP.FunctionTypes_SDK4_5.TrophySetScreenshot">
            <summary>Used by <see cref="M:Sony.NP.Trophies.SetScreenshot(Sony.NP.Trophies.SetScreenshotRequest,Sony.NP.Core.EmptyResponse)"/></summary>
        </member>
        <member name="F:Sony.NP.FunctionTypes_SDK4_5.TrophyGetUnlockedTrophies">
            <summary>Used by <see cref="M:Sony.NP.Trophies.GetUnlockedTrophies(Sony.NP.Trophies.GetUnlockedTrophiesRequest,Sony.NP.Trophies.UnlockedTrophiesResponse)"/></summary>
        </member>
        <member name="F:Sony.NP.FunctionTypes_SDK4_5.TrophyDisplayTrophyListDialog">
            <summary>Used by <see cref="M:Sony.NP.Trophies.DisplayTrophyListDialog(Sony.NP.Trophies.DisplayTrophyListDialogRequest,Sony.NP.Core.EmptyResponse)"/></summary>
        </member>
        <member name="F:Sony.NP.FunctionTypes_SDK4_5.TrophyGetTrophyPackSummary">
            <summary>Used by <see cref="M:Sony.NP.Trophies.GetTrophyPackSummary(Sony.NP.Trophies.GetTrophyPackSummaryRequest,Sony.NP.Trophies.TrophyPackSummaryResponse)"/></summary>
        </member>
        <member name="F:Sony.NP.FunctionTypes_SDK4_5.TrophyGetTrophyPackGroup">
            <summary>Used by <see cref="M:Sony.NP.Trophies.GetTrophyPackGroup(Sony.NP.Trophies.GetTrophyPackGroupRequest,Sony.NP.Trophies.TrophyPackGroupResponse)"/></summary>
        </member>
        <member name="F:Sony.NP.FunctionTypes_SDK4_5.TrophyGetTrophyPackTrophy">
            <summary>Used by <see cref="M:Sony.NP.Trophies.GetTrophyPackTrophy(Sony.NP.Trophies.GetTrophyPackTrophyRequest,Sony.NP.Trophies.TrophyPackTrophyResponse)"/></summary>
        </member>
        <member name="F:Sony.NP.FunctionTypes_SDK4_5.TssGetData">
            <summary>Not implemented</summary>
        </member>
        <member name="F:Sony.NP.FunctionTypes_SDK4_5.TusSetVariables">
            <summary>Not implemented</summary>
        </member>
        <member name="F:Sony.NP.FunctionTypes_SDK4_5.TusGetVariables">
            <summary>Not implemented</summary>
        </member>
        <member name="F:Sony.NP.FunctionTypes_SDK4_5.TusAddToAndGetVariable">
            <summary>Not implemented</summary>
        </member>
        <member name="F:Sony.NP.FunctionTypes_SDK4_5.TusSetData">
            <summary>Not implemented</summary>
        </member>
        <member name="F:Sony.NP.FunctionTypes_SDK4_5.TusGetData">
            <summary>Not implemented</summary>
        </member>
        <member name="F:Sony.NP.FunctionTypes_SDK4_5.TusDeleteData">
            <summary>Not implemented</summary>
        </member>
        <member name="F:Sony.NP.FunctionTypes_SDK4_5.UserProfileGetNpProfiles">
            <summary>Used by <see cref="M:Sony.NP.UserProfiles.GetNpProfiles(Sony.NP.UserProfiles.GetNpProfilesRquest,Sony.NP.UserProfiles.NpProfilesResponse)"/></summary>
        </member>
        <member name="F:Sony.NP.FunctionTypes_SDK4_5.UserProfileGetVerifiedAccountsForTitle">
            <summary>Used by <see cref="M:Sony.NP.UserProfiles.GetVerifiedAccountsForTitle(Sony.NP.UserProfiles.GetVerifiedAccountsForTitleRequest,Sony.NP.UserProfiles.NpProfilesResponse)"/></summary>
        </member>
        <member name="F:Sony.NP.FunctionTypes_SDK4_5.UserProfileDisplayUserProfileDialog">
            <summary>Used by <see cref="M:Sony.NP.UserProfiles.DisplayUserProfileDialog(Sony.NP.UserProfiles.DisplayUserProfileDialogRequest,Sony.NP.Core.EmptyResponse)"/></summary>
        </member>
        <member name="F:Sony.NP.FunctionTypes_SDK4_5.UserProfileDisplayGriefReportingDialog">
            <summary>Used by <see cref="M:Sony.NP.UserProfiles.DisplayGriefReportingDialog(Sony.NP.UserProfiles.DisplayGriefReportingDialogRequest,Sony.NP.Core.EmptyResponse)"/></summary>
        </member>
        <member name="F:Sony.NP.FunctionTypes_SDK4_5.WordfilterFilterComment">
            <summary>Not implemented</summary>
        </member>
        <member name="F:Sony.NP.FunctionTypes_SDK4_5.CoreTerminateService">
            <summary>Not implemented</summary>
        </member>
        <member name="F:Sony.NP.FunctionTypes_SDK4_5.NotificationRefreshRoom">
            <summary>Not implemented</summary>
        </member>
        <member name="F:Sony.NP.FunctionTypes_SDK4_5.NotificationNewRoomMessage">
            <summary>Not implemented</summary>
        </member>
        <member name="F:Sony.NP.FunctionTypes_SDK4_5.NotificationDialogOpened">
            <summary>The Response in the callback is <see cref="T:Sony.NP.Core.EmptyResponse"/></summary>
        </member>
        <member name="F:Sony.NP.FunctionTypes_SDK4_5.NotificationDialogClosed">
            <summary>The Response in the callback is <see cref="T:Sony.NP.Core.EmptyResponse"/></summary>
        </member>
        <member name="F:Sony.NP.FunctionTypes_SDK4_5.NotificationUserStateChange">
            <summary>The Response in the callback is <see cref="T:Sony.NP.NpUtils.UserStateChangeResponse"/></summary>
        </member>
        <member name="F:Sony.NP.FunctionTypes_SDK4_5.NotificationNetStateChange">
            <summary>The Response in the callback is <see cref="T:Sony.NP.NetworkUtils.NetStateChangeResponse"/></summary>
        </member>
        <member name="F:Sony.NP.FunctionTypes_SDK4_5.NotificationNewInGameMessage">
            <summary>Not implemented</summary> // Moved here in SDK 4.5
        </member>
        <member name="F:Sony.NP.FunctionTypes_SDK4_5.NotificationUpdateFriendsList">
            <summary>The Response in the callback is <see cref="T:Sony.NP.Friends.FriendListUpdateResponse"/></summary>
        </member>
        <member name="F:Sony.NP.FunctionTypes_SDK4_5.NotificationNewInvitation">
            <summary>Not implemented</summary>
        </member>
        <member name="F:Sony.NP.FunctionTypes_SDK4_5.NotificationNewGameDataMessage">
            <summary>Not implemented</summary>
        </member>
        <member name="F:Sony.NP.FunctionTypes_SDK4_5.NotificationUpdateFriendPresence">
            <summary>The Response in the callback is <see cref="T:Sony.NP.Presence.PresenceUpdateResponse"/></summary>
        </member>
        <member name="F:Sony.NP.FunctionTypes_SDK4_5.NotificationUpdateBlockedUsersList">
            <summary>The Response in the callback is <see cref="T:Sony.NP.Friends.BlocklistUpdateResponse"/></summary>
        </member>
        <member name="F:Sony.NP.FunctionTypes_SDK4_5.NotificationAborted">
            <summary>The Response in the callback is <see cref="T:Sony.NP.Core.EmptyResponse"/></summary>
        </member>
        <member name="F:Sony.NP.FunctionTypes_SDK4_5.NumFunctionTypes">
            <summary>The number of function types</summary>	
        </member>
        <member name="F:Sony.NP.FunctionTypes_SDK4_5.NotificationSessionInvitationEvent">
            <summary></summary>	
        </member>
        <member name="F:Sony.NP.FunctionTypes_SDK4_5.NotificationPlayTogetherHostEvent">
            <summary></summary>	
        </member>
        <member name="F:Sony.NP.FunctionTypes_SDK4_5.NotificationGameCustomDataEvent">
            <summary></summary>	
        </member>
        <member name="F:Sony.NP.FunctionTypes_SDK4_5.NpUtilsCheckPlus">
            <summary></summary>	
        </member>
        <member name="F:Sony.NP.FunctionTypes_SDK4_5.NpUtilsGetParentalControlInfo">
            <summary></summary>	
        </member>
        <member name="T:Sony.NP.Core">
            <summary>
            Core NpToolkit classes and structures.
            </summary>
        </member>
        <member name="M:Sony.NP.Core.TerminateService(Sony.NP.Core.TerminateServiceRequest,Sony.NP.Core.EmptyResponse)">
            <summary>
            Terminates a ToolkitNp2 library service.
            </summary>
            <param name="request"> The parameter specifying the service to be terminated.  </param>
            <param name="response"> This response does not have data, only return code</param>
            <returns>If the operation is asynchronous, the function provides the request Id.</returns>
            <exception cref="T:Sony.NP.NpToolkitException">Will throw an exception either when the request data is invalid, or an internal error has occured inside the NpToolkit plug-in.</exception>
        </member>
        <member name="M:Sony.NP.Core.ConvertSceErrorToString(System.Int32)">
            <summary>
            Generate a string containing the Hex return code and if known the Return code name
            taken from the Core.ReturnCodes enum.
            As some of the enums share the same code the returned string might be incorrect.
            If conversion of a return code from a response object is required use the <see cref="M:Sony.NP.ResponseBase.ConvertReturnCodeToString(Sony.NP.FunctionTypes)"/> instead as this can qualify the return code depending on the API called.
            </summary>
            <param name="errorCode">The error code to convert.</param>
            <returns>The constructed string with the Hex and return code name.</returns>
            <remarks>
            By default apiCalled will be FunctionType.invalid. This will return the first Core.ReturnCodes enum that matches the return code value so may produce an incorrect string. 
            </remarks>
        </member>
        <member name="T:Sony.NP.Core.TerminateServiceRequest">
            <summary>
            Represents the parameters passed when terminating a service of the library.
            </summary>
        </member>
        <member name="M:Sony.NP.Core.TerminateServiceRequest.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Sony.NP.Core.TerminateServiceRequest"/> class.
            </summary>
        </member>
        <member name="P:Sony.NP.Core.TerminateServiceRequest.Service">
            <summary>
            The service to be terminated.
            </summary>
        </member>
        <member name="T:Sony.NP.Core.OptionalBoolean">
            <summary>
             Representation of a boolean with an extra state to identify a value has not been provided.
            </summary>
        </member>
        <member name="F:Sony.NP.Core.OptionalBoolean.notSet">
            <summary> Not set </summary>
        </member>
        <member name="F:Sony.NP.Core.OptionalBoolean.setTrue">
            <summary> True </summary>	
        </member>
        <member name="F:Sony.NP.Core.OptionalBoolean.setFalse">
            <summary> False </summary>			
        </member>
        <member name="T:Sony.NP.Core.PlatformType">
            <summary>
            The type of hardware platform
            </summary>
        </member>
        <member name="F:Sony.NP.Core.PlatformType.none">
            <summary> No platform specified. It should not be set</summary>
        </member>
        <member name="F:Sony.NP.Core.PlatformType.ps3">
            <summary> PS3 platform</summary>	
        </member>
        <member name="F:Sony.NP.Core.PlatformType.psVita">
            <summary> PS Vita platform</summary>			
        </member>
        <member name="F:Sony.NP.Core.PlatformType.ps4">
            <summary> PS4 platform</summary>		
        </member>
        <member name="T:Sony.NP.Core.OnlineStatus">
            <summary>
            The online status of a user
            </summary>
        </member>
        <member name="F:Sony.NP.Core.OnlineStatus.notRequested">
            <summary> The online status was not requested. It should never be returned</summary>
        </member>
        <member name="F:Sony.NP.Core.OnlineStatus.online">
            <summary> The user is online on that platform</summary>
        </member>
        <member name="F:Sony.NP.Core.OnlineStatus.standBy">
            <summary> The user is on stand by mode on that platform (usually PS Vita)</summary>
        </member>
        <member name="F:Sony.NP.Core.OnlineStatus.offline">
            <summary> The user is offline on that platform. Also returned when the user has never signed in on that platform</summary>
        </member>
        <member name="T:Sony.NP.Core.ReturnCodes">
            <exclude/>
        </member>
        <member name="F:Sony.NP.Core.ReturnCodes.SUCCESS">
            <summary></summary>
        </member>
        <member name="F:Sony.NP.Core.ReturnCodes.DIALOG_RESULT_OK">
            <summary></summary>
        </member>
        <member name="F:Sony.NP.Core.ReturnCodes.DIALOG_RESULT_USER_CANCELED">
            <summary></summary>
        </member>
        <member name="F:Sony.NP.Core.ReturnCodes.DIALOG_RESULT_USER_PURCHASED">
            <summary></summary>
        </member>
        <member name="F:Sony.NP.Core.ReturnCodes.DIALOG_RESULT_ALREADY_SIGNED_IN">
            <summary></summary>
        </member>
        <member name="F:Sony.NP.Core.ReturnCodes.DIALOG_RESULT_NOT_SIGNED_IN">
            <summary></summary>
        </member>
        <member name="F:Sony.NP.Core.ReturnCodes.DIALOG_RESULT_ABORTED">
            <summary></summary>
        </member>
        <member name="F:Sony.NP.Core.ReturnCodes.TROPHY_PLATINUM_UNLOCKED">
            <summary></summary>
        </member>
        <member name="F:Sony.NP.Core.ReturnCodes.MATCHING_CREATE_SYSTEM_SESSION_FAILED">
            <summary></summary>
        </member>
        <member name="F:Sony.NP.Core.ReturnCodes.MATCHING_JOIN_SYSTEM_SESSION_FAILED">
            <summary></summary>
        </member>
        <member name="F:Sony.NP.Core.ReturnCodes.MATCHING_UPDATE_SYSTEM_SESSION_FAILED">
            <summary></summary>
        </member>
        <member name="F:Sony.NP.Core.ReturnCodes.MATCHING_UPDATE_EXTERNAL_NOTIFICATION_FAILED">
            <summary></summary>
        </member>
        <member name="F:Sony.NP.Core.ReturnCodes.ERROR_FAILED_TO_ALLOCATE">
            <summary></summary>
        </member>
        <member name="F:Sony.NP.Core.ReturnCodes.ERROR_TOO_MANY_REQUESTS">
            <summary></summary>
        </member>
        <member name="F:Sony.NP.Core.ReturnCodes.ERROR_LOCKED_RESPONSE">
            <summary></summary>
        </member>
        <member name="F:Sony.NP.Core.ReturnCodes.ERROR_ALREADY_INITIALIZED">
            <summary></summary>
        </member>
        <member name="F:Sony.NP.Core.ReturnCodes.ERROR_NOT_INITIALIZED">
            <summary></summary>
        </member>
        <member name="F:Sony.NP.Core.ReturnCodes.ERROR_INCORRECT_ARGUMENTS">
            <summary></summary>
        </member>
        <member name="F:Sony.NP.Core.ReturnCodes.ERROR_MODIFICATION_NOT_ALLOWED">
            <summary></summary>
        </member>
        <member name="F:Sony.NP.Core.ReturnCodes.ERROR_MAX_USERS_REACHED">
            <summary></summary>
        </member>
        <member name="F:Sony.NP.Core.ReturnCodes.ERROR_INVALID_IMAGE">
            <summary></summary>
        </member>
        <member name="F:Sony.NP.Core.ReturnCodes.ERROR_MEM_POOLS_INCORRECT">
            <summary></summary>
        </member>
        <member name="F:Sony.NP.Core.ReturnCodes.ERROR_EXT_ALLOCATOR_INCORRECT">
            <summary></summary>
        </member>
        <member name="F:Sony.NP.Core.ReturnCodes.ERROR_MAX_NUM_CALLBACKS_REACHED">
            <summary></summary>
        </member>
        <member name="F:Sony.NP.Core.ReturnCodes.ERROR_CALLBACK_NOT_REGISTERED">
            <summary></summary>
        </member>
        <member name="F:Sony.NP.Core.ReturnCodes.ERROR_TROPHY_HOME_DIRECTORY_NOT_CONFIGURED">
            <summary></summary>
        </member>
        <member name="F:Sony.NP.Core.ReturnCodes.ERROR_MATCHING_ROOM_DESTROYED">
            <summary></summary>
        </member>
        <member name="F:Sony.NP.Core.ReturnCodes.ERROR_MATCHING_INVALID_ATTRIBUTE_SCOPE">
            <summary></summary>
        </member>
        <member name="F:Sony.NP.Core.ReturnCodes.ERROR_MATCHING_INVALID_ATTRIBUTE_TYP">
            <summary></summary>
        </member>
        <member name="F:Sony.NP.Core.ReturnCodes.ERROR_MATCHING_INVALID_ROOM_ATTRIBUTE_VISIBILITY">
            <summary></summary>
        </member>
        <member name="F:Sony.NP.Core.ReturnCodes.ERROR_MATCHING_SUM_OF_MEMBER_ATTRIBUTES_SIZES_IS_MORE_THAN_64">
            <summary></summary>
        </member>
        <member name="F:Sony.NP.Core.ReturnCodes.ERROR_MATCHING_MORE_THAN_1_BINARY_SEARCH_ATTRIBUTE_PROVIDED">
            <summary></summary>
        </member>
        <member name="F:Sony.NP.Core.ReturnCodes.ERROR_MATCHING_SEARCH_BINARY_ATTRIBUTE_SIZE_IS_MORE_THAN_64">
            <summary></summary>
        </member>
        <member name="F:Sony.NP.Core.ReturnCodes.ERROR_MATCHING_MORE_THAN_8_INTEGER_SEARCH_ATTRIBUTES_PROVIDED">
            <summary></summary>
        </member>
        <member name="F:Sony.NP.Core.ReturnCodes.ERROR_MATCHING_SUM_OF_EXTERNAL_ROOM_ATTRIBUTES_SIZES_IS_MORE_THAN_512">
            <summary></summary>
        </member>
        <member name="F:Sony.NP.Core.ReturnCodes.ERROR_MATCHING_SUM_OF_INTERNAL_ROOM_ATTRIBUTES_SIZES_IS_MORE_THAN_512">
            <summary></summary>
        </member>
        <member name="F:Sony.NP.Core.ReturnCodes.ERROR_MATCHING_NAMES_OF_ATTRIBUTES_MUST_BE_UNIQUE">
            <summary></summary>
        </member>
        <member name="F:Sony.NP.Core.ReturnCodes.ERROR_MATCHING_INTERNAL_ATTRIBUTES_DONT_FIT_IN_256_ARRAYS">
            <summary></summary>
        </member>
        <member name="F:Sony.NP.Core.ReturnCodes.ERROR_MATCHING_EXTERNAL_ATTRIBUTES_DONT_FIT_IN_256_ARRAYS">
            <summary></summary>
        </member>
        <member name="F:Sony.NP.Core.ReturnCodes.ERROR_MATCHING_BIN_ATTRIBUTE_CANNOT_BE_SIZE_0">
            <summary></summary>
        </member>
        <member name="F:Sony.NP.Core.ReturnCodes.ERROR_MATCHING_INIT_CONFIGURATION_ALREADY_SET">
            <summary></summary>
        </member>
        <member name="F:Sony.NP.Core.ReturnCodes.ERROR_MATCHING_INIT_CONFIGURATION_NOT_SET">
            <summary></summary>
        </member>
        <member name="F:Sony.NP.Core.ReturnCodes.ERROR_MATCHING_USER_IS_ALREADY_IN_A_ROOM">
            <summary></summary>
        </member>
        <member name="F:Sony.NP.Core.ReturnCodes.ERROR_MATCHING_USER_IS_NOT_IN_A_ROOM">
            <summary></summary>
        </member>
        <member name="F:Sony.NP.Core.ReturnCodes.ERROR_MATCHING_NO_SESSION_BOUND_TO_ROOM">
            <summary></summary>
        </member>
        <member name="F:Sony.NP.Core.ReturnCodes.ERROR_MATCHING_INVALID_WORLD_NUMBER">
            <summary></summary>
        </member>
        <member name="F:Sony.NP.Core.ReturnCodes.ERROR_MATCHING_ATTRIBUTE_IS_NOT_SEARCHABLE_TYPE">
            <summary></summary>
        </member>
        <member name="F:Sony.NP.Core.ReturnCodes.ERROR_MATCHING_INVALID_ATTRIBUTE">
            <summary>An error occurred because the attribute was invalid. see SCE_TOOLKIT_NP_V2_ERROR_MATCHING_INVALID_ATTRIBUTE</summary>
        </member>
        <member name="F:Sony.NP.Core.ReturnCodes.ERROR_MATCHING_INVALID_MEMBER_ID">
            <summary></summary>
        </member>
        <member name="F:Sony.NP.Core.ReturnCodes.NP_ERROR_INVALID_ARGUMENT">
            <summary> Argument is invalid</summary>
        </member>
        <member name="F:Sony.NP.Core.ReturnCodes.NP_ERROR_UNKNOWN_PLATFORM_TYPE">
            <summary> Undefined platform</summary>
        </member>
        <member name="F:Sony.NP.Core.ReturnCodes.NP_ERROR_OUT_OF_MEMORY">
            <summary> Insufficient memory</summary>
        </member>
        <member name="F:Sony.NP.Core.ReturnCodes.NP_ERROR_SIGNED_OUT">
            <summary> The specified user was signed out</summary>
        </member>
        <member name="F:Sony.NP.Core.ReturnCodes.NP_ERROR_USER_NOT_FOUND">
            <summary> The specified user was not found</summary>
        </member>
        <member name="F:Sony.NP.Core.ReturnCodes.NP_ERROR_CALLBACK_ALREADY_REGISTERED">
            <summary> Callback function is already registered</summary>
        </member>
        <member name="F:Sony.NP.Core.ReturnCodes.NP_ERROR_CALLBACK_NOT_REGISTERED">
            <summary> Callback function is not registered</summary>
        </member>
        <member name="F:Sony.NP.Core.ReturnCodes.NP_ERROR_NOT_SIGNED_UP">
            <summary> Called in a non-signed up state</summary>
        </member>
        <member name="F:Sony.NP.Core.ReturnCodes.NP_ERROR_AGE_RESTRICTION">
            <summary> Applicable to the viewer age restriction</summary>
        </member>
        <member name="F:Sony.NP.Core.ReturnCodes.NP_ERROR_LOGOUT">
            <summary> Called in a logged out state</summary>
        </member>
        <member name="F:Sony.NP.Core.ReturnCodes.NP_ERROR_LATEST_SYSTEM_SOFTWARE_EXIST">
            <summary> A new version of the system software update file exists</summary>
        </member>
        <member name="F:Sony.NP.Core.ReturnCodes.NP_ERROR_LATEST_SYSTEM_SOFTWARE_EXIST_FOR_TITLE">
            <summary> A required new version of the system software update file exists for this application</summary>
        </member>
        <member name="F:Sony.NP.Core.ReturnCodes.NP_ERROR_LATEST_PATCH_PKG_EXIST">
            <summary> A new version of the patch package exists. The user has to update before he can play multiplayer games.</summary>
        </member>
        <member name="F:Sony.NP.Core.ReturnCodes.NP_ERROR_LATEST_PATCH_PKG_DOWNLOADED">
            <summary> A new version of the downloaded patch package exists</summary>
        </member>
        <member name="F:Sony.NP.Core.ReturnCodes.NP_ERROR_INVALID_SIZE">
            <summary> Structure size specified for the size member in the structure is invalid</summary>
        </member>
        <member name="F:Sony.NP.Core.ReturnCodes.NP_ERROR_ABORTED">
            <summary> Processing was aborted</summary>
        </member>
        <member name="F:Sony.NP.Core.ReturnCodes.NP_ERROR_REQUEST_MAX">
            <summary> Requests exceeding the maximum number were generated at the same time</summary>
        </member>
        <member name="F:Sony.NP.Core.ReturnCodes.NP_ERROR_REQUEST_NOT_FOUND">
            <summary> Specified request does not exist</summary>
        </member>
        <member name="F:Sony.NP.Core.ReturnCodes.NP_ERROR_INVALID_ID">
            <summary> Specified ID is invalid</summary>
        </member>
        <member name="F:Sony.NP.Core.ReturnCodes.NP_ERROR_PATCH_NOT_CHECKED">
            <summary> Patch was not checked</summary>
        </member>
        <member name="F:Sony.NP.Core.ReturnCodes.NP_ERROR_TIMEOUT">
            <summary> Timed out</summary>
        </member>
        <member name="F:Sony.NP.Core.ReturnCodes.NP_UTIL_ERROR_INVALID_NP_ID">
            <summary> Specified NP ID is invalid</summary>
        </member>
        <member name="F:Sony.NP.Core.ReturnCodes.NP_UTIL_ERROR_NOT_MATCH">
            <summary> The two IDs that were compared were different values</summary>
        </member>
        <member name="F:Sony.NP.Core.ReturnCodes.NP_WEBAPI_ERROR_LIB_CONTEXT_NOT_FOUND">
            <summary></summary>
        </member>
        <member name="F:Sony.NP.Core.ReturnCodes.NP_TROPHY_ERROR_INVALID_ARGUMENT">
            <summary></summary>
        </member>
        <member name="F:Sony.NP.Core.ReturnCodes.NP_TROPHY_ERROR_ALREADY_REGISTERED">
            <summary></summary>
        </member>
        <member name="F:Sony.NP.Core.ReturnCodes.NP_TROPHY_ERROR_INVALID_GROUP_ID">
            <summary></summary>
        </member>
        <member name="F:Sony.NP.Core.ReturnCodes.NP_TROPHY_ERROR_TROPHY_ALREADY_UNLOCKED">
            <summary></summary>
        </member>
        <member name="F:Sony.NP.Core.ReturnCodes.NP_TROPHY_ERROR_NOT_REGISTERED">
            <summary></summary>
        </member>
        <member name="F:Sony.NP.Core.ReturnCodes.NP_TROPHY_ERROR_TROPHY_NOT_UNLOCKED">
            <summary></summary>
        </member>
        <member name="F:Sony.NP.Core.ReturnCodes.TOOLKIT_NP_V2_ERROR_INCORRECT_ARGUMENTS">
            <summary></summary>
        </member>
        <member name="F:Sony.NP.Core.ReturnCodes.NET_ERROR_RESOLVER_ENODNS">
            <summary></summary>
        </member>
        <member name="F:Sony.NP.Core.ReturnCodes.NET_CTL_ERROR_NOT_CONNECTED">
            <summary></summary>
        </member>
        <member name="F:Sony.NP.Core.ReturnCodes.NET_CTL_ERROR_NOT_AVAIL">
            <summary></summary>
        </member>
        <member name="F:Sony.NP.Core.ReturnCodes.NP_COMMUNITY_SERVER_ERROR_NOT_BEST_SCORE">
            <summary></summary>
        </member>
        <member name="F:Sony.NP.Core.ReturnCodes.NP_COMMUNITY_SERVER_ERROR_INVALID_SCORE">
            <summary></summary>
        </member>
        <member name="F:Sony.NP.Core.ReturnCodes.NP_COMMUNITY_SERVER_ERROR_GAME_DATA_ALREADY_EXISTS">
            <summary></summary>
        </member>
        <member name="F:Sony.NP.Core.ReturnCodes.NP_COMMUNITY_SERVER_ERROR_RANKING_GAME_DATA_MASTER_NOT_FOUND">
            <summary></summary>
        </member>
        <member name="F:Sony.NP.Core.ReturnCodes.NP_MATCHING2_ERROR_CONTEXT_NOT_STARTED">
            <summary></summary>
        </member>
        <member name="F:Sony.NP.Core.ReturnCodes.NP_COMMUNITY_SERVER_ERROR_FORBIDDEN">
            <summary></summary>
        </member>
        <member name="T:Sony.NP.Core.UserServiceUserId">
            <summary>
            UserServiceUserId provides a 32bit id for a local console User.
            </summary>
        </member>
        <member name="F:Sony.NP.Core.UserServiceUserId.UserIdInvalid">
            <summary>
            Invalid user id
            </summary>
        </member>
        <member name="M:Sony.NP.Core.UserServiceUserId.ToString">
            <summary>
            Return Hex string of id.
            </summary>
            <returns>10 character HEX string in format 0xFFFFFFFF</returns>
        </member>
        <member name="M:Sony.NP.Core.UserServiceUserId.op_Implicit(System.Int32)~Sony.NP.Core.UserServiceUserId">
            <summary>
            Allow direct assignment of Int32
            </summary>
            <param name="value">32bit local console id</param>
        </member>
        <member name="P:Sony.NP.Core.UserServiceUserId.Id">
            <summary>
            The 32bit local console id
            </summary>
        </member>
        <member name="T:Sony.NP.Core.NpAccountId">
            <summary>
            NpAccountId provides a 64bit unique id for a PSN User.
            </summary>
        </member>
        <member name="M:Sony.NP.Core.NpAccountId.ToString">
            <summary>
            Return Hex string of id.
            </summary>
            <returns>20 character HEX string in format 0xFFFFFFFFFFFFFFFF</returns>
        </member>
        <member name="M:Sony.NP.Core.NpAccountId.op_Implicit(System.UInt64)~Sony.NP.Core.NpAccountId">
            <summary>
            Allow direct assignment of UInt64
            </summary>
            <param name="value">64bit unique id</param>
        </member>
        <member name="M:Sony.NP.Core.NpAccountId.op_Equality(Sony.NP.Core.NpAccountId,Sony.NP.Core.NpAccountId)">
            <summary>
            The equality operator (==) returns true if the values of its operands are equal, false otherwise
            </summary>
            <param name="a">Operand A</param>
            <param name="b">Operand B</param>
            <returns>True if equal.</returns>
        </member>
        <member name="M:Sony.NP.Core.NpAccountId.op_Inequality(Sony.NP.Core.NpAccountId,Sony.NP.Core.NpAccountId)">
            <summary>
            The inequality operator (==) returns false if the values of its operands are equal, true otherwise
            </summary>
            <param name="a">Operand A</param>
            <param name="b">Operand B</param>
            <returns>True if not equal.</returns>
        </member>
        <member name="M:Sony.NP.Core.NpAccountId.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns>true if the specified object is equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:Sony.NP.Core.NpAccountId.GetHashCode">
            <summary>
            Returns the hash code for Account id 
            </summary>
            <returns>A 32-bit signed integer hash code.</returns>
        </member>
        <member name="P:Sony.NP.Core.NpAccountId.Id">
            <summary>
            The 64bit local console id
            </summary>
        </member>
        <member name="T:Sony.NP.Core.NpId">
            <summary>
            This structure represents the NP ID to be used by the Np library to identify a user. It internally holds the Online ID.
            </summary>
        </member>
        <member name="M:Sony.NP.Core.NpId.ToString">
            <summary>
            Returns the id as a string, with a maximum of 16 characters.
            </summary>
            <returns>The OnLineId name</returns>
        </member>
        <member name="P:Sony.NP.Core.NpId.Handle">
            <summary>
            The 16 character PSN Id
            </summary>
        </member>
        <member name="P:Sony.NP.Core.NpId.Opt">
            <summary>
            Option data
            </summary>
        </member>
        <member name="T:Sony.NP.Core.OnlineID">
            <summary>
            16 character PSN Id
            </summary>
        </member>
        <member name="F:Sony.NP.Core.OnlineID.SCE_NP_ONLINEID_MAX_LENGTH">
            <summary>
            Maximum length of the online id
            </summary>
        </member>
        <member name="M:Sony.NP.Core.OnlineID.#ctor">
            <summary>
            Create an empty/blank online id
            </summary>
        </member>
        <member name="M:Sony.NP.Core.OnlineID.ToString">
            <summary>
            Returns the OnlineId as a string, with a maximum of 16 characters.
            </summary>
            <returns>The OnLineId name</returns>
        </member>
        <member name="M:Sony.NP.Core.OnlineID.op_Equality(Sony.NP.Core.OnlineID,Sony.NP.Core.OnlineID)">
            <summary>
            The equality operator (==) returns true if the values of its operands are equal, false otherwise
            </summary>
            <param name="a">Operand A</param>
            <param name="b">Operand B</param>
            <returns>True if equal.</returns>
        </member>
        <member name="M:Sony.NP.Core.OnlineID.op_Inequality(Sony.NP.Core.OnlineID,Sony.NP.Core.OnlineID)">
            <summary>
            The inequality operator (==) returns false if the values of its operands are equal, true otherwise
            </summary>
            <param name="a">Operand A</param>
            <param name="b">Operand B</param>
            <returns>True if not equal.</returns>
        </member>
        <member name="M:Sony.NP.Core.OnlineID.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns>true if the specified object is equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:Sony.NP.Core.OnlineID.GetHashCode">
            <summary>
            Returns the hash code for Account id 
            </summary>
            <returns>A 32-bit signed integer hash code.</returns>
        </member>
        <member name="P:Sony.NP.Core.OnlineID.Name">
            <summary>
            Display representation of an online user
            </summary>
        </member>
        <member name="T:Sony.NP.Core.OnlineUser">
            <summary>
            Online user contain both the 64bit account id and online user id
            </summary>
        </member>
        <member name="M:Sony.NP.Core.OnlineUser.#ctor">
            <summary>
            Initialise an empty OnlineUser
            </summary>
        </member>
        <member name="M:Sony.NP.Core.OnlineUser.ToString">
            <summary>
            Returns a combination of the AccountId and OnlineId.
            </summary>
            <returns>A concatenation of the AccountId and OnLineId.</returns>
        </member>
        <member name="P:Sony.NP.Core.OnlineUser.AccountId">
            <summary>
            Primary key of an online user
            </summary>
        </member>
        <member name="P:Sony.NP.Core.OnlineUser.OnlineID">
            <summary>
            Display representation of an online user
            </summary>
        </member>
        <member name="T:Sony.NP.Core.CountryCode">
            <summary>
            2 character country code.
            </summary>
        </member>
        <member name="F:Sony.NP.Core.CountryCode.SCE_NP_COUNTRY_CODE_LENGTH">
            <summary>
            Maximum length of a country code
            </summary>
        </member>
        <member name="M:Sony.NP.Core.CountryCode.#ctor">
            <summary>
            Create an empty country code
            </summary>
        </member>
        <member name="M:Sony.NP.Core.CountryCode.#ctor(System.String)">
            <summary>
            Initialise a country code.
            </summary>
            <param name="countryCode">The country code.</param>
        </member>
        <member name="M:Sony.NP.Core.CountryCode.ToString">
            <summary>
            The 2 character country code.
            </summary>
            <returns>The country code</returns>
        </member>
        <member name="M:Sony.NP.Core.CountryCode.op_Implicit(System.String)~Sony.NP.Core.CountryCode">
            <summary>
            Initialise a country code when a string is assigned to it.
            </summary>
            <param name="countryCode">The country code</param>
            <returns>A new country code instance</returns>
        </member>
        <member name="P:Sony.NP.Core.CountryCode.Code">
            <summary>
            A 2 character country code.
            </summary>
            <exception cref="T:Sony.NP.NpToolkitException">Will throw an exception if the length of the string is longer than <see cref="F:Sony.NP.Core.CountryCode.SCE_NP_COUNTRY_CODE_LENGTH"/></exception>
        </member>
        <member name="T:Sony.NP.Core.LanguageCode">
            <summary>
            5 character language code.
            </summary>
        </member>
        <member name="F:Sony.NP.Core.LanguageCode.SCE_NP_LANGUAGE_CODE_MAX_LEN">
            <summary>
            Maximum length of a language code
            </summary>
        </member>
        <member name="M:Sony.NP.Core.LanguageCode.#ctor">
            <summary>
            Initialise an empty language code
            </summary>
        </member>
        <member name="M:Sony.NP.Core.LanguageCode.ToString">
            <summary>
            The 5 character country code.
            </summary>
            <returns>The language code</returns>
        </member>
        <member name="M:Sony.NP.Core.LanguageCode.op_Implicit(System.String)~Sony.NP.Core.LanguageCode">
            <summary>
            Initialise a language code when a string is assigned to it.
            </summary>
            <param name="languageCode">The language code</param>
            <returns>A new language code instance</returns>
        </member>
        <member name="P:Sony.NP.Core.LanguageCode.Code">
            <summary>
            A 5 character language code
            </summary>
            <exception cref="T:Sony.NP.NpToolkitException">Will throw an exception if the length of the string is longer than <see cref="F:Sony.NP.Core.LanguageCode.SCE_NP_LANGUAGE_CODE_MAX_LEN"/></exception>
        </member>
        <member name="T:Sony.NP.Core.TitleId">
            <summary>
            A 12 character Np Title Id 
            </summary>
        </member>
        <member name="F:Sony.NP.Core.TitleId.SCE_NP_TITLE_ID_LEN">
            <summary>
            Maximum length of the title id
            </summary>
        </member>
        <member name="M:Sony.NP.Core.TitleId.#ctor">
            <summary>
            Initialise a blank title id
            </summary>
        </member>
        <member name="M:Sony.NP.Core.TitleId.ToString">
            <summary>
            A 12 character Np Title Id 
            </summary>
            <returns>the Np Title Id</returns>
        </member>
        <member name="P:Sony.NP.Core.TitleId.Id">
            <summary>
            A 12 character Np title id 
            </summary>
        </member>
        <member name="T:Sony.NP.Core.EmptyResponse">
            <summary>
            Representation of empty data of a ResponseBase class
            This still provides basic data that will indicate errors or return codes
            </summary>
        </member>
        <member name="M:Sony.NP.Core.EmptyResponse.ReadResult(System.UInt32,Sony.NP.FunctionTypes,Sony.NP.RequestBase)">
            <summary>
            Read the response data from the plug-in
            </summary>
            <param name="id">The request id.</param>
            <param name="apiCalled">The API called.</param>
            <param name="request">The Request instance.</param>
        </member>
        <member name="T:Sony.NP.Icon">
            <summary>
            PNG image store in bytes from NpToolkit
            </summary>
        </member>
        <member name="P:Sony.NP.Icon.RawBytes">
            <summary>
            Get the RawBytes from the Icon. These can be used to create a new Texture2d for example.
            </summary>
        </member>
        <member name="P:Sony.NP.Icon.Width">
            <summary>
            Width in pixels of the icon.
            </summary>
        </member>
        <member name="P:Sony.NP.Icon.Height">
            <summary>
            Height in pixels of the icon.
            </summary>
        </member>
        <member name="T:Sony.NP.APIResultTypes">
            <summary>
            API Results types returned from PRX calls contain details if the API call was successful,
            or if a warning or error was generated.
            </summary>
        </member>
        <member name="F:Sony.NP.APIResultTypes.Success">
            <summary>Result was successful</summary>
        </member>
        <member name="F:Sony.NP.APIResultTypes.Warning">
            <summary>A warning has occured.</summary>
        </member>
        <member name="F:Sony.NP.APIResultTypes.Error">
            <summary>An error had occured.</summary>
        </member>
        <member name="T:Sony.NP.APIResult">
            <summary>
            The structure even containing a successful API call or if it was a warning/error the details
            about the error.
            
            This is also used to fill out the NpToolkitException class when throwing an exception
            </summary>
        </member>
        <member name="T:Sony.NP.NpToolkitException">
            <summary>
            Creates an exception to throw back to the Unity project.
            This can be created in the normal way or via a APIResult structure that has
            been returned from the Native plug-in
            </summary>
        </member>
        <member name="M:Sony.NP.NpToolkitException.#ctor">
            <summary>
            Empty Exception
            </summary>
        </member>
        <member name="M:Sony.NP.NpToolkitException.#ctor(System.String)">
            <summary>
            Message only exception
            </summary>
            <param name="message">Message string</param>
        </member>
        <member name="M:Sony.NP.NpToolkitException.#ctor(System.String,System.Exception)">
            <summary>
            Message plus inner exception
            </summary>
            <param name="message">Message string</param>
            <param name="inner">Inner exception</param>
        </member>
        <member name="P:Sony.NP.NpToolkitException.ResultType">
            <summary>
            The type of results, either success, warning or error
            </summary>
        </member>
        <member name="P:Sony.NP.NpToolkitException.Filename">
            <summary>
            If from a native plug-in error the .cpp filename
            </summary>
        </member>
        <member name="P:Sony.NP.NpToolkitException.LineNumber">
            <summary>
            If from a native plug-in error the .cpp linenumber
            </summary>
        </member>
        <member name="P:Sony.NP.NpToolkitException.SceErrorCode">
            <summary>
            If from a native plug-in error the Sce error code
            </summary>
        </member>
        <member name="P:Sony.NP.NpToolkitException.ExtendedMessage">
            <summary>
            Get the extended message for this exception.
            If the exception came from an error in the native plug-in it will include any Sce error code and the .cpp filename and line number.
            The Sce error code will be returned as a Hex character representation
            </summary>
        </member>
        <member name="T:Sony.NP.AgeRestriction">
            <summary>
            Set the age restriction for a specific country
            </summary>
        </member>
        <member name="M:Sony.NP.AgeRestriction.#ctor(System.Int32,Sony.NP.Core.CountryCode)">
            <summary>
            Initialise an age restricition for the specified country code
            </summary>
            <param name="age">The minimum age restriction.</param>
            <param name="countryCode">The country code</param>
        </member>
        <member name="M:Sony.NP.AgeRestriction.Init">
            <summary>
            Initialise with no age restricition and country code 
            </summary>
        </member>
        <member name="P:Sony.NP.AgeRestriction.CountryCode">
            <summary>
            Set the country code to apply this age restricition. . Takes a copy of the code, see remarks for details.
            </summary>
            <remarks>
            Takes a copy of the country code or returns a copy.
            The country code must be assign explicitly. 
            </remarks>
        </member>
        <member name="P:Sony.NP.AgeRestriction.Age">
            <summary>
            The minimum age restriction for the given country code
            </summary>
        </member>
        <member name="T:Sony.NP.ContentRestriction">
            <summary>
            Configure the age restrictions for this title by setting a default age.
            Additional age restrictions for specific countries can also be set.
            </summary>
        </member>
        <member name="F:Sony.NP.ContentRestriction.MAX_AGE_RESTICTIONS">
            <summary>Maximum number of Age restrictions with country codes</summary>
        </member>
        <member name="F:Sony.NP.ContentRestriction.NP_NO_AGE_RESTRICTION">
            <summary>No age restricition default value</summary>
        </member>
        <member name="M:Sony.NP.ContentRestriction.Init">
            <summary>
            Initialise the title to use no default age strictions or country specific restrictions.
            </summary>
        </member>
        <member name="P:Sony.NP.ContentRestriction.DefaultAgeRestriction">
            <summary>
            The default age restrictioon for the title. Use NP_NO_AGE_RESTRICTION to speicify no age restriction.
            </summary>
        </member>
        <member name="P:Sony.NP.ContentRestriction.AgeRestrictions">
            <summary>
            Set the array of age restrictions for defined countries.
            </summary>
        </member>
        <member name="P:Sony.NP.ContentRestriction.ApplyContentRestriction">
            <summary>
            Defaults to True. When true will set content restrictions, otherwise will not call sceNpSetContentRestriction. Declaring age restriction is a requirement for any product doing network access. Before disabling this please refer to TRC R4109 and check if your product can ignore age restrictions. Note this is not the same as setting the age restriction to 0.
            </summary>
        </member>
        <member name="T:Sony.NP.ServerPushNotifications">
            <summary>
            Activate server push notifications from the PSN servers.
            </summary>
        </member>
        <member name="M:Sony.NP.ServerPushNotifications.Init">
            <summary>
            Initialise so all services push notifictions are supported.
            </summary>
        </member>
        <member name="P:Sony.NP.ServerPushNotifications.NewGameDataMessage">
            <summary>
            Indicates if the application wishes to receive a notification when a game data message is received
            </summary>
        </member>
        <member name="P:Sony.NP.ServerPushNotifications.NewInvitation">
            <summary>
            Indicates if the application wishes to receive a notification when an invitation is received
            </summary>
        </member>
        <member name="P:Sony.NP.ServerPushNotifications.UpdateBlockedUsersList">
            <summary>
            Indicates if the application wishes to receive a notification when the blocked users list is modified
            </summary>
        </member>
        <member name="P:Sony.NP.ServerPushNotifications.UpdateFriendPresence">
            <summary>
            Indicates if the application wishes to receive a notification when the presence information of a friend is modified
            </summary>
        </member>
        <member name="P:Sony.NP.ServerPushNotifications.UpdateFriendsList">
            <summary>
            Indicates if the application wishes to receive a notification when the friends list is modified
            </summary>
        </member>
        <member name="P:Sony.NP.ServerPushNotifications.NewInGameMessage">
            <summary>
            Indicates if the application wishes to receive a notification when new in-game messages are received
            </summary>
            <remarks>
            This is also required to use the <see cref="M:Sony.NP.Messaging.SendInGameMessage(Sony.NP.Messaging.SendInGameMessageRequest,Sony.NP.Core.EmptyResponse)"/> method, otherwise it will result in error SCE_NP_IN_GAME_MESSAGE_ERROR_LIB_CONTEXT_NOT_FOUND
            </remarks>
        </member>
        <member name="T:Sony.NP.PushNotificationsFlags">
            <summary>
            Flags to activate server push notifications from the PSN servers. See <see cref="M:Sony.NP.InitToolkit.SetPushNotificationsFlags(Sony.NP.PushNotificationsFlags)"/>
            </summary>
        </member>
        <member name="F:Sony.NP.PushNotificationsFlags.None">
            <summary>Used to disable all push notifications. Note this is not a flag as is only provided for readability when calling <see cref="M:Sony.NP.InitToolkit.SetPushNotificationsFlags(Sony.NP.PushNotificationsFlags)"/> and requiring all flags to be disabled.</summary>
        </member>
        <member name="F:Sony.NP.PushNotificationsFlags.NewGameDataMessage">
            <summary>Indicates if the application wishes to receive a notification when a game data message is received</summary>
        </member>
        <member name="F:Sony.NP.PushNotificationsFlags.NewInvitation">
            <summary>Indicates if the application wishes to receive a notification when an invitation is received</summary>
        </member>
        <member name="F:Sony.NP.PushNotificationsFlags.UpdateBlockedUsersList">
            <summary>Indicates if the application wishes to receive a notification when the blocked users list is modified</summary>
        </member>
        <member name="F:Sony.NP.PushNotificationsFlags.UpdateFriendPresence">
            <summary>Indicates if the application wishes to receive a notification when the presence information of a friend is modified</summary>
        </member>
        <member name="F:Sony.NP.PushNotificationsFlags.UpdateFriendsList">
            <summary>Indicates if the application wishes to receive a notification when the friends list is modified</summary>
        </member>
        <member name="F:Sony.NP.PushNotificationsFlags.NewInGameMessage">
            <summary>Indicates if the application wishes to receive a notification when new in-game messages are received</summary>
            <remarks>This is also required to use the <see cref="M:Sony.NP.Messaging.SendInGameMessage(Sony.NP.Messaging.SendInGameMessageRequest,Sony.NP.Core.EmptyResponse)"/> method, otherwise it will result in error SCE_NP_IN_GAME_MESSAGE_ERROR_LIB_CONTEXT_NOT_FOUND</remarks>
        </member>
        <member name="T:Sony.NP.Affinity">
            <summary>
            Set the affinity mask to enable NpToolkit to run on multiple cores
            Important - Core0 and Core1 and not provided as these are the main Update and Gfx cores and should not be used.
            </summary>
        </member>
        <member name="F:Sony.NP.Affinity.Core2">
            <summary>Allow native NpToolkit plug-in to run on Core 2</summary>
        </member>
        <member name="F:Sony.NP.Affinity.Core3">
            <summary>Allow native NpToolkit plug-in to run on Core 3</summary>
        </member>
        <member name="F:Sony.NP.Affinity.Core4">
            <summary>Allow native NpToolkit plug-in to run on Core 4</summary>
        </member>
        <member name="F:Sony.NP.Affinity.Core5">
            <summary>Allow native NpToolkit plug-in to run on Core 5</summary>
        </member>
        <member name="F:Sony.NP.Affinity.AllCores">
            <summary>Allow native NpToolkit plug-in to run on Core 2,3,4, and 5</summary>
        </member>
        <member name="T:Sony.NP.ThreadSettings">
            <summary>
            Set the thread settings for the NpToolkit plug-in
            </summary>
        </member>
        <member name="F:Sony.NP.ThreadSettings.affinity">
            <summary>
            The affinity mask.
            </summary>
        </member>
        <member name="M:Sony.NP.ThreadSettings.Init">
            <summary>
            By default initialise the thread settings to use cores 2,3,4 and 5
            </summary>
        </member>
        <member name="T:Sony.NP.MemoryPools">
             <summary>
              Represents the sizes of the ToolkitNp2 library memory pools.
             </summary>
             <remarks>
             Represents the sizes of the ToolkitNp2 library memory pools.
             This class is used as a member of the <see cref="T:Sony.NP.InitToolkit"/> class, and the values it contains are used to set the sizes of the ToolkitNp2 library memory pools.
             
             The library has 9 different memory pools:
               - Basic network related pools: Net, SSL, HTTP.
               - WebAPI related pools: WebAPI, JSON.
               - Matching related pools: SSL-NpMatching2 and NpMatching2.
               - InGameMessage related pools: NpInGameMessage. 
               - The internal memory pool used by the library itself.
            
             All memory pools will be initialized as soon as the library starts except for the Matching pool, which will be
             initialized only when the Matching service starts.
             
             All sizes, except for the Net pool size, must be multiples of 16 KiB.
             
             You may need to adjust these values when services are
             used especially during development.
             </remarks>
        </member>
        <member name="F:Sony.NP.MemoryPools.TOOLKIT_MEM_DEFAULT_SIZE">
            <summary>The default value for the internal memory pool used by the ToolkitNp2 library.</summary>
        </member>
        <member name="F:Sony.NP.MemoryPools.JSON_MEM_MINIMUM_SIZE">
            <summary>The minimum value required by the JSON memory pool.</summary>
        </member>
        <member name="F:Sony.NP.MemoryPools.JSON_MEM_DEFAULT_SIZE">
            <summary>The default value for the JSON memory pool.</summary>
        </member>
        <member name="F:Sony.NP.MemoryPools.WEB_API_MEM_DEFAULT_SIZE">
            <summary>The default value for the WebAPI memory pool.</summary>
        </member>
        <member name="F:Sony.NP.MemoryPools.HTTP_MEM_DEFAULT_SIZE">
            <summary>The default value for the HTTP memory pool.</summary>
        </member>
        <member name="F:Sony.NP.MemoryPools.HTTP_MEM_MINIMUM_SIZE">
            <summary>The minimum value required by the HTTP memory pool.</summary>
        </member>
        <member name="F:Sony.NP.MemoryPools.SSL_MEM_DEFAULT_SIZE">
            <summary>The default value for the SSL memory pool.</summary>
        </member>
        <member name="F:Sony.NP.MemoryPools.SSL_MEM_MINIMUM_SIZE">
            <summary>The minimum value required by the SSL memory pool.</summary>
        </member>
        <member name="F:Sony.NP.MemoryPools.NET_MEM_DEFAULT_SIZE">
            <summary>The default value for the Net memory pool.</summary>
        </member>
        <member name="F:Sony.NP.MemoryPools.NET_MEM_MINIMUM_SIZE">
            <summary>The minimum value required by the Net memory pool.</summary>
        </member>
        <member name="F:Sony.NP.MemoryPools.MATCHING_MEM_DEFAULT_SIZE">
            <summary>The default value for the NpMatching2 memory pool.</summary>
        </member>
        <member name="F:Sony.NP.MemoryPools.MATCHING_SSL_MEM_DEFAULT_SIZE">
            <summary>The default value for the SSL memory pool of the NpMatching2 library.</summary>
        </member>
        <member name="F:Sony.NP.MemoryPools.IN_GAME_MESSAGE_MEM_DEFAULT_SIZE">
            <summary>The default value for the NpInGameMessage memory pool.</summary>
        </member>
        <member name="M:Sony.NP.MemoryPools.Init">
            <summary>
            Initialise all memory pool sizes to the default values.
            </summary>
        </member>
        <member name="P:Sony.NP.MemoryPools.ToolkitPoolSize">
            <summary>
            The size of the internal memory pool used by the ToolkitNp2 library.
            </summary>
        </member>
        <member name="P:Sony.NP.MemoryPools.JsonPoolSize">
            <summary>
            The size of the JSON memory pool.
            </summary>
        </member>
        <member name="P:Sony.NP.MemoryPools.WebApiPoolSize">
            <summary>
            The size of the WebAPI memory pool.
            </summary>
        </member>
        <member name="P:Sony.NP.MemoryPools.HttpPoolSize">
            <summary>
            The size of the HTTP memory pool.
            </summary>
        </member>
        <member name="P:Sony.NP.MemoryPools.SslPoolSize">
            <summary>
            The size of the SSL memory pool.
            </summary>
        </member>
        <member name="P:Sony.NP.MemoryPools.NetPoolSize">
            <summary>
            The size of the Net memory pool. Doesn't need to be a multiple of 16 Kib
            </summary>
        </member>
        <member name="P:Sony.NP.MemoryPools.MatchingPoolSize">
            <summary>
            The size of the memory pool of the NpMatching2 library. This is ignored if the Matching service is not used.
            </summary>
        </member>
        <member name="P:Sony.NP.MemoryPools.MatchingSslPoolSize">
            <summary>
            The size of the SSL memory pool of the NpMatching2 library. This is ignored if the Matching service is not used.
            </summary>
        </member>
        <member name="P:Sony.NP.MemoryPools.InGameMessagePoolSize">
            <summary>
            The size of the memory pool of the NpInGameMessage library. This is ignored if In-Game messages are not used.	
            </summary>
        </member>
        <member name="T:Sony.NP.SDKVersions">
            <summary>
            List of convient values for different SDK versions. Can be used to test against SDK value returned from <see cref="P:Sony.NP.InitResult.SceSDKVersionValue"/>
            </summary>
        </member>
        <member name="F:Sony.NP.SDKVersions.SDK_4">
            <summary> </summary>
        </member>
        <member name="T:Sony.NP.SceSDKVersion">
            <summary>
            Sce SDK Version
            </summary>
        </member>
        <member name="F:Sony.NP.SceSDKVersion.Major">
            <summary>
            Major version
            </summary>
        </member>
        <member name="F:Sony.NP.SceSDKVersion.Minor">
            <summary>
            Minor verson
            </summary>
        </member>
        <member name="F:Sony.NP.SceSDKVersion.Patch">
            <summary>
            Patch version
            </summary>
        </member>
        <member name="M:Sony.NP.SceSDKVersion.ToString">
            <summary>
            Return the SDK version as a string seperated into Major, Minor and Patch values
            </summary>
            <returns></returns>
        </member>
        <member name="T:Sony.NP.NativeInitResult">
            <summary>
            The native initialization state of NpToolkit
            </summary>
        </member>
        <member name="T:Sony.NP.InitResult">
            <summary>
            The initialisation state of NpToolkit
            </summary>
        </member>
        <member name="P:Sony.NP.InitResult.Initialized">
            <summary>
            Has NpToolkit been initialize correctly
            </summary>
        </member>
        <member name="P:Sony.NP.InitResult.SceSDKVersionValue">
            <summary>
            The current SDK version the native plugin is built with
            </summary>
        </member>
        <member name="P:Sony.NP.InitResult.DllVersion">
            <summary>
            The current Version number for the SonyNp assembly
            </summary>
        </member>
        <member name="P:Sony.NP.InitResult.SceSDKVersion">
            <summary>
            The current SDK version as Major, Minor and Patch values.
            </summary>
        </member>
        <member name="T:Sony.NP.InitToolkit">
            <summary>
            Initialisation settings for the NpToolkit system.
            </summary>
        </member>
        <member name="F:Sony.NP.InitToolkit.contentRestrictions">
            <summary>
            Content restrictions for the title. Defaulted to no age restriction.
            </summary>
        </member>
        <member name="F:Sony.NP.InitToolkit.serverPushNotifications">
            <summary>
            Server push notifications. Defaulted to the enabled all server push notifications types.
            </summary>
        </member>
        <member name="F:Sony.NP.InitToolkit.serverPushNotificationsFlags">
            <summary>
             Server push notifications. Defaulted to the enabled all server push notifications types.
            </summary>
        </member>
        <member name="F:Sony.NP.InitToolkit.threadSettings">
            <summary>
            Thread settings. Defaulted to enable the NpToolkit thread to run on cores 2,3,4 and 5.
            </summary>
        </member>
        <member name="F:Sony.NP.InitToolkit.memoryPools">
            <summary>
            Memory Pools. The size of all memory pools required by the ToolkitNp2 library.	
            </summary>
        </member>
        <member name="M:Sony.NP.InitToolkit.#ctor">
            <summary>
            Initialise the settings to their defaults.
            </summary>
        </member>
        <member name="M:Sony.NP.InitToolkit.SetPushNotificationsFlags(Sony.NP.PushNotificationsFlags)">
            <summary>
             Server push notifications. Defaulted to the enabled all server push notifications types.
            </summary>
            <param name="pushNotifications">Flags to set</param>
        </member>
        <member name="M:Sony.NP.InitToolkit.CheckValid">
            <summary>
            Check if settings are valid. Will throw an exception is settings are invalid.
            Currently checks if the thread affinity mask is set to use cores 0 or 1 as this is not allowed.
            </summary>
            <exception cref="T:Sony.NP.NpToolkitException">Will throw an exception if the <see cref="F:Sony.NP.ThreadSettings.affinity"/> mask flags Core 0 or 1</exception>
        </member>
        <member name="T:Sony.NP.ServiceTypes">
            <summary>
            Defines the different services provided by the NpToolkit2.
            It is set automatically when a request object is created, and identifies the service it belongs to.
            </summary>
        </member>
        <member name="F:Sony.NP.ServiceTypes.Invalid">
            <summary>Non-valid service. It should never be returned (check memset() is not being used in a non-POD object, as a request)</summary>
        </member>
        <member name="F:Sony.NP.ServiceTypes.ActivityFeed">
            <summary>Activity Feed service</summary>
        </member>
        <member name="F:Sony.NP.ServiceTypes.Auth">
            <summary>Auth service</summary>
        </member>
        <member name="F:Sony.NP.ServiceTypes.Challenge">
            <summary>Challenge service</summary>
        </member>
        <member name="F:Sony.NP.ServiceTypes.Commerce">
            <summary>Commerce service</summary>
        </member>
        <member name="F:Sony.NP.ServiceTypes.Core">
            <summary>Core service. Used only when a Core request is performed</summary>
        </member>
        <member name="F:Sony.NP.ServiceTypes.EventsClient">
            <summary>Events Client service</summary>
        </member>
        <member name="F:Sony.NP.ServiceTypes.Friends">
            <summary>Friend service</summary>
        </member>
        <member name="F:Sony.NP.ServiceTypes.Matching">
            <summary>Matching service</summary>
        </member>
        <member name="F:Sony.NP.ServiceTypes.Messaging">
            <summary>Messaging service</summary>
        </member>
        <member name="F:Sony.NP.ServiceTypes.NetworkUtils">
            <summary>Network Utils service</summary>
        </member>
        <member name="F:Sony.NP.ServiceTypes.Notification">
            <summary>Notification service. Used to notify when something external to the application happened. Not bound to a request</summary>
        </member>
        <member name="F:Sony.NP.ServiceTypes.NpUtils">
            <summary>Np Utils service</summary>
        </member>
        <member name="F:Sony.NP.ServiceTypes.Presence">
            <summary>Presence service</summary>
        </member>
        <member name="F:Sony.NP.ServiceTypes.Ranking">
            <summary>Ranking service</summary>
        </member>
        <member name="F:Sony.NP.ServiceTypes.Session">
            <summary>Session service</summary>
        </member>
        <member name="F:Sony.NP.ServiceTypes.SharedMedia">
            <summary>Shared Media service</summary>
        </member>
        <member name="F:Sony.NP.ServiceTypes.SocialMedia">
            <summary>Social Media service</summary>
        </member>
        <member name="F:Sony.NP.ServiceTypes.Tournament">
            <summary>Tournament service</summary>
        </member>
        <member name="F:Sony.NP.ServiceTypes.Trophy">
            <summary>Trophy service</summary>
        </member>
        <member name="F:Sony.NP.ServiceTypes.Tss">
            <summary>TSS service</summary>
        </member>
        <member name="F:Sony.NP.ServiceTypes.Tus">
            <summary>TUS service</summary>
        </member>
        <member name="F:Sony.NP.ServiceTypes.UserProfile">
            <summary>User Profile service</summary>
        </member>
        <member name="F:Sony.NP.ServiceTypes.WordFilter">
            <summary>Wordfilter service</summary>
        </member>
        <member name="F:Sony.NP.ServiceTypes.Size">
            <summary>Size of this enum</summary>
        </member>
        <member name="T:Sony.NP.FunctionTypes">
            <summary>
            Defines the different APIs provided by the NpToolkit2 library.
            It is set automatically when a request object is created, and identifies the function it belongs to.
            </summary>
        </member>
        <member name="F:Sony.NP.FunctionTypes.Invalid">
            <summary>Non-valid function. It should never be returned (check memset() is not being used in a non-POD object, as a request)</summary>
        </member>
        <member name="F:Sony.NP.FunctionTypes.ActivityFeedGetSharedVideos">
            <summary>Not implemented</summary>
        </member>
        <member name="F:Sony.NP.FunctionTypes.ActivityFeedGetPlayedWith">
            <summary>Not implemented</summary>
        </member>
        <member name="F:Sony.NP.FunctionTypes.ActivityFeedPostPlayedWith">
            <summary>Not implemented</summary>
        </member>
        <member name="F:Sony.NP.FunctionTypes.ActivityFeedGetWhoLiked">
            <summary>Not implemented</summary>
        </member>
        <member name="F:Sony.NP.FunctionTypes.ActivityFeedSetLiked">
            <summary>Not implemented</summary>
        </member>
        <member name="F:Sony.NP.FunctionTypes.ActivityFeedGetFeed">
            <summary>Not implemented</summary>
        </member>
        <member name="F:Sony.NP.FunctionTypes.ActivityFeedPostInGameStory">
            <summary>Not implemented</summary>
        </member>
        <member name="F:Sony.NP.FunctionTypes.AuthGetAuthCode">
            <summary>Not implemented</summary>
        </member>
        <member name="F:Sony.NP.FunctionTypes.AuthGetIdToken">
            <summary>Not implemented</summary>	
        </member>
        <member name="F:Sony.NP.FunctionTypes.ChallengeConsumeChallenge">
            <summary>Not implemented</summary>
        </member>
        <member name="F:Sony.NP.FunctionTypes.ChallengeSendChallenge">
            <summary>Not implemented</summary>
        </member>
        <member name="F:Sony.NP.FunctionTypes.ChallengeGetReceivedChallenges">
            <summary>Not implemented</summary>
        </member>
        <member name="F:Sony.NP.FunctionTypes.ChallengeGetChallengeData">
            <summary>Not implemented</summary>
        </member>
        <member name="F:Sony.NP.FunctionTypes.ChallengeGetChallengeThumbnail">
            <summary>Not implemented</summary>
        </member>
        <member name="F:Sony.NP.FunctionTypes.CommerceGetCategories">
            <summary>Not implemented</summary>
        </member>
        <member name="F:Sony.NP.FunctionTypes.CommerceGetProducts">
            <summary>Not implemented</summary>
        </member>
        <member name="F:Sony.NP.FunctionTypes.CommerceGetServiceEntitlements">
            <summary>Not implemented</summary>
        </member>
        <member name="F:Sony.NP.FunctionTypes.CommerceConsumeServiceEntitlement">
            <summary>Not implemented</summary>
        </member>
        <member name="F:Sony.NP.FunctionTypes.CommerceDisplayCategoryBrowseDialog">
            <summary>Not implemented</summary>
        </member>
        <member name="F:Sony.NP.FunctionTypes.CommerceDisplayProductBrowseDialog">
            <summary>Not implemented</summary>
        </member>
        <member name="F:Sony.NP.FunctionTypes.CommerceDisplayVoucherCodeInputDialog">
            <summary>Not implemented</summary>
        </member>
        <member name="F:Sony.NP.FunctionTypes.CommerceDisplayCheckoutDialog">
            <summary>Not implemented</summary>
        </member>
        <member name="F:Sony.NP.FunctionTypes.CommerceDisplayJoinPlusDialog">
            <summary>Not implemented</summary>
        </member>
        <member name="F:Sony.NP.FunctionTypes.CommerceDisplayDownloadListDialog">
            <summary>Not implemented</summary>
        </member>
        <member name="F:Sony.NP.FunctionTypes.CommerceSetPsStoreIconDisplayState">
            <summary>Not implemented</summary>
        </member>
        <member name="F:Sony.NP.FunctionTypes.CommerceGetContainers">
            <summary>Not implemented</summary>
        </member>
        <member name="F:Sony.NP.FunctionTypes.CoreTerminateService">
            <summary>Not implemented</summary>
        </member>
        <member name="F:Sony.NP.FunctionTypes.EventsClientGetEvent">
            <summary>Not implemented</summary>
        </member>
        <member name="F:Sony.NP.FunctionTypes.FriendsGetFriends">
            <summary>Used by <see cref="M:Sony.NP.Friends.GetFriends(Sony.NP.Friends.GetFriendsRequest,Sony.NP.Friends.FriendsResponse)"/></summary>
        </member>
        <member name="F:Sony.NP.FunctionTypes.FriendsGetFriendsOfFriends">
            <summary>Used by <see cref="M:Sony.NP.Friends.GetFriendsOfFriends(Sony.NP.Friends.GetFriendsOfFriendsRequest,Sony.NP.Friends.FriendsOfFriendsResponse)"/></summary>
        </member>
        <member name="F:Sony.NP.FunctionTypes.FriendsGetBlockedUsers">
            <summary>Used by <see cref="M:Sony.NP.Friends.GetBlockedUsers(Sony.NP.Friends.GetBlockedUsersRquest,Sony.NP.Friends.BlockedUsersResponse)"/></summary>
        </member>
        <member name="F:Sony.NP.FunctionTypes.FriendsDisplayFriendRequestDialog">
            <summary>Used by <see cref="M:Sony.NP.Friends.DisplayFriendRequestDialog(Sony.NP.Friends.DisplayFriendRequestDialogRequest,Sony.NP.Core.EmptyResponse)"/></summary>
        </member>
        <member name="F:Sony.NP.FunctionTypes.FriendsDisplayBlockUserDialog">
            <summary>Used by <see cref="M:Sony.NP.Friends.DisplayBlockUserDialog(Sony.NP.Friends.DisplayBlockUserDialogRequest,Sony.NP.Core.EmptyResponse)"/></summary>
        </member>
        <member name="F:Sony.NP.FunctionTypes.MatchingSetInitConfiguration">
            <summary>Not implemented</summary>
        </member>
        <member name="F:Sony.NP.FunctionTypes.MatchingGetWorlds">
            <summary>Not implemented</summary>
        </member>
        <member name="F:Sony.NP.FunctionTypes.MatchingCreateRoom">
            <summary>Not implemented</summary>
        </member>
        <member name="F:Sony.NP.FunctionTypes.MatchingLeaveRoom">
            <summary>Not implemented</summary>
        </member>
        <member name="F:Sony.NP.FunctionTypes.MatchingSearchRooms">
            <summary>Not implemented</summary>
        </member>
        <member name="F:Sony.NP.FunctionTypes.MatchingJoinRoom">
            <summary>Not implemented</summary>
        </member>
        <member name="F:Sony.NP.FunctionTypes.MatchingGetRoomPingTime">
            <summary>Not implemented</summary>
        </member>
        <member name="F:Sony.NP.FunctionTypes.MatchingKickOutRoomMember">
            <summary>Not implemented</summary>
        </member>
        <member name="F:Sony.NP.FunctionTypes.MatchingSendRoomMessage">
            <summary>Not implemented</summary>
        </member>
        <member name="F:Sony.NP.FunctionTypes.MatchingGetAttributes">
            <summary>Not implemented</summary>
        </member>
        <member name="F:Sony.NP.FunctionTypes.MatchingSetRoomInfo">
            <summary>Not implemented</summary>
        </member>
        <member name="F:Sony.NP.FunctionTypes.MatchingSendInvitation">
            <summary>Not implemented</summary>
        </member>
        <member name="F:Sony.NP.FunctionTypes.MatchingGetData">
            <summary>Not implemented</summary>
        </member>
        <member name="F:Sony.NP.FunctionTypes.MatchingSetMembersAsRecentlyMet">
            <summary>Added In SDK 4.5</summary>
        </member>
        <member name="F:Sony.NP.FunctionTypes.MessagingSendInGameMessage">
            <summary>Not implemented</summary>
        </member>
        <member name="F:Sony.NP.FunctionTypes.MessagingSendGameDataMessage">
            <summary>Not implemented</summary>
        </member>
        <member name="F:Sony.NP.FunctionTypes.MessagingDisplayReceivedGameDataMessagesDialog">
            <summary>Not implemented</summary>
        </member>
        <member name="F:Sony.NP.FunctionTypes.MessagingGetReceivedGameDataMessages">
            <summary>Not implemented</summary>
        </member>
        <member name="F:Sony.NP.FunctionTypes.MessagingConsumeGameDataMessage">
            <summary>Not implemented</summary>
        </member>
        <member name="F:Sony.NP.FunctionTypes.MessagingGetGameDataMessageThumbnail">
            <summary>Not implemented</summary>
        </member>
        <member name="F:Sony.NP.FunctionTypes.MessagingGetGameDataMessageAttachment">
            <summary>Not implemented</summary>
        </member>
        <member name="F:Sony.NP.FunctionTypes.NetworkUtilsGetBandwidthInfo">
            <summary>Used by <see cref="M:Sony.NP.NetworkUtils.GetBandwidthInfo(Sony.NP.NetworkUtils.GetBandwidthInfoRequest,Sony.NP.NetworkUtils.BandwidthInfoResponse)"/></summary>
        </member>
        <member name="F:Sony.NP.FunctionTypes.NetworkUtilsGetBasicNetworkInfo">
            <summary>Used by <see cref="M:Sony.NP.NetworkUtils.GetBasicNetworkInfoInfo(Sony.NP.NetworkUtils.GetBasicNetworkInfoRequest,Sony.NP.NetworkUtils.BasicNetworkInfoResponse)"/></summary>
        </member>
        <member name="F:Sony.NP.FunctionTypes.NetworkUtilsGetDetailedNetworkInfo">
            <summary>Used by <see cref="M:Sony.NP.NetworkUtils.GetDetailedNetworkInfo(Sony.NP.NetworkUtils.GetDetailedNetworkInfoRequest,Sony.NP.NetworkUtils.DetailedNetworkInfoResponse)"/></summary>
        </member>
        <member name="F:Sony.NP.FunctionTypes.NotificationRefreshRoom">
            <summary>Not implemented</summary>
        </member>
        <member name="F:Sony.NP.FunctionTypes.NotificationNewRoomMessage">
            <summary>Not implemented</summary>
        </member>
        <member name="F:Sony.NP.FunctionTypes.NotificationDialogOpened">
            <summary>The Response in the callback is <see cref="T:Sony.NP.Core.EmptyResponse"/></summary>
        </member>
        <member name="F:Sony.NP.FunctionTypes.NotificationDialogClosed">
            <summary>The Response in the callback is <see cref="T:Sony.NP.Core.EmptyResponse"/></summary>
        </member>
        <member name="F:Sony.NP.FunctionTypes.NotificationUserStateChange">
            <summary>The Response in the callback is <see cref="T:Sony.NP.NpUtils.UserStateChangeResponse"/></summary>
        </member>
        <member name="F:Sony.NP.FunctionTypes.NotificationNetStateChange">
            <summary>The Response in the callback is <see cref="T:Sony.NP.NetworkUtils.NetStateChangeResponse"/></summary>
        </member>
        <member name="F:Sony.NP.FunctionTypes.NotificationNewInGameMessage">
            <summary>Not implemented</summary> // Moved here in SDK 4.5
        </member>
        <member name="F:Sony.NP.FunctionTypes.NotificationUpdateFriendsList">
            <summary>The Response in the callback is <see cref="T:Sony.NP.Friends.FriendListUpdateResponse"/></summary>
        </member>
        <member name="F:Sony.NP.FunctionTypes.NotificationNewInvitation">
            <summary>Not implemented</summary>
        </member>
        <member name="F:Sony.NP.FunctionTypes.NotificationNewGameDataMessage">
            <summary>Not implemented</summary>
        </member>
        <member name="F:Sony.NP.FunctionTypes.NotificationUpdateFriendPresence">
            <summary>The Response in the callback is <see cref="T:Sony.NP.Presence.PresenceUpdateResponse"/></summary>
        </member>
        <member name="F:Sony.NP.FunctionTypes.NotificationUpdateBlockedUsersList">
            <summary>The Response in the callback is <see cref="T:Sony.NP.Friends.BlocklistUpdateResponse"/></summary>
        </member>
        <member name="F:Sony.NP.FunctionTypes.NotificationAborted">
            <summary>The Response in the callback is <see cref="T:Sony.NP.Core.EmptyResponse"/></summary>
        </member>
        <member name="F:Sony.NP.FunctionTypes.NpUtilsDisplaySigninDialog">
            <summary>Used by <see cref="M:Sony.NP.NpUtils.DisplaySigninDialog(Sony.NP.NpUtils.DisplaySigninDialogRequest,Sony.NP.Core.EmptyResponse)"/></summary>
        </member>
        <member name="F:Sony.NP.FunctionTypes.NpUtilsSetTitleIdForDevelopment">
            <summary>Used by <see cref="M:Sony.NP.NpUtils.SetTitleIdForDevelopment(Sony.NP.NpUtils.SetTitleIdForDevelopmentRequest,Sony.NP.Core.EmptyResponse)"/></summary>
        </member>
        <member name="F:Sony.NP.FunctionTypes.NpUtilsCheckAvailability">
            <summary>Used by <see cref="M:Sony.NP.NpUtils.CheckAvailablity(Sony.NP.NpUtils.CheckAvailablityRequest,Sony.NP.Core.EmptyResponse)"/></summary>
        </member>
        <member name="F:Sony.NP.FunctionTypes.NpUtilsCheckPsPlusAccess">
            <summary>Not implemented/></summary>
        </member>
        <member name="F:Sony.NP.FunctionTypes.NpUtilsGetAccountIdByOnlineId">
            <summary>Not implemented/></summary>
        </member>
        <member name="F:Sony.NP.FunctionTypes.NpUtilsGetOnlineIdByAccountId">
            <summary>Not implemented/></summary>
        </member>
        <member name="F:Sony.NP.FunctionTypes.PresenceSetPresence">
            <summary>Used by <see cref="M:Sony.NP.Presence.SetPresence(Sony.NP.Presence.SetPresenceRequest,Sony.NP.Core.EmptyResponse)"/></summary>
        </member>
        <member name="F:Sony.NP.FunctionTypes.PresenceGetPresence">
            <summary>Used by <see cref="M:Sony.NP.Presence.GetPresence(Sony.NP.Presence.GetPresenceRequest,Sony.NP.Presence.PresenceResponse)"/></summary>
        </member>
        <member name="F:Sony.NP.FunctionTypes.PresenceDeletePresence">
            <summary>Used by <see cref="M:Sony.NP.Presence.DeletePresence(Sony.NP.Presence.DeletePresenceRequest,Sony.NP.Core.EmptyResponse)"/></summary>
        </member>
        <member name="F:Sony.NP.FunctionTypes.RankingSetScore">
            <summary>Not implemented</summary>
        </member>
        <member name="F:Sony.NP.FunctionTypes.RankingGetRangeOfRanks">
            <summary>Not implemented</summary>
        </member>
        <member name="F:Sony.NP.FunctionTypes.RankingGetFriendsRanks">
            <summary>Not implemented</summary>
        </member>
        <member name="F:Sony.NP.FunctionTypes.RankingGetUsersRanks">
            <summary>Not implemented</summary>
        </member>
        <member name="F:Sony.NP.FunctionTypes.RankingSetGameData">
            <summary>Not implemented</summary>
        </member>
        <member name="F:Sony.NP.FunctionTypes.RankingGetGameData">
            <summary>Not implemented</summary>
        </member>
        <member name="F:Sony.NP.FunctionTypes.SessionSendInvitation">
            <summary>Not implemented</summary>
        </member>
        <member name="F:Sony.NP.FunctionTypes.SessionDisplayReceivedInvitationsDialog">
            <summary>Not implemented</summary>
        </member>
        <member name="F:Sony.NP.FunctionTypes.SessionGetReceivedInvitations">
            <summary>Not implemented</summary>
        </member>
        <member name="F:Sony.NP.FunctionTypes.SessionGetInvitationData">
            <summary>Not implemented</summary>
        </member>
        <member name="F:Sony.NP.FunctionTypes.SessionConsumeInvitation">
            <summary>Not implemented</summary>
        </member>
        <member name="F:Sony.NP.FunctionTypes.SessionGetData">
            <summary>Not implemented</summary>
        </member>
        <member name="F:Sony.NP.FunctionTypes.SessionLeave">
            <summary>Not implemented</summary>
        </member>
        <member name="F:Sony.NP.FunctionTypes.SessionUpdate">
            <summary>Not implemented</summary>
        </member>
        <member name="F:Sony.NP.FunctionTypes.SessionGetInfo">
            <summary>Not implemented</summary>
        </member>
        <member name="F:Sony.NP.FunctionTypes.SessionJoin">
            <summary>Not implemented</summary>
        </member>
        <member name="F:Sony.NP.FunctionTypes.SessionSearch">
            <summary>Not implemented</summary>
        </member>
        <member name="F:Sony.NP.FunctionTypes.SessionCreate">
            <summary>Not implemented</summary>
        </member>
        <member name="F:Sony.NP.FunctionTypes.SharedMediaGetScreenshots">
            <summary>Not implemented</summary>
        </member>
        <member name="F:Sony.NP.FunctionTypes.SharedMediaGetBroadcasts">
            <summary>Not implemented</summary>
        </member>
        <member name="F:Sony.NP.FunctionTypes.SharedMediaGetVideos">
            <summary>Not implemented</summary>
        </member>
        <member name="F:Sony.NP.FunctionTypes.SocialMediaPostMessageToFacebook">
            <summary>Not implemented</summary>
        </member>
        <member name="F:Sony.NP.FunctionTypes.TournamentSearchEvents">
            <summary>Not implemented</summary>
        </member>
        <member name="F:Sony.NP.FunctionTypes.TournamentGetEvent">
            <summary>Not implemented</summary>
        </member>
        <member name="F:Sony.NP.FunctionTypes.TournamentGetRegisteredUsers">
            <summary>Not implemented</summary>
        </member>
        <member name="F:Sony.NP.FunctionTypes.TournamentGetRegisteredTeams">
            <summary>Not implemented</summary>
        </member>
        <member name="F:Sony.NP.FunctionTypes.TournamentGetRegisteredRoster">
            <summary>Not implemented</summary>
        </member>
        <member name="F:Sony.NP.FunctionTypes.TournamentGetBracket">
            <summary>Not implemented</summary>
        </member>
        <member name="F:Sony.NP.FunctionTypes.TournamentSendUserMatchReport">
            <summary>Not implemented</summary>
        </member>
        <member name="F:Sony.NP.FunctionTypes.TournamentSendTeamMatchReport">
            <summary>Not implemented</summary>
        </member>
        <member name="F:Sony.NP.FunctionTypes.TrophyRegisterTrophyPack">
            <summary>Used by <see cref="M:Sony.NP.Trophies.RegisterTrophyPack(Sony.NP.Trophies.RegisterTrophyPackRequest,Sony.NP.Core.EmptyResponse)"/></summary>
        </member>
        <member name="F:Sony.NP.FunctionTypes.TrophyUnlock">
            <summary>Used by <see cref="M:Sony.NP.Trophies.UnlockTrophy(Sony.NP.Trophies.UnlockTrophyRequest,Sony.NP.Core.EmptyResponse)"/></summary>
        </member>
        <member name="F:Sony.NP.FunctionTypes.TrophySetScreenshot">
            <summary>Used by <see cref="M:Sony.NP.Trophies.SetScreenshot(Sony.NP.Trophies.SetScreenshotRequest,Sony.NP.Core.EmptyResponse)"/></summary>
        </member>
        <member name="F:Sony.NP.FunctionTypes.TrophyGetUnlockedTrophies">
            <summary>Used by <see cref="M:Sony.NP.Trophies.GetUnlockedTrophies(Sony.NP.Trophies.GetUnlockedTrophiesRequest,Sony.NP.Trophies.UnlockedTrophiesResponse)"/></summary>
        </member>
        <member name="F:Sony.NP.FunctionTypes.TrophyDisplayTrophyListDialog">
            <summary>Used by <see cref="M:Sony.NP.Trophies.DisplayTrophyListDialog(Sony.NP.Trophies.DisplayTrophyListDialogRequest,Sony.NP.Core.EmptyResponse)"/></summary>
        </member>
        <member name="F:Sony.NP.FunctionTypes.TrophyGetTrophyPackSummary">
            <summary>Used by <see cref="M:Sony.NP.Trophies.GetTrophyPackSummary(Sony.NP.Trophies.GetTrophyPackSummaryRequest,Sony.NP.Trophies.TrophyPackSummaryResponse)"/></summary>
        </member>
        <member name="F:Sony.NP.FunctionTypes.TrophyGetTrophyPackGroup">
            <summary>Used by <see cref="M:Sony.NP.Trophies.GetTrophyPackGroup(Sony.NP.Trophies.GetTrophyPackGroupRequest,Sony.NP.Trophies.TrophyPackGroupResponse)"/></summary>
        </member>
        <member name="F:Sony.NP.FunctionTypes.TrophyGetTrophyPackTrophy">
            <summary>Used by <see cref="M:Sony.NP.Trophies.GetTrophyPackTrophy(Sony.NP.Trophies.GetTrophyPackTrophyRequest,Sony.NP.Trophies.TrophyPackTrophyResponse)"/></summary>
        </member>
        <member name="F:Sony.NP.FunctionTypes.TssGetData">
            <summary>Not implemented</summary>
        </member>
        <member name="F:Sony.NP.FunctionTypes.TusGetVariables">
            <summary>Not implemented</summary>
        </member>
        <member name="F:Sony.NP.FunctionTypes.TusSetVariables">
            <summary>Not implemented</summary>
        </member>
        <member name="F:Sony.NP.FunctionTypes.TusGetFriendsVariable">
            <summary>Not implemented</summary>
        </member>
        <member name="F:Sony.NP.FunctionTypes.TusAddToAndGetVariable">
            <summary>Not implemented</summary>
        </member>
        <member name="F:Sony.NP.FunctionTypes.TusTryAndSetVariable">
            <summary>Not implemented</summary>
        </member>
        <member name="F:Sony.NP.FunctionTypes.TusGetData">
            <summary>Not implemented</summary>       
        </member>
        <member name="F:Sony.NP.FunctionTypes.TusSetData">
            <summary>Not implemented</summary>
        </member>
        <member name="F:Sony.NP.FunctionTypes.TusDeleteData">
            <summary>Not implemented</summary>
        </member>
        <member name="F:Sony.NP.FunctionTypes.TusGetUsersVariable">
            <summary>Not implemented</summary>
        </member>
        <member name="F:Sony.NP.FunctionTypes.TusGetUsersDataStatus">
            <summary>Not implemented</summary>
        </member>
        <member name="F:Sony.NP.FunctionTypes.TusGetFriendsDataStatus">
            <summary>Not implemented</summary>
        </member>
        <member name="F:Sony.NP.FunctionTypes.UserProfileGetNpProfiles">
            <summary>Used by <see cref="M:Sony.NP.UserProfiles.GetNpProfiles(Sony.NP.UserProfiles.GetNpProfilesRquest,Sony.NP.UserProfiles.NpProfilesResponse)"/></summary>
        </member>
        <member name="F:Sony.NP.FunctionTypes.UserProfileGetVerifiedAccountsForTitle">
            <summary>Used by <see cref="M:Sony.NP.UserProfiles.GetVerifiedAccountsForTitle(Sony.NP.UserProfiles.GetVerifiedAccountsForTitleRequest,Sony.NP.UserProfiles.NpProfilesResponse)"/></summary>
        </member>
        <member name="F:Sony.NP.FunctionTypes.UserProfileDisplayUserProfileDialog">
            <summary>Used by <see cref="M:Sony.NP.UserProfiles.DisplayUserProfileDialog(Sony.NP.UserProfiles.DisplayUserProfileDialogRequest,Sony.NP.Core.EmptyResponse)"/></summary>
        </member>
        <member name="F:Sony.NP.FunctionTypes.UserProfileDisplayGriefReportingDialog">
            <summary>Used by <see cref="M:Sony.NP.UserProfiles.DisplayGriefReportingDialog(Sony.NP.UserProfiles.DisplayGriefReportingDialogRequest,Sony.NP.Core.EmptyResponse)"/></summary>
        </member>
        <member name="F:Sony.NP.FunctionTypes.WordfilterFilterComment">
            <summary>Not implemented</summary>
        </member>
        <member name="F:Sony.NP.FunctionTypes.NumFunctionTypes">
            <summary>The number of function types</summary>	
        </member>
        <member name="F:Sony.NP.FunctionTypes.NotificationSessionInvitationEvent">
            <summary></summary>	
        </member>
        <member name="F:Sony.NP.FunctionTypes.NotificationPlayTogetherHostEvent">
            <summary></summary>	
        </member>
        <member name="F:Sony.NP.FunctionTypes.NotificationGameCustomDataEvent">
            <summary></summary>	
        </member>
        <member name="F:Sony.NP.FunctionTypes.NpUtilsCheckPlus">
            <summary></summary>	
        </member>
        <member name="F:Sony.NP.FunctionTypes.NpUtilsGetParentalControlInfo">
            <summary></summary>	
        </member>
        <member name="T:Sony.NP.PendingRequest">
            <summary>
            Details on a request that is currently in the async queue waiting to be completed.
            </summary>
        </member>
        <member name="P:Sony.NP.PendingRequest.NpRequestId">
            <summary>
            The unique request id
            </summary>
        </member>
        <member name="P:Sony.NP.PendingRequest.Request">
            <summary>
            The request object containing the request settings
            </summary>
        </member>
        <member name="P:Sony.NP.PendingRequest.AbortPending">
            <summary>
            If the request has been aborted but is still in the pending list awaiting removal.
            </summary>
        </member>
        <member name="T:Sony.NP.PendingAsyncRequestList">
            <summary>
            Used to store the request id returned by some of the NpToolkit methods.
            This Id can be used to abort the request and remove it from the internal NpToolkit queue.
            </summary>
        </member>
        <member name="M:Sony.NP.PendingAsyncRequestList.IsPending(System.UInt32)">
            <summary>
            Check if a request id is in the pending queue waiting to be processed.
            </summary>
            <param name="npRequestId">The request id to check.</param>
            <returns>Retruns true if the request is in the queue.</returns>
        </member>
        <member name="P:Sony.NP.PendingAsyncRequestList.PendingRequests">
            <summary>
            Get a 'copy' of the pending list. This is safe to enumerate
            and won't corrupt the internal list
            </summary>
        </member>
        <member name="T:Sony.NP.ServerErrorManaged">
            <summary>
            Contains server error data
            </summary>
        </member>
        <member name="P:Sony.NP.ServerErrorManaged.JsonData">
            <summary>
            In the event of an error, the JSON error string may be returned. This can be used to further investigate an issue during development
            </summary>
        </member>
        <member name="P:Sony.NP.ServerErrorManaged.WebApiNextAvailableTime">
            <summary>
            The next available time when a WebAPI request can be made, in seconds
            </summary>
        </member>
        <member name="P:Sony.NP.ServerErrorManaged.HttpStatusCode">
            <summary>
            The HTTP status code that was returned along with the JSON error
            </summary>
        </member>
        <member name="T:Sony.NP.PendingAsyncResponseList">
            <summary>
            Contains a list of pending asynchronous requests.
            </summary>
        </member>
        <member name="T:Sony.NP.Friends">
            <summary>
            Friend service related functionality
            </summary>
        </member>
        <member name="M:Sony.NP.Friends.GetFriends(Sony.NP.Friends.GetFriendsRequest,Sony.NP.Friends.FriendsResponse)">
            <summary>
            Get a list of a users friends
            </summary>
            <param name="request">The parameters required to obtain a list of the users friends</param>
            <param name="response">The list of friends</param>
            <returns>If the operation is asynchronous, the function provides the request Id.</returns>
            <exception cref="T:Sony.NP.NpToolkitException">Will throw an exception either when the request data is invalid, or an internal error has occured inside the NpToolkit plug-in.</exception>
        </member>
        <member name="M:Sony.NP.Friends.GetFriendsOfFriends(Sony.NP.Friends.GetFriendsOfFriendsRequest,Sony.NP.Friends.FriendsOfFriendsResponse)">
            <summary>
            Get friends of friends.
            </summary>
            <param name="request">Parameters required to retrieve friends of friends.</param>
            <param name="response">The friends of the requested friends.</param>
            <returns>If the operation is asynchronous, the function provides the request Id.</returns>
            <exception cref="T:Sony.NP.NpToolkitException">Will throw an exception either when the request data is invalid, or an internal error has occured inside the NpToolkit plug-in.</exception>
        </member>
        <member name="M:Sony.NP.Friends.GetBlockedUsers(Sony.NP.Friends.GetBlockedUsersRquest,Sony.NP.Friends.BlockedUsersResponse)">
            <summary>
            Get a list of blocked users.
            </summary>
            <param name="request">Parameters required to retrieve a list of blocked users.</param>
            <param name="response">The list of users that have been blocked.</param>
            <returns>If the operation is asynchronous, the function provides the request Id.</returns>
            <exception cref="T:Sony.NP.NpToolkitException">Will throw an exception either when the request data is invalid, or an internal error has occured inside the NpToolkit plug-in.</exception>
        </member>
        <member name="M:Sony.NP.Friends.DisplayFriendRequestDialog(Sony.NP.Friends.DisplayFriendRequestDialogRequest,Sony.NP.Core.EmptyResponse)">
            <summary>
            Display a dialog where a local user can send a friend request to a target PlayStation Network user
            </summary>
            <param name="request">Target user to display in the friend request dialog.</param>
            <param name="response">This response does not have data, only return code.</param>
            <returns>If the operation is asynchronous, the function provides the request Id.</returns>
            <exception cref="T:Sony.NP.NpToolkitException">Will throw an exception either when the request data is invalid, or an internal error has occured inside the NpToolkit plug-in.</exception>
        </member>
        <member name="M:Sony.NP.Friends.DisplayBlockUserDialog(Sony.NP.Friends.DisplayBlockUserDialogRequest,Sony.NP.Core.EmptyResponse)">
            <summary>
            Display a dialog to block another PlayStation Network user.
            </summary>
            <param name="request">The target user to display in the block user dialog.</param>
            <param name="response">This response does not have data, only return code</param>
            <returns>If the operation is asynchronous, the function provides the request Id.</returns>
            <exception cref="T:Sony.NP.NpToolkitException">Will throw an exception either when the request data is invalid, or an internal error has occured inside the NpToolkit plug-in.</exception>
        </member>
        <member name="T:Sony.NP.Friends.Friend">
            <summary>
            Represents a users friend. Contains online profile and current presence information.
            </summary>
        </member>
        <member name="M:Sony.NP.Friends.Friend.#ctor">
            <summary>
            Construct friend object
            </summary>
        </member>
        <member name="M:Sony.NP.Friends.Friend.ToString">
            <summary>
            Generate string from profile and presence data
            </summary>
            <returns>Profile and presence string.</returns>
        </member>
        <member name="P:Sony.NP.Friends.Friend.Profile">
            <summary>
            The friends profile information. 'About me', 'languages used' are not returned
            </summary>
        </member>
        <member name="P:Sony.NP.Friends.Friend.Presence">
            <summary>
            The friends presence information
            </summary>
        </member>
        <member name="T:Sony.NP.Friends.FriendsRetrievalModes">
            <summary>
            The mode in which the list of friends will be retrieved in
            </summary>
        </member>
        <member name="F:Sony.NP.Friends.FriendsRetrievalModes.invalid">
            <summary>Value not set </summary>
        </member>
        <member name="F:Sony.NP.Friends.FriendsRetrievalModes.all">
            <summary>Retrieve a complete list of friends</summary>
        </member>
        <member name="F:Sony.NP.Friends.FriendsRetrievalModes.online">
            <summary>Retrieve friends which are currently online</summary>
        </member>
        <member name="F:Sony.NP.Friends.FriendsRetrievalModes.inContext">
            <summary>Retrieve a list of friends who are currently playing the same game</summary>
        </member>
        <member name="F:Sony.NP.Friends.FriendsRetrievalModes.tryCached">
            <summary>Retrieve a cached list of all friends. If cache is unavailable, the complete list will be retrieved from the server</summary>
        </member>
        <member name="T:Sony.NP.Friends.GetFriendsRequest">
            <summary>
            Parameters required to retrieve a list of a users friends
            </summary>
        </member>
        <member name="M:Sony.NP.Friends.GetFriendsRequest.#ctor">
            <summary>
            Construct friends request parameters
            </summary>
        </member>
        <member name="P:Sony.NP.Friends.GetFriendsRequest.Mode">
            <summary>
            The specific mode for the request
            </summary>
        </member>
        <member name="P:Sony.NP.Friends.GetFriendsRequest.Limit">
            <summary>
            The number of friends to be requested in a single call. If set to 0, all friends will be retrieved and offset will be ignored as well
            </summary>
        </member>
        <member name="P:Sony.NP.Friends.GetFriendsRequest.Offset">
            <summary>
            The offset into the list of the users friends at which to start retrieving friends
            </summary>
        </member>
        <member name="T:Sony.NP.Friends.FriendsResponse">
            <summary>
            An array of the users friends
            </summary>
        </member>
        <member name="M:Sony.NP.Friends.FriendsResponse.ReadResult(System.UInt32,Sony.NP.FunctionTypes,Sony.NP.RequestBase)">
            <summary>
            Read the response data from the plug-in
            </summary>
            <param name="id">The request id.</param>
            <param name="apiCalled">The API called.</param>
            <param name="request">The Request object.</param>
        </member>
        <member name="P:Sony.NP.Friends.FriendsResponse.Friends">
            <summary>
            List of the users friends
            </summary>
        </member>
        <member name="T:Sony.NP.Friends.FriendsOfFriend">
            <summary>
            A friend along with a list of their friends
            </summary>
        </member>
        <member name="M:Sony.NP.Friends.FriendsOfFriend.#ctor">
            <summary>
            Initialise empty friends of friend list
            </summary>
        </member>
        <member name="P:Sony.NP.Friends.FriendsOfFriend.OriginalFriend">
            <summary>
            The friend of the requested user
            </summary>
        </member>
        <member name="P:Sony.NP.Friends.FriendsOfFriend.Users">
            <summary>
            The friends of the user friend
            </summary>
        </member>
        <member name="T:Sony.NP.Friends.GetFriendsOfFriendsRequest">
            <summary>
            Parameters required to retrieve friends of a users friends
            </summary>
        </member>
        <member name="F:Sony.NP.Friends.GetFriendsOfFriendsRequest.MAX_ACCOUNT_IDS">
            <summary>The maximum number of accounts that can be sent per request</summary>
        </member>
        <member name="M:Sony.NP.Friends.GetFriendsOfFriendsRequest.#ctor">
            <summary>
            Construct friends of friends parameters
            </summary>
        </member>
        <member name="P:Sony.NP.Friends.GetFriendsOfFriendsRequest.AccountIds">
            <summary>
            The account IDs of the user's friends.
            </summary>
        </member>
        <member name="T:Sony.NP.Friends.FriendsOfFriendsResponse">
            <summary>
            A list of friends of friends
            </summary>
        </member>
        <member name="M:Sony.NP.Friends.FriendsOfFriendsResponse.ReadResult(System.UInt32,Sony.NP.FunctionTypes,Sony.NP.RequestBase)">
            <summary>
            Read the response data from the plug-in
            </summary>
            <param name="id">The request id.</param>
            <param name="apiCalled">The API called.</param>
            <param name="request">The Request object.</param>
        </member>
        <member name="P:Sony.NP.Friends.FriendsOfFriendsResponse.FriendsOfFriends">
            <summary>
            Friends of friends of a user
            </summary>
        </member>
        <member name="T:Sony.NP.Friends.BlockedUsersRetrievalMode">
            <summary>
            The mode in which blocked users will be retrieved
            </summary>
        </member>
        <member name="F:Sony.NP.Friends.BlockedUsersRetrievalMode.invalid">
            <summary>Value not set</summary>
        </member>
        <member name="F:Sony.NP.Friends.BlockedUsersRetrievalMode.all">
            <summary>Will retrieve blocked user list</summary>
        </member>
        <member name="F:Sony.NP.Friends.BlockedUsersRetrievalMode.tryCached">
            <summary>Retrieve a cached list of all blocked users. If cache is unavailable, the complete list will be retrieved from the server</summary>
        </member>
        <member name="T:Sony.NP.Friends.GetBlockedUsersRquest">
            <summary>
            Parameters required to retrieve a users block list
            </summary>
        </member>
        <member name="M:Sony.NP.Friends.GetBlockedUsersRquest.#ctor">
            <summary>
            Construct blocked users parameters
            </summary>
        </member>
        <member name="P:Sony.NP.Friends.GetBlockedUsersRquest.Mode">
            <summary>
            The specific mode for the request
            </summary>
        </member>
        <member name="P:Sony.NP.Friends.GetBlockedUsersRquest.Limit">
            <summary>
            The number of users in block list to be requested in a single call. If this is set to 0, then all blocked users are retrieved
            </summary>
        </member>
        <member name="P:Sony.NP.Friends.GetBlockedUsersRquest.Offset">
            <summary>
            The offset into the list of the blocked users at which to start retrieving another entry
            </summary>
        </member>
        <member name="T:Sony.NP.Friends.BlockedUsersResponse">
            <summary>
            A list of users that have been blocked
            </summary>
        </member>
        <member name="M:Sony.NP.Friends.BlockedUsersResponse.ReadResult(System.UInt32,Sony.NP.FunctionTypes,Sony.NP.RequestBase)">
            <summary>
            Read the response data from the plug-in
            </summary>
            <param name="id">The request id.</param>
            <param name="apiCalled">The API called.</param>
            <param name="request">The Request object.</param>
        </member>
        <member name="P:Sony.NP.Friends.BlockedUsersResponse.Users">
            <summary>
            The list of blocked users
            </summary>
        </member>
        <member name="T:Sony.NP.Friends.DisplayFriendRequestDialogRequest">
            <summary>
            Parameters required to display a dialog where the user can send a friend request
            </summary>
        </member>
        <member name="M:Sony.NP.Friends.DisplayFriendRequestDialogRequest.#ctor">
            <summary>
             Construct Display Friend Request Dialog parameters
            </summary>
        </member>
        <member name="P:Sony.NP.Friends.DisplayFriendRequestDialogRequest.TargetUser">
            <summary>
            The user to send a friend request to
            </summary>
        </member>
        <member name="T:Sony.NP.Friends.DisplayBlockUserDialogRequest">
            <summary>
            Parameters required to display a dialog where a user can block another user
            </summary>
        </member>
        <member name="M:Sony.NP.Friends.DisplayBlockUserDialogRequest.#ctor">
            <summary>
             Construct Display Block User Dialog parameters
            </summary>
        </member>
        <member name="P:Sony.NP.Friends.DisplayBlockUserDialogRequest.TargetUser">
            <summary>
            The user to send a friend request to
            </summary>
        </member>
        <member name="T:Sony.NP.Friends.FriendListUpdateEvents">
            <summary>
            Event type when a friend notification is received
            </summary>
        </member>
        <member name="F:Sony.NP.Friends.FriendListUpdateEvents.none">
            <summary>No states have changed. This should never happen as otherwise there would be no notification</summary>
        </member>
        <member name="F:Sony.NP.Friends.FriendListUpdateEvents.friendAdded">
            <summary>A friend has been added to the users friend list</summary>
        </member>
        <member name="F:Sony.NP.Friends.FriendListUpdateEvents.friendRemoved">
            <summary>A friend has been removed from the users friend list</summary>
        </member>
        <member name="F:Sony.NP.Friends.FriendListUpdateEvents.friendOnlineStatusChanged">
            <summary>The online status of a friend has changed</summary>
        </member>
        <member name="T:Sony.NP.Friends.FriendListUpdateResponse">
            <summary>
            Notification that is sent to the NP Toolkit callback when a users friend list has changed
            </summary>
        </member>
        <member name="M:Sony.NP.Friends.FriendListUpdateResponse.ReadResult(System.UInt32,Sony.NP.FunctionTypes,Sony.NP.RequestBase)">
            <summary>
            Read the response data from the plug-in
            </summary>
            <param name="id">The request id.</param>
            <param name="apiCalled">The API called.</param>
            <param name="request">The Request object.</param>
        </member>
        <member name="P:Sony.NP.Friends.FriendListUpdateResponse.LocalUpdatedUser">
            <summary>
            IDs of user whose friends list was updated
            </summary>
        </member>
        <member name="P:Sony.NP.Friends.FriendListUpdateResponse.RemoteUser">
            <summary>
            The friend that was added or removed
            </summary>
        </member>
        <member name="P:Sony.NP.Friends.FriendListUpdateResponse.UserId">
            <summary>
            The user ID of the user whose state has changed
            </summary>
        </member>
        <member name="P:Sony.NP.Friends.FriendListUpdateResponse.EventType">
            <summary>
            Specifies whether a friend has been added or removed
            </summary>
        </member>
        <member name="T:Sony.NP.Friends.BlocklistUpdateResponse">
            <summary>
            Notification that is sent to the NP Toolkit callback in the event where a user has been added or removed from the block list
            </summary>
        </member>
        <member name="M:Sony.NP.Friends.BlocklistUpdateResponse.ReadResult(System.UInt32,Sony.NP.FunctionTypes,Sony.NP.RequestBase)">
            <summary>
            Read the response data from the plug-in
            </summary>
            <param name="id">The request id.</param>
            <param name="apiCalled">The API called.</param>
            <param name="request">The Request object.</param>
        </member>
        <member name="P:Sony.NP.Friends.BlocklistUpdateResponse.LocalUpdatedUser">
            <summary>
            IDs of user whose friends list was updated
            </summary>
        </member>
        <member name="P:Sony.NP.Friends.BlocklistUpdateResponse.UserId">
            <summary>
            The user ID of the user whose state has changed
            </summary>
        </member>
        <member name="T:Sony.NP.Main">
            <summary>
            Main entry point to the NpToolkit plug-in and initialization
            </summary>
        </member>
        <member name="M:Sony.NP.Main.Initialize(Sony.NP.InitToolkit)">
            <summary>
            Initialise the NpToolkit2 system
            </summary>
            <param name="initParams">The initialisation paramaters.</param>
            <exception cref="T:Sony.NP.NpToolkitException">Will throw an exception either when the request data is invalid, or an internal error has occured inside the NpToolkit plug-in.</exception>
        </member>
        <member name="M:Sony.NP.Main.Update">
            <summary>
            Update function
            </summary>
        </member>
        <member name="M:Sony.NP.Main.ShutDown">
            <summary>
            Shutdown the NpToolkit2 system
            </summary>
        </member>
        <member name="M:Sony.NP.Main.GetPendingRequests">
            <summary>
            Get the pending async requests list. This takes a copy of the list so it is safe to enumerate the list.
            </summary>
            <returns>A list of pending async requests.</returns>
        </member>
        <member name="M:Sony.NP.Main.AbortRequest(System.UInt32)">
            <summary>
            Abort a pending request. A pending request at the top of the list may not abort as processing the request may have already started.
            </summary>
            <param name="npRequestId">The request to abort.</param>
            <returns>Returns true is the request is in the pending list, otherwise returns false.</returns>
            <exception cref="T:Sony.NP.NpToolkitException">Will throw an exception either when the request data is invalid, or an internal error has occured inside the NpToolkit plug-in.</exception>
        </member>
        <member name="E:Sony.NP.Main.OnAsyncEvent">
            <summary>
            The event called when an async request has been completed or a notification
            </summary>
        </member>
        <member name="T:Sony.NP.Main.EventHandler">
            <summary>
            Delegate event handler defining the callback event
            </summary>
            <param name="npEvent"></param>
        </member>
        <member name="T:Sony.NP.Matching">
            <summary>
            Matching service related functionality.
            </summary>
        </member>
        <member name="F:Sony.NP.Matching.INVALID_ROOM_MEMBER_ID">
            <summary>
            The invalid room member id
            </summary>
        </member>
        <member name="M:Sony.NP.Matching.SetInitConfiguration(Sony.NP.Matching.SetInitConfigurationRequest,Sony.NP.Core.EmptyResponse)">
            <summary>
            This function is used to set the metadata of the attributes the application will use. This is the first function that needs to be called when using the Matching service. 
            </summary> 
            <remarks>
            This only needs to be called once and is not dependent on the user. It does not need to be called seperately for each user. 
            </remarks>
            <param name="request">The members required to understand the attributes configuration of the Matching service </param>
            <param name="response">This response does not have data, only return code</param>
            <returns>If the operation is asynchronous, the function provides the request Id.</returns>
            <exception cref="T:Sony.NP.NpToolkitException">Will throw an exception either when the request data is invalid, or an internal error has occured inside the NpToolkit plug-in.</exception>
        </member>
        <member name="M:Sony.NP.Matching.GetWorlds(Sony.NP.Matching.GetWorldsRequest,Sony.NP.Matching.WorldsResponse)">
            <summary>
            This function is used to get overall information of the Matching server where the matching context of the calling user is set.
            </summary>
            <param name="request">The information required to obtain the worlds information.</param>
            <param name="response">This response contains the return code and the existing worlds, with extra information of each one.</param>
            <returns>If the operation is asynchronous, the function provides the request Id.</returns>
            <exception cref="T:Sony.NP.NpToolkitException">Will throw an exception either when the request data is invalid, or an internal error has occured inside the NpToolkit plug-in.</exception>
        </member>
        <member name="M:Sony.NP.Matching.CreateRoom(Sony.NP.Matching.CreateRoomRequest,Sony.NP.Matching.RoomResponse)">
            <summary>
            This function is used to create a room and join it as the owner.
            </summary> 
            <remarks>
            This only needs to be called once and is not dependent on the user. It does not need to be called seperately for each user. 
            </remarks>
            <param name="request"> The information required to create a room.</param>
            <param name="response"> This response contains the return code and the room created. The object should be kept persistently at application side.</param>
            <returns>If the operation is asynchronous, the function provides the request Id.</returns>
            <exception cref="T:Sony.NP.NpToolkitException">Will throw an exception either when the request data is invalid, or an internal error has occured inside the NpToolkit plug-in.</exception>
        </member>
        <member name="M:Sony.NP.Matching.LeaveRoom(Sony.NP.Matching.LeaveRoomRequest,Sony.NP.Core.EmptyResponse)">
            <summary>
            This function is used to abandon the room the user is in.
            </summary>
            <remarks>
            The calling user is in a room
            </remarks>
            <param name="request">The information to leave the room </param>
            <param name="response">This response does not have data, only return code</param>
            <returns>If the operation is asynchronous, the function provides the request Id.</returns>
            <exception cref="T:Sony.NP.NpToolkitException">Will throw an exception either when the request data is invalid, or an internal error has occured inside the NpToolkit plug-in.</exception>
        </member>
        <member name="M:Sony.NP.Matching.SearchRooms(Sony.NP.Matching.SearchRoomsRequest,Sony.NP.Matching.RoomsResponse)">
            <summary>
            This function searches for rooms on a world matching the conditions specified on the request, and is able to post-process the search if specified.
            </summary>
            <param name="request">The configuration to search the required rooms .</param>
            <param name="response">This response contains the return code and the rooms found (or joined/created, in case <c>quickJoin</c>/<c>createIfNotFound</c> are specified).</param>
            <returns>If the operation is asynchronous, the function provides the request Id.</returns>
            <exception cref="T:Sony.NP.NpToolkitException">Will throw an exception either when the request data is invalid, or an internal error has occured inside the NpToolkit plug-in.</exception>
        </member>
        <member name="M:Sony.NP.Matching.JoinRoom(Sony.NP.Matching.JoinRoomRequest,Sony.NP.Matching.RoomResponse)">
            <summary>
            This function is used to join a room and become a member.
            </summary>
            <param name="request">The information required to join a room </param>
            <param name="response">This response contains the return code and the room joined. The object should be kept persistently at application side</param>
            <returns>If the operation is asynchronous, the function provides the request Id.</returns>
            <exception cref="T:Sony.NP.NpToolkitException">Will throw an exception either when the request data is invalid, or an internal error has occured inside the NpToolkit plug-in.</exception>
        </member>
        <member name="M:Sony.NP.Matching.GetRoomPingTime(Sony.NP.Matching.GetRoomPingTimeRequest,Sony.NP.Matching.GetRoomPingTimeResponse)">
            <summary>
            This function provides round trip time (or ping time) information from the application to a room.
            </summary>
            <param name="request">The information required to obtain the ping time  </param>
            <param name="response">This response contains the return codeand the RTT to the room asked.</param>
            <returns>If the operation is asynchronous, the function provides the request Id.</returns>
            <exception cref="T:Sony.NP.NpToolkitException">Will throw an exception either when the request data is invalid, or an internal error has occured inside the NpToolkit plug-in.</exception>
        </member>
        <member name="M:Sony.NP.Matching.KickOutRoomMember(Sony.NP.Matching.KickOutRoomMemberRequest,Sony.NP.Core.EmptyResponse)">
            <summary>
            This function is used to expulse a member from the room.
            </summary>
            <param name="request">The information to kick out the room member </param>
            <param name="response">This response does not have data, only return code.</param>
            <returns>If the operation is asynchronous, the function provides the request Id.</returns>
            <exception cref="T:Sony.NP.NpToolkitException">Will throw an exception either when the request data is invalid, or an internal error has occured inside the NpToolkit plug-in.</exception>
        </member>
        <member name="M:Sony.NP.Matching.SendRoomMessage(Sony.NP.Matching.SendRoomMessageRequest,Sony.NP.Core.EmptyResponse)">
            <summary>
            This function sends a message to members of a room.
            </summary>
            <param name="request">The message to be sent to the room members. </param>
            <param name="response">This response does not have data, only return code. </param>
            <returns>If the operation is asynchronous, the function provides the request Id. </returns>
            <exception cref="T:Sony.NP.NpToolkitException">Will throw an exception either when the request data is invalid, or an internal error has occured inside the NpToolkit plug-in.</exception>
        </member>
        <member name="M:Sony.NP.Matching.GetAttributes(Sony.NP.Matching.GetAttributesRequest,Sony.NP.Matching.RefreshRoomResponse)">
            <summary>
            This function obtains attributes related to a room or member directly from the server.
            </summary>
            <remarks>
            This function is provided in case the notification system is not enough or the application prefers to be designed to request attributes when desired. It is recommended to use notifications whenever possible to keep the room information always up to date.
            </remarks>
            <param name="request">The information of the attributes to obtain. </param>
            <param name="response">This response contains the return code and the information updated to be merged at application side</param>
            <returns>If the operation is asynchronous, the function provides the request Id.</returns>
            <exception cref="T:Sony.NP.NpToolkitException">Will throw an exception either when the request data is invalid, or an internal error has occured inside the NpToolkit plug-in.</exception>
        </member>
        <member name="M:Sony.NP.Matching.GetData(Sony.NP.Matching.GetDataRequest,Sony.NP.Matching.GetDataResponse)">
            <summary>
            This function is used to retrieve the data (modifiable or non-modifiable) of the session bound to a room.
            </summary>
            <param name="request">The identification of the data to be obtained .</param>
            <param name="response">This response contains the return code and the requested data.</param>
            <returns>If the operation is asynchronous, the function provides the request Id.</returns>
            <exception cref="T:Sony.NP.NpToolkitException">Will throw an exception either when the request data is invalid, or an internal error has occured inside the NpToolkit plug-in.</exception>
        </member>
        <member name="M:Sony.NP.Matching.SendInvitation(Sony.NP.Matching.SendInvitationRequest,Sony.NP.Core.EmptyResponse)">
            <summary>
            This function sends a system invitation to another user to join the room and bound Session of the calling user.
            </summary>
            <param name="request">The invitation to be sent.</param>
            <param name="response">This response does not have data, only return code</param>
            <returns>If the operation is asynchronous, the function provides the request Id.</returns>
            <exception cref="T:Sony.NP.NpToolkitException">Will throw an exception either when the request data is invalid, or an internal error has occured inside the NpToolkit plug-in.</exception>
        </member>
        <member name="M:Sony.NP.Matching.SetRoomInfo(Sony.NP.Matching.SetRoomInfoRequest,Sony.NP.Core.EmptyResponse)">
            <summary>
            This function is used to modify information of the current room or member.
            </summary>
            <param name="request">The members to be updated in the current room.</param>
            <param name="response">This response does not have data, only return code.</param>
            <returns>If the operation is asynchronous, the function provides the request Id.</returns>
            <exception cref="T:Sony.NP.NpToolkitException">Will throw an exception either when the request data is invalid, or an internal error has occured inside the NpToolkit plug-in.</exception>
        </member>
        <member name="T:Sony.NP.Matching.AttributeType">
            <summary>
             Enum listing the different types the value of an attribute can have.
            </summary>
            <remarks>
            Enum listing the different types the value of an attribute
            can have. The value can be, either an integer value or a
            binary value (in this case, the size will be determined by
            the metadata information).
            </remarks>
        </member>
        <member name="F:Sony.NP.Matching.AttributeType.Invalid">
            <summary> Invalid type. This means the attribute type is not set. It should not be returned by APIs </summary>
        </member>
        <member name="F:Sony.NP.Matching.AttributeType.Integer">
            <summary> Integer type. The attribute is an 8 bytes integer </summary>
        </member>
        <member name="F:Sony.NP.Matching.AttributeType.Binary">
            <summary> Binary type. The attribute is a buffer. The size of the buffer is specified as part of the metadata </summary>
        </member>
        <member name="T:Sony.NP.Matching.AttributeScope">
            <summary>
            Enum listing the different scopes of an attribute.
            </summary>
            <remarks>
            Enum listing the different scopes of an attribute. Attributes
            can be either room attributes, where they will describe
            information about a room, or member attributes, where they
            will describe information about the member they belong.
            </remarks>
        </member>
        <member name="F:Sony.NP.Matching.AttributeScope.Invalid">
            <summary> Invalid scope. This means the attribute scope is not set. It should not be returned by APIs </summary>
        </member>
        <member name="F:Sony.NP.Matching.AttributeScope.Room">
            <summary> The attribute belongs to the room. There will be only one attribute with that name on the room </summary>
        </member>
        <member name="F:Sony.NP.Matching.AttributeScope.Member">
            <summary> The attribute belongs to a member of the room. Each member will have only one attribute with that name </summary>
        </member>
        <member name="T:Sony.NP.Matching.RoomAttributeVisibility">
            <summary>
            This enum lists the visibility of a room attribute.
            </summary>
        </member>
        <member name="F:Sony.NP.Matching.RoomAttributeVisibility.Invalid">
            <summary> Invalid attribute room visibility. This means the visibility is not set. It should not be returned by APIs </summary>
        </member>
        <member name="F:Sony.NP.Matching.RoomAttributeVisibility.Internal">
            <summary> The attribute is only visible to members that are part of the room </summary>
        </member>
        <member name="F:Sony.NP.Matching.RoomAttributeVisibility.External">
            <summary> The attribute is visible to members inside the rooms and users outside. It is returned in searches, but it cannot be used as a clause on a search  </summary>
        </member>
        <member name="F:Sony.NP.Matching.RoomAttributeVisibility.Search">
            <summary> The attribute is visible to members inside the rooms and users outside. It can be used as input in searches as well  </summary>
        </member>
        <member name="T:Sony.NP.Matching.RoomVisibility">
            <summary>
            The different degrees of visibility of a room.
            </summary>
        </member>
        <member name="F:Sony.NP.Matching.RoomVisibility.Invalid">
            <summary> Invalid visibility. This is the default value. In case the visibility does not want to be modified when setting new information for the room, this value will identify the non-modification.</summary>
        </member>
        <member name="F:Sony.NP.Matching.RoomVisibility.PublicRoom">
            <summary> The room is public. It is available on searches and can be joined by any user.</summary>
        </member>
        <member name="F:Sony.NP.Matching.RoomVisibility.PrivateRoom">
            <summary> The room is private. It is not available on searches.</summary>
        </member>
        <member name="F:Sony.NP.Matching.RoomVisibility.ReserveSlots">
            <summary> The room is public but some slots will be private and only accessible for users with password. </summary>
        </member>
        <member name="T:Sony.NP.Matching.RoomMigrationType">
            <summary>
            The type of room migration
            </summary>
        </member>
        <member name="F:Sony.NP.Matching.RoomMigrationType.OwnerBind">
            <summary> With onwerBind, the session will be deleted when the creator leaves. </summary>
        </member>
        <member name="F:Sony.NP.Matching.RoomMigrationType.OwnerMigration">
            <summary> With ownerMigration, the session will be deleted when the joined users reaches 0. </summary>
        </member>
        <member name="T:Sony.NP.Matching.TopologyType">
            <summary>
            The different types of configurations the network can have in terms of topology.
            </summary>
        </member>
        <member name="F:Sony.NP.Matching.TopologyType.Invalid">
            <summary> Invalid topology. This is the default value. In case the topology does not want to be modified when setting new information for the room, this value will identify the non-modification. </summary>
        </member>
        <member name="F:Sony.NP.Matching.TopologyType.None">
            <summary> The topology should be moved to none. In this case, a topology will be selected by the system. </summary>
        </member>
        <member name="F:Sony.NP.Matching.TopologyType.Mesh">
            <summary> Mesh topology. Every member can connect directly to any other member inside a room. </summary>
        </member>
        <member name="F:Sony.NP.Matching.TopologyType.Star">
            <summary> Star topology. All members can connect only to one member (the host). That member will always be the room owner. </summary>
        </member>
        <member name="T:Sony.NP.Matching.AttributeMetadata">
            <summary>
            This represents metadata information of an attribute. Use <see cref="M:Sony.NP.Matching.AttributeMetadata.CreateIntegerAttribute(System.String,Sony.NP.Matching.AttributeScope,Sony.NP.Matching.RoomAttributeVisibility)"/> or <see cref="M:Sony.NP.Matching.AttributeMetadata.CreateBinaryAttribute(System.String,Sony.NP.Matching.AttributeScope,Sony.NP.Matching.RoomAttributeVisibility,System.UInt32)"/> to create and initialise an attribute.
            </summary>
        </member>
        <member name="F:Sony.NP.Matching.AttributeMetadata.MAX_SIZE_NAME">
            <summary>
            The maximum size of the name an attribute can have
            </summary>
        </member>
        <member name="M:Sony.NP.Matching.AttributeMetadata.CreateIntegerAttribute(System.String,Sony.NP.Matching.AttributeScope,Sony.NP.Matching.RoomAttributeVisibility)">
            <summary>
            Creates an integer type attribute.
            </summary>
            <param name="name">The name of the attribute. It is its identifier. It must be set as input on all APIs taking attributes as data members of their requests.</param>
            <param name="scope">The scope of the attribute.</param>
            <param name="roomAttributeVisibility">If the <see cref="F:Sony.NP.Matching.AttributeMetadata.scope"/> is <see cref="F:Sony.NP.Matching.AttributeScope.Room"/>, the visibility of the room attribute, otherwise ignored.</param>
            <returns>A new attribute initialised as an <see cref="F:Sony.NP.Matching.AttributeType.Integer"/> type.</returns>
            <exception cref="T:Sony.NP.NpToolkitException">Will throw an exception if the string is more than <see cref="F:Sony.NP.Matching.AttributeMetadata.MAX_SIZE_NAME"/> characters.</exception>
            <exception cref="T:Sony.NP.NpToolkitException">Will throw an exception if the <see cref="F:Sony.NP.Matching.AttributeMetadata.scope"/> is <see cref="F:Sony.NP.Matching.AttributeScope.Invalid"/>.</exception>
            <exception cref="T:Sony.NP.NpToolkitException">Will throw an exception if the <see cref="F:Sony.NP.Matching.AttributeMetadata.scope"/> is <see cref="F:Sony.NP.Matching.AttributeScope.Room"/> and <see cref="F:Sony.NP.Matching.AttributeMetadata.roomAttributeVisibility"/> is <see cref="F:Sony.NP.Matching.RoomAttributeVisibility.Invalid"/>.</exception>
        </member>
        <member name="M:Sony.NP.Matching.AttributeMetadata.CreateBinaryAttribute(System.String,Sony.NP.Matching.AttributeScope,Sony.NP.Matching.RoomAttributeVisibility,System.UInt32)">
            <summary>
             Creates a binary type attribute.
            </summary>
            <param name="name">The name of the attribute. It is its identifier. It must be set as input on all APIs taking attributes as data members of their requests.</param>
            <param name="scope">The scope of the attribute.</param>
            <param name="roomAttributeVisibility">If the <see cref="F:Sony.NP.Matching.AttributeMetadata.scope"/> is <see cref="F:Sony.NP.Matching.AttributeScope.Room"/>, the visibility of the room attribute, otherwise ignored.</param>
            <param name="size"></param>
            <returns>A new attribute initialised as an <see cref="F:Sony.NP.Matching.AttributeType.Binary"/> type.</returns>
            <exception cref="T:Sony.NP.NpToolkitException">Will throw an exception if the string is more than <see cref="F:Sony.NP.Matching.AttributeMetadata.MAX_SIZE_NAME"/> characters.</exception>
            <exception cref="T:Sony.NP.NpToolkitException">Will throw an exception if the <see cref="F:Sony.NP.Matching.AttributeMetadata.scope"/> is <see cref="F:Sony.NP.Matching.AttributeScope.Invalid"/>.</exception>
            <exception cref="T:Sony.NP.NpToolkitException">Will throw an exception if the <see cref="F:Sony.NP.Matching.AttributeMetadata.scope"/> is <see cref="F:Sony.NP.Matching.AttributeScope.Room"/> and <see cref="F:Sony.NP.Matching.AttributeMetadata.roomAttributeVisibility"/> is <see cref="F:Sony.NP.Matching.RoomAttributeVisibility.Invalid"/>.</exception>
        </member>
        <member name="P:Sony.NP.Matching.AttributeMetadata.Name">
            <summary>
            The name of the attribute. It is its identifier. Defined by application on <see cref="M:Sony.NP.Matching.SetInitConfiguration(Sony.NP.Matching.SetInitConfigurationRequest,Sony.NP.Core.EmptyResponse)"/>. It must be set as input on all APIs taking attributes as data members of their requests
            </summary>
        </member>
        <member name="P:Sony.NP.Matching.AttributeMetadata.Type">
            <summary>
            The type of the attribute. Defined by application on <see cref="M:Sony.NP.Matching.SetInitConfiguration(Sony.NP.Matching.SetInitConfigurationRequest,Sony.NP.Core.EmptyResponse)"/>. It can be blank for the rest of inputs. Responses will always set it
            </summary>
        </member>
        <member name="P:Sony.NP.Matching.AttributeMetadata.Scope">
            <summary>
            The scope of the attribute. Defined by application on <see cref="M:Sony.NP.Matching.SetInitConfiguration(Sony.NP.Matching.SetInitConfigurationRequest,Sony.NP.Core.EmptyResponse)"/>. It can be blank for the rest of inputs. Responses will always set it
            </summary>
        </member>
        <member name="P:Sony.NP.Matching.AttributeMetadata.RoomVisibility">
            <summary>
            If the <see cref="P:Sony.NP.Matching.AttributeMetadata.Scope"/> is <see cref="F:Sony.NP.Matching.AttributeScope.Room"/>, the visibility of the room attribute. Defined by application on <see cref="M:Sony.NP.Matching.SetInitConfiguration(Sony.NP.Matching.SetInitConfigurationRequest,Sony.NP.Core.EmptyResponse)"/>. It can be blank for the rest of inputs. Responses will set it when applicable	
            </summary>
        </member>
        <member name="P:Sony.NP.Matching.AttributeMetadata.Size">
            <summary>
            The size of the attribute. In case the <see cref="P:Sony.NP.Matching.AttributeMetadata.Type"/> is <see cref="F:Sony.NP.Matching.AttributeType.Binary"/>, defined by application on <see cref="M:Sony.NP.Matching.SetInitConfiguration(Sony.NP.Matching.SetInitConfigurationRequest,Sony.NP.Core.EmptyResponse)"/>. If <see cref="F:Sony.NP.Matching.AttributeType.Integer"/>, the size is always 8. 
            </summary>
        </member>
        <member name="T:Sony.NP.Matching.Attribute">
            <summary>
            A class representing an attribute, containing attribute metadata and a value.
            </summary>
        </member>
        <member name="F:Sony.NP.Matching.Attribute.MAX_SIZE_BIN_VALUE">
            <summary>
            The maximum size a value of any attribute can have. 
            </summary>
        </member>
        <member name="M:Sony.NP.Matching.Attribute.CreateIntegerAttribute(Sony.NP.Matching.AttributeMetadata,System.Int32)">
            <summary>
            Creates an integer attribute.
            </summary>
            <param name="metadata">The interger type metadata.</param>
            <param name="intValue">The integer value of the attribute</param>
            <returns>A new interger attribute.</returns>
            <exception cref="T:Sony.NP.NpToolkitException">Will throw an exception if the value doesn't match the requirements defined in the metadata.</exception>
        </member>
        <member name="M:Sony.NP.Matching.Attribute.CreateBinaryAttribute(Sony.NP.Matching.AttributeMetadata,System.Byte[])">
            <summary>
            Creates a binary attribute, which contains an array of bytes
            </summary>
            <param name="metadata">The binary type meta data.</param>
            <param name="binValue">The byte array value of the attribute.</param>
            <returns>A new binary attribute.</returns>
            <exception cref="T:Sony.NP.NpToolkitException">Will throw an exception if the value doesn't match the requirements defined in the metadata.</exception>
        </member>
        <member name="P:Sony.NP.Matching.Attribute.Metadata">
            <summary>
            Metadata information of each attribute, including size of the attribute
            </summary>
        </member>
        <member name="P:Sony.NP.Matching.Attribute.IntValue">
            <summary>
            If the attribute is of type <see cref="F:Sony.NP.Matching.AttributeType.Integer"/>, the value of the attribute
            </summary>
            <exception cref="T:Sony.NP.NpToolkitException">Will throw an exception if the value doesn't match the requirements defined in the metadata.</exception>
        </member>
        <member name="P:Sony.NP.Matching.Attribute.BinValue">
            <summary>
            If the attribute is of type <see cref="F:Sony.NP.Matching.AttributeType.Binary"/>, the value of the attribute
            </summary>
            <exception cref="T:Sony.NP.NpToolkitException">Will throw an exception if the value doesn't match the requirements defined in the metadata.</exception>
        </member>
        <member name="T:Sony.NP.Matching.SessionImage">
            <summary>
            The image that is shown for a session in the system software
            </summary>
        </member>
        <member name="F:Sony.NP.Matching.SessionImage.IMAGE_PATH_MAX_LEN">
            <summary>
            Maximum length of the image path
            </summary>
        </member>
        <member name="P:Sony.NP.Matching.SessionImage.SessionImgPath">
            <summary>
            The local path of the image to upload to the Session server. e.g. Application.streamingAssetsPath + "/PS4SessionImage.jpg"
            </summary>
            <exception cref="T:Sony.NP.NpToolkitException">Will throw an exception if the path is more than <see cref="F:Sony.NP.Matching.SessionImage.IMAGE_PATH_MAX_LEN"/> characters.</exception>
        </member>
        <member name="T:Sony.NP.Matching.LocalizedSessionInfo">
            <summary>
            Localized session information. The localized session name and status will be displayed based on a users system software language setting.
            </summary>
        </member>
        <member name="F:Sony.NP.Matching.LocalizedSessionInfo.SESSION_NAME_LEN">
            <summary>
            Maximum length of the session name
            </summary>
        </member>
        <member name="F:Sony.NP.Matching.LocalizedSessionInfo.STATUS_LEN">
            <summary>
            Maximum length of the status string
            </summary>
        </member>
        <member name="M:Sony.NP.Matching.LocalizedSessionInfo.#ctor(System.String,System.String,Sony.NP.Core.LanguageCode)">
            <summary>
            Initializes a new instance of the <see cref="T:Sony.NP.Matching.LocalizedSessionInfo"/> class.
            </summary>
        </member>
        <member name="P:Sony.NP.Matching.LocalizedSessionInfo.SessionName">
            <summary>
            The session name. For example: "Team Death Match"
            </summary>
            <exception cref="T:Sony.NP.NpToolkitException">Will throw an exception if the name is more than <see cref="F:Sony.NP.Matching.LocalizedSessionInfo.SESSION_NAME_LEN"/> characters.</exception>
        </member>
        <member name="P:Sony.NP.Matching.LocalizedSessionInfo.Status">
            <summary>
            The status. For example: "Stage 1. Beginner only"
            </summary>
            <exception cref="T:Sony.NP.NpToolkitException">Will throw an exception if the status is more than <see cref="F:Sony.NP.Matching.LocalizedSessionInfo.SESSION_NAME_LEN"/> characters.</exception>
        </member>
        <member name="P:Sony.NP.Matching.LocalizedSessionInfo.LanguageCode">
            <summary>
            The localized session info provided is written in this language. Five digits format (countryCode-language)
            Takes a copy of the code, see remarks for details.
            </summary>
            <remarks>
            Takes a copy of the language code or returns a copy. The language code must be assign explicitly. 
            </remarks>
        </member>
        <member name="T:Sony.NP.Matching.PresenceOptionData">
            <summary>
            Accompanying data when joining or leaving a room or lobby
            </summary>
        </member>
        <member name="F:Sony.NP.Matching.PresenceOptionData.NP_MATCHING2_PRESENCE_OPTION_DATA_SIZE">
            <summary>
            Maximum number of bytes in the data
            </summary>
        </member>
        <member name="P:Sony.NP.Matching.PresenceOptionData.Data">
            <summary>
            Optional presence data. Sets the data as a series of bytes.
            </summary>
            <exception cref="T:Sony.NP.NpToolkitException">Will throw an exception if the array is larger than <see cref="F:Sony.NP.Matching.PresenceOptionData.NP_MATCHING2_PRESENCE_OPTION_DATA_SIZE"/></exception>
        </member>
        <member name="P:Sony.NP.Matching.PresenceOptionData.DataAsString">
            <summary>
             Optional presence data. Sets the data as a ASCII string. String is converted in a series of bytes.
            </summary>
            <exception cref="T:Sony.NP.NpToolkitException">Will throw an exception if the string is more than <see cref="F:Sony.NP.Matching.PresenceOptionData.NP_MATCHING2_PRESENCE_OPTION_DATA_SIZE"/> characters.</exception>
        </member>
        <member name="T:Sony.NP.Matching.SearchOperatorTypes">
            <summary>
            Enum listing the different type of operators that can be specified as a clause on a search.
            </summary>
        </member>
        <member name="F:Sony.NP.Matching.SearchOperatorTypes.Invalid">
            <summary> It should never be used. Default value that specifies an invalid operation </summary>
        </member>
        <member name="F:Sony.NP.Matching.SearchOperatorTypes.Equals">
            <summary> The rooms returned will have the same attribute as the one provided. Valid for integer and binary attributes </summary>
        </member>
        <member name="F:Sony.NP.Matching.SearchOperatorTypes.NotEquals">
            <summary> The rooms returned will have a different attribute than the one provided. Valid for integer and binary attributes </summary>
        </member>
        <member name="F:Sony.NP.Matching.SearchOperatorTypes.LessThan">
            <summary> The rooms returned will have a smaller value on the attribute than the one provided. Valid only for integer attributes </summary>
        </member>
        <member name="F:Sony.NP.Matching.SearchOperatorTypes.LessEqualsThan">
            <summary> The rooms returned will have a smaller or equal value on the attribute than the one provided. Valid only for integer attributes </summary>
        </member>
        <member name="F:Sony.NP.Matching.SearchOperatorTypes.GreaterThan">
            <summary> The rooms returned will have a greater value on the attribute than the one provided. Valid only for integer attributes </summary>
        </member>
        <member name="F:Sony.NP.Matching.SearchOperatorTypes.GreaterEqualsThan">
            <summary> The rooms returned will have a greater or equal value on the attribute than the one provided. Valid only for integer attributes </summary>
        </member>
        <member name="T:Sony.NP.Matching.SearchClause">
            <summary>
            Class used to specify a filter to find rooms.
            </summary>
        </member>
        <member name="P:Sony.NP.Matching.SearchClause.AttributeToCompare">
            <summary>
            The attribute to be used for comparison with the attribute on the room to be searched. Only the value (integer or binary) and the name must be provided
            </summary>
        </member>
        <member name="P:Sony.NP.Matching.SearchClause.OperatorType">
            <summary>
            The operator used to compare the <see cref="P:Sony.NP.Matching.SearchClause.AttributeToCompare"/> the attribute on the server.
            </summary>
        </member>
        <member name="T:Sony.NP.Matching.SetInitConfigurationRequest">
            <summary>
            Request class to specify the attributes configuration in the Matching service.
            </summary>
        </member>
        <member name="F:Sony.NP.Matching.SetInitConfigurationRequest.MAX_ATTRIBUTES">
            <summary>
            Maximum size of the <see cref="P:Sony.NP.Matching.SetInitConfigurationRequest.Attributes"/> array.
            </summary>
        </member>
        <member name="M:Sony.NP.Matching.SetInitConfigurationRequest.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Sony.NP.Matching.SetInitConfigurationRequest"/> class.
            </summary>
        </member>
        <member name="P:Sony.NP.Matching.SetInitConfigurationRequest.Attributes">
            <summary>
            Configuration of the attributes that the Matching service will have
            </summary>
        </member>
        <member name="T:Sony.NP.Matching.GetWorldsRequest">
            <summary>
            Request class used to get a list of worlds from the server.
            </summary>
        </member>
        <member name="M:Sony.NP.Matching.GetWorldsRequest.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Sony.NP.Matching.GetWorldsRequest"/> class.
            </summary>
        </member>
        <member name="T:Sony.NP.Matching.CreateRoomRequest">
            <summary>
            Request class used to specify how a room will be created.
            </summary>
        </member>
        <member name="F:Sony.NP.Matching.CreateRoomRequest.MAX_ATTRIBUTES">
            <summary>
            Maximum size of the <see cref="P:Sony.NP.Matching.CreateRoomRequest.Attributes"/> array.
            </summary>
        </member>
        <member name="F:Sony.NP.Matching.CreateRoomRequest.MAX_SIZE_ROOM_NAME">
            <summary>
            The maximum size the name of a room can have
            </summary>
        </member>
        <member name="F:Sony.NP.Matching.CreateRoomRequest.MAX_SIZE_ROOM_STATUS">
            <summary>
            The maximum size the status of a room can have. The status can only be used by the system
            </summary>
        </member>
        <member name="F:Sony.NP.Matching.CreateRoomRequest.MAX_SIZE_FIXED_DATA">
            <summary>
            The maximum possible size of fixed data set on creation
            </summary>
        </member>
        <member name="F:Sony.NP.Matching.CreateRoomRequest.MAX_SIZE_CHANGEABLE_DATA">
            <summary>
            The maximum possible size of data that can be updated at any time
            </summary>
        </member>
        <member name="F:Sony.NP.Matching.CreateRoomRequest.MAX_SIZE_LOCALIZATIONS">
            <summary>
            The maximum number of localizations for name and status. Localizations will only be used by the system
            </summary>
        </member>
        <member name="M:Sony.NP.Matching.CreateRoomRequest.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Sony.NP.Matching.CreateRoomRequest"/> class.
            </summary>
        </member>
        <member name="P:Sony.NP.Matching.CreateRoomRequest.Attributes">
            <summary>
            The attributes to set. It can include room attributes and member attributes for the owner.
            </summary>
            <exception cref="T:Sony.NP.NpToolkitException">Will throw an exception if the array is larger than <see cref="F:Sony.NP.Matching.CreateRoomRequest.MAX_ATTRIBUTES"/>.</exception>
        </member>
        <member name="P:Sony.NP.Matching.CreateRoomRequest.Name">
            <summary>
            The default name of the room (no localized). The default value is the one that will always be returned to the application
            </summary>
            <exception cref="T:Sony.NP.NpToolkitException">Will throw an exception if the string is more than <see cref="F:Sony.NP.Matching.CreateRoomRequest.MAX_SIZE_ROOM_NAME"/> characters.</exception>
        </member>
        <member name="P:Sony.NP.Matching.CreateRoomRequest.Password">
            <summary>
            A password for reserved slots. Only applicable when the <see cref="P:Sony.NP.Matching.CreateRoomRequest.Visibility"/> is not <see cref="F:Sony.NP.Matching.RoomVisibility.PublicRoom"/>
            </summary>
        </member>
        <member name="P:Sony.NP.Matching.CreateRoomRequest.Visibility">
            <summary>
            The visibility of the room. If private, it won't be returned in searches. If <see cref="P:Sony.NP.Matching.CreateRoomRequest.NumReservedSlots"/> is not 0, it can't be <see cref="F:Sony.NP.Matching.RoomVisibility.PublicRoom"/>
            </summary>
        </member>
        <member name="P:Sony.NP.Matching.CreateRoomRequest.NumReservedSlots">
            <summary>
            The number of slots that will be reserved for the room. Provide a <see cref="P:Sony.NP.Matching.CreateRoomRequest.Password"/> for these slots and do not select as room visibility a public room. 0 by default. If <see cref="P:Sony.NP.Matching.CreateRoomRequest.JoinAllLocalUsers"/> is true, this member must be 0.
            </summary>
        </member>
        <member name="P:Sony.NP.Matching.CreateRoomRequest.FixedData">
            <summary>
            Data that will be stored when the session bound to the room is created. This data can't be modified.
            </summary>
        </member>
        <member name="P:Sony.NP.Matching.CreateRoomRequest.ChangeableData">
            <summary>
            Data that will be stored when the session bound to the room is created. This data can be modified after creation.
            </summary>
            <exception cref="T:Sony.NP.NpToolkitException">Will throw an exception if the array is more than <see cref="F:Sony.NP.Matching.CreateRoomRequest.MAX_SIZE_CHANGEABLE_DATA"/> bytes.</exception>
        </member>
        <member name="P:Sony.NP.Matching.CreateRoomRequest.Status">
            <summary>
            The default status shown in the system. The default name shown in the system is the room name
            </summary>
            <exception cref="T:Sony.NP.NpToolkitException">Will throw an exception if the string is more than <see cref="F:Sony.NP.Matching.CreateRoomRequest.MAX_SIZE_ROOM_STATUS"/> characters.</exception>
        </member>
        <member name="P:Sony.NP.Matching.CreateRoomRequest.Localizations">
            <summary>
            The localized session information shown by the system. Pairs of name and status on dfferent languages. The system will decide the language based on the system language set on the platform
            </summary>
        </member>
        <member name="P:Sony.NP.Matching.CreateRoomRequest.Image">
            <summary>
            The visible image on the system. 
            </summary>
        </member>
        <member name="P:Sony.NP.Matching.CreateRoomRequest.DisplayOnSystem">
            <summary>
            When this member is set to true, the Session will be visible in the system. Otherwise the Session will be private and not visible. True by default
            </summary>
        </member>
        <member name="P:Sony.NP.Matching.CreateRoomRequest.IsSystemJoinable">
            <summary>
            Specifies if users can join from the system. If they can't, it will not be possible to join from the system. When invitations are received, a system Event is triggered with the NpSessionId, that can be given to <see cref="M:Sony.NP.Matching.JoinRoom(Sony.NP.Matching.JoinRoomRequest,Sony.NP.Matching.RoomResponse)"/>. True by default
            </summary>
        </member>
        <member name="P:Sony.NP.Matching.CreateRoomRequest.JoinAllLocalUsers">
            <summary>
            If enabled, all local users will join the just created room at the same time. False by default. It cannot be true if <see cref="P:Sony.NP.Matching.CreateRoomRequest.NumReservedSlots"/> is different than <c>0</c>
            </summary>
        </member>
        <member name="P:Sony.NP.Matching.CreateRoomRequest.IsNatRestricted">
            <summary>
            When set to true, only users who are able to establish a P2P connection will be able to join the room. False by default
            </summary>
        </member>
        <member name="P:Sony.NP.Matching.CreateRoomRequest.OwnershipMigration">
            <summary>
            Select if the room is destroyed when the owner leaves or if the ownership will pass to a different member. Automatic migration is disabled by default
            </summary>
        </member>
        <member name="P:Sony.NP.Matching.CreateRoomRequest.Topology">
            <summary>
            The type of connection to be establish between members. Defaults to <see cref="F:Sony.NP.Matching.TopologyType.None"/>, so the system decides
            </summary>
        </member>
        <member name="P:Sony.NP.Matching.CreateRoomRequest.MaxNumMembers">
            <summary>
            The maximum number of members that the room can have
            </summary>
        </member>
        <member name="P:Sony.NP.Matching.CreateRoomRequest.WorldNumber">
            <summary>
            The world to create the room in. Worlds are created with the SMT tool while configuring the Matching server. It defaults to world 1 
            </summary>
        </member>
        <member name="P:Sony.NP.Matching.CreateRoomRequest.IsCrossplatform">
            <summary>
            Select true If the application is on multiple platforms. False by default
            </summary>
        </member>
        <member name="P:Sony.NP.Matching.CreateRoomRequest.AllowBlockedUsersOfOwner">
            <summary>
             Select true If the blocked users of the owner can enter the room. False by default
            </summary>
        </member>
        <member name="P:Sony.NP.Matching.CreateRoomRequest.AllowBlockedUsersOfMembers">
            <summary>
            Select true If the blocked users of the members can enter the room when they join. True by default
            </summary>
        </member>
        <member name="T:Sony.NP.Matching.LeaveRoomRequest">
            <summary>
            Request class to specify the room that wants to be left.
            </summary>
        </member>
        <member name="M:Sony.NP.Matching.LeaveRoomRequest.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Sony.NP.Matching.LeaveRoomRequest"/> class.
            </summary>
        </member>
        <member name="P:Sony.NP.Matching.LeaveRoomRequest.RoomId">
            <summary>
            The room identifier of the room to leave
            </summary>
        </member>
        <member name="P:Sony.NP.Matching.LeaveRoomRequest.NotificationDataToMembers">
            <summary>
            Notification sent to other members. Application-defined data
            </summary>
        </member>
        <member name="T:Sony.NP.Matching.RoomsSearchScope">
            <summary>
            Enum listing the types of rooms where the search operation can be carried in.
            </summary>
        </member>
        <member name="F:Sony.NP.Matching.RoomsSearchScope.All">
            <summary> If the search operation is for all possible rooms </summary>
        </member>
        <member name="F:Sony.NP.Matching.RoomsSearchScope.FriendsRooms">
            <summary> If the search operation is only for rooms where friends of the calling user are. The search is performed in the first 25 in-context friends </summary>
        </member>
        <member name="F:Sony.NP.Matching.RoomsSearchScope.RecentlyMetRooms">
            <summary> If the search operation is only for rooms where the recently met players are. To set the recently met players, call <c>ActivityFeed::postPlayedWith()</c> and give the members information. The search is performed in the most recent feed published </summary>
        </member>
        <member name="F:Sony.NP.Matching.RoomsSearchScope.CustomUsersList">
            <summary> If the search operation is only for rooms where specific users are. A list of users has to be specified in this case. A maximum of <c>SCE_NP_MATCHING2_GET_USER_INFO_LIST_USER_NUM_MAX</c> can be specified per page </summary>
        </member>
        <member name="T:Sony.NP.Matching.SearchRoomsRequest">
            <summary>
            Request used to search for new rooms on the world.
            </summary>
        </member>
        <member name="F:Sony.NP.Matching.SearchRoomsRequest.MAX_SEARCH_CLAUSES">
            <summary>
            Maximum size of the <see cref="P:Sony.NP.Matching.SearchRoomsRequest.SearchClauses"/> array.
            </summary>
        </member>
        <member name="F:Sony.NP.Matching.SearchRoomsRequest.MAX_PAGE_SIZE">
            <summary>
            The maximum number of rooms matching the search criteria that can be returned per call
            </summary>
        </member>
        <member name="F:Sony.NP.Matching.SearchRoomsRequest.MIN_OFFSET">
            <summary>
            The default offset when doing pagination to obtain the list of rooms
            </summary>
        </member>
        <member name="F:Sony.NP.Matching.SearchRoomsRequest.MAX_NUM_USERS_TO_SEARCH_IN_ROOMS">
            <summary>
            The maximum number of users on the custom list that can be searched on a room
            </summary>
        </member>
        <member name="M:Sony.NP.Matching.SearchRoomsRequest.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Sony.NP.Matching.SearchRoomsRequest"/> class.
            </summary>
        </member>
        <member name="P:Sony.NP.Matching.SearchRoomsRequest.SearchClauses">
            <summary>
            A list of all search clauses that a room must met. The result will be an AND of all listed clauses
            </summary>
            <exception cref="T:Sony.NP.NpToolkitException">Will throw an exception if the array is larger than <see cref="F:Sony.NP.Matching.SearchRoomsRequest.MAX_SEARCH_CLAUSES"/>.</exception>
        </member>
        <member name="P:Sony.NP.Matching.SearchRoomsRequest.UsersToSearchInRooms">
            <summary>
            When the <see cref="P:Sony.NP.Matching.SearchRoomsRequest.SearchScope"/> is <see cref="F:Sony.NP.Matching.RoomsSearchScope.CustomUsersList"/>, the list of users where the rooms should be searched
            </summary>
            <exception cref="T:Sony.NP.NpToolkitException">Will throw an exception if the array is larger than <see cref="F:Sony.NP.Matching.SearchRoomsRequest.MAX_NUM_USERS_TO_SEARCH_IN_ROOMS"/>.</exception>
        </member>
        <member name="P:Sony.NP.Matching.SearchRoomsRequest.Offset">
            <summary>
            For pagination, the index on the list of returned rooms to start returning them. This member is ignored if <see cref="P:Sony.NP.Matching.SearchRoomsRequest.ProvideRandomRooms"/> is set to true. By default is the <see cref="F:Sony.NP.Matching.SearchRoomsRequest.MIN_OFFSET"/>. Value 0 is not accepted
            </summary>
        </member>
        <member name="P:Sony.NP.Matching.SearchRoomsRequest.PageSize">
            <summary>
            For pagination, the maximum number of rooms to be obtained in one call. This member is ignored if <see cref="P:Sony.NP.Matching.SearchRoomsRequest.ProvideRandomRooms"/> is set to true. By default is <see cref="F:Sony.NP.Matching.SearchRoomsRequest.MAX_PAGE_SIZE"/>. Value 0 is not accepted
            </summary>
        </member>
        <member name="P:Sony.NP.Matching.SearchRoomsRequest.SearchScope">
            <summary>
            The scope to search the rooms in. Either all rooms, friends rooms, players met rooms or a custom list of users
            </summary>
        </member>
        <member name="P:Sony.NP.Matching.SearchRoomsRequest.WorldNumber">
            <summary>
            The world to search the rooms in. Worlds are created with the SMT tool while configuring the Matching server. It defaults to world 1 
            </summary>
        </member>
        <member name="P:Sony.NP.Matching.SearchRoomsRequest.ProvideRandomRooms">
            <summary>
            False by default. When set to true, pagination provided will be ignored and the rooms will be shuffled every time a call is made
            </summary>
        </member>
        <member name="P:Sony.NP.Matching.SearchRoomsRequest.QuickJoin">
            <summary>
            False by default. When set to true, the first room returned will be joined
            </summary>
        </member>
        <member name="P:Sony.NP.Matching.SearchRoomsRequest.ApplyNatTypeFilter">
            <summary>
            True by default. When set to true, only rooms where all members can establish P2P connections with the calling user will be returned. Note the difference with <see cref="P:Sony.NP.Matching.CreateRoomRequest.IsNatRestricted"/> in <see cref="M:Sony.NP.Matching.CreateRoom(Sony.NP.Matching.CreateRoomRequest,Sony.NP.Matching.RoomResponse)"/>. Even if a room is not NAT restricted on creation, if everyone in the room have a good P2P connection, the room will be returned as it will pass the filter
            </summary>
        </member>
        <member name="T:Sony.NP.Matching.RoomJoiningType">
            <summary>
            Enum listing the different ways a room can be joined.
            </summary>
        </member>
        <member name="F:Sony.NP.Matching.RoomJoiningType.Room">
            <summary> If the identifier of the room is provided in order to join the room and session </summary>
        </member>
        <member name="F:Sony.NP.Matching.RoomJoiningType.BoundSessionId">
            <summary> If the identifier of the session is provided in order to join the room and session (i.e.: when an invitation is received) </summary>
        </member>
        <member name="T:Sony.NP.Matching.JoinRoomRequest">
            <summary>
            Request class provided to join a room.
            </summary>
        </member>
        <member name="F:Sony.NP.Matching.JoinRoomRequest.MAX_ATTRIBUTES">
            <summary>
            Maximum size of the <see cref="P:Sony.NP.Matching.JoinRoomRequest.MemberAttributes"/> array.
            </summary>
        </member>
        <member name="M:Sony.NP.Matching.JoinRoomRequest.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Sony.NP.Matching.JoinRoomRequest"/> class.
            </summary>
        </member>
        <member name="P:Sony.NP.Matching.JoinRoomRequest.Password">
            <summary>
            The password for a reserved slot, in case one is being joined/>
            </summary>
        </member>
        <member name="P:Sony.NP.Matching.JoinRoomRequest.MemberAttributes">
            <summary>
            The attributes the joining user will have when he/she becomes a member
            </summary>
            <exception cref="T:Sony.NP.NpToolkitException">Will throw an exception if the array is larger than <see cref="F:Sony.NP.Matching.JoinRoomRequest.MAX_ATTRIBUTES"/>.</exception>
        </member>
        <member name="P:Sony.NP.Matching.JoinRoomRequest.NotificationDataToMembers">
            <summary>
            Notification sent to other members. Application-defined data
            </summary>
        </member>
        <member name="P:Sony.NP.Matching.JoinRoomRequest.RoomId">
            <summary>
            Provide the room Id to be joined. Only applicable if <see cref="P:Sony.NP.Matching.JoinRoomRequest.IdentifyRoomBy"/> is <see cref="F:Sony.NP.Matching.RoomJoiningType.Room"/>
            </summary>
            <exception cref="T:Sony.NP.NpToolkitException">Will throw an exception if <see cref="P:Sony.NP.Matching.JoinRoomRequest.IdentifyRoomBy"/> isn't <see cref="F:Sony.NP.Matching.RoomJoiningType.Room"/></exception>
        </member>
        <member name="P:Sony.NP.Matching.JoinRoomRequest.BoundSessionId">
            <summary>
            Provide the session Id bound to the room to be joined. Only applicable if <see cref="P:Sony.NP.Matching.JoinRoomRequest.IdentifyRoomBy"/> is <see cref="F:Sony.NP.Matching.RoomJoiningType.BoundSessionId"/>
            </summary>
            <exception cref="T:Sony.NP.NpToolkitException">Will throw an exception if <see cref="P:Sony.NP.Matching.JoinRoomRequest.IdentifyRoomBy"/> isn't <see cref="F:Sony.NP.Matching.RoomJoiningType.BoundSessionId"/></exception>
        </member>
        <member name="P:Sony.NP.Matching.JoinRoomRequest.IdentifyRoomBy">
            <summary>
            Identifier of the way a room will be joined
            </summary>
        </member>
        <member name="P:Sony.NP.Matching.JoinRoomRequest.JoinAllLocalUsers">
            <summary>
            False by default. All local users will be added to the room. It does not work for rooms with private slots
            </summary>
        </member>
        <member name="P:Sony.NP.Matching.JoinRoomRequest.AllowBlockedUsers">
            <summary>
            True by default. If set to false, the blocked users of the joining member will be added to the blacklist of the room. It will be ignored if the room has <see cref="P:Sony.NP.Matching.Room.AllowBlockedUsersOfMembers"/> as false
            </summary>
        </member>
        <member name="T:Sony.NP.Matching.GetRoomPingTimeRequest">
            <summary>
            Request class used to specify the room where RTT information wants to be obtained.
            </summary>
        </member>
        <member name="M:Sony.NP.Matching.GetRoomPingTimeRequest.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Sony.NP.Matching.GetRoomPingTimeRequest"/> class.
            </summary>
        </member>
        <member name="P:Sony.NP.Matching.GetRoomPingTimeRequest.RoomId">
            <summary>
            The room identifier of the room to obtain the Round Trip Time (RTT) information
            </summary>
        </member>
        <member name="T:Sony.NP.Matching.KickOutRoomMemberRequest">
            <summary>
            Request class to expulse a member of a room.
            </summary>
        </member>
        <member name="M:Sony.NP.Matching.KickOutRoomMemberRequest.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Sony.NP.Matching.KickOutRoomMemberRequest"/> class.
            </summary>
        </member>
        <member name="P:Sony.NP.Matching.KickOutRoomMemberRequest.RoomId">
            <summary>
            The room identifier of the room the user to be kicked out belongs to
            </summary>
        </member>
        <member name="P:Sony.NP.Matching.KickOutRoomMemberRequest.NotificationDataToMembers">
            <summary>
            Notification sent to members. Application-defined data
            </summary>
        </member>
        <member name="P:Sony.NP.Matching.KickOutRoomMemberRequest.MemberId">
            <summary>
            Identifier of the member to be kicked out
            </summary>
        </member>
        <member name="P:Sony.NP.Matching.KickOutRoomMemberRequest.AllowRejoin">
            <summary>
            If the kicked out member can join later. False by default
            </summary>
        </member>
        <member name="T:Sony.NP.Matching.SendRoomMessageRequest">
            <summary>
            Request class to send a message to the members of the room.
            </summary>
        </member>
        <member name="F:Sony.NP.Matching.SendRoomMessageRequest.MESSAGE_MAX_SIZE">
            <summary>
            The maximum size a message to be sent to other members can have
            </summary>
        </member>
        <member name="F:Sony.NP.Matching.SendRoomMessageRequest.MAX_MEMBERS">
            <summary>
            The maximum number of memeber the message can be sent to.
            </summary>
        </member>
        <member name="M:Sony.NP.Matching.SendRoomMessageRequest.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Sony.NP.Matching.SendRoomMessageRequest"/> class.
            </summary>
        </member>
        <member name="P:Sony.NP.Matching.SendRoomMessageRequest.RoomId">
            <summary>
            The room identifier of the room where the message will be sent
            </summary>
        </member>
        <member name="P:Sony.NP.Matching.SendRoomMessageRequest.Members">
            <summary>
            A list of members to sent the message to. Leave it as 'null' to send it to all members. 'null' is the default value
            </summary>
            <exception cref="T:Sony.NP.NpToolkitException">Will throw an exception if the array is larger than <see cref="F:Sony.NP.Matching.SendRoomMessageRequest.MAX_MEMBERS"/>.</exception>
        </member>
        <member name="P:Sony.NP.Matching.SendRoomMessageRequest.Data">
            <summary>
            The binary data to be sent to other members
            </summary>
            <exception cref="T:Sony.NP.NpToolkitException">Will throw an exception if the array is more than <see cref="F:Sony.NP.Matching.SendRoomMessageRequest.MESSAGE_MAX_SIZE"/> bytes.</exception>
        </member>
        <member name="P:Sony.NP.Matching.SendRoomMessageRequest.DataAsString">
            <summary>
             Optional message data. Sets the data as a UTF8 string. String is converted in a series of bytes.
            </summary>
            <exception cref="T:Sony.NP.NpToolkitException">Will throw an exception if the string end up more than <see cref="F:Sony.NP.Matching.SendRoomMessageRequest.MESSAGE_MAX_SIZE"/> bytes.</exception>
        </member>
        <member name="P:Sony.NP.Matching.SendRoomMessageRequest.IsChatMsg">
            <summary>
            False by default. If true, a UTF-8 string is expected on <see cref="P:Sony.NP.Matching.SendRoomMessageRequest.Data"/> and the vulgarity filter will be applied to the data.
            </summary>
        </member>
        <member name="T:Sony.NP.Matching.GetAttributesRequest">
            <summary>
            Request class used to obtain attributes of a room or member from the server.
            </summary>
        </member>
        <member name="M:Sony.NP.Matching.GetAttributesRequest.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Sony.NP.Matching.GetAttributesRequest"/> class.
            </summary>
        </member>
        <member name="P:Sony.NP.Matching.GetAttributesRequest.RoomId">
            <summary>
            The room identifier of the room to get the attributes from
            </summary>
        </member>
        <member name="P:Sony.NP.Matching.GetAttributesRequest.Scope">
            <summary>
            The type of attribute to be returned. Either room attributes or member attributes. Set automatically when using either <see cref="P:Sony.NP.Matching.GetAttributesRequest.RoomAttributeVisibility"/> or <see cref="P:Sony.NP.Matching.GetAttributesRequest.MemberId"/>
            </summary>
        </member>
        <member name="P:Sony.NP.Matching.GetAttributesRequest.RoomAttributeVisibility">
            <summary>
            If <see cref="P:Sony.NP.Matching.GetAttributesRequest.Scope"/> is <see cref="F:Sony.NP.Matching.AttributeScope.Room"/>, the type of room attributes to be obtained. 
            </summary>
        </member>
        <member name="P:Sony.NP.Matching.GetAttributesRequest.MemberId">
            <summary>
            If <see cref="P:Sony.NP.Matching.GetAttributesRequest.Scope"/> is <see cref="F:Sony.NP.Matching.AttributeScope.Member"/>, , the room member to get the attributes from
            </summary>
        </member>
        <member name="T:Sony.NP.Matching.DataType">
            <summary>
            Enum listing the different types of data that can exist associated to a session bound to a room.
            </summary>
        </member>
        <member name="F:Sony.NP.Matching.DataType.Fixed">
            <summary> Up to 1023 * 1024 KiB of data that can be set on creation. Only available if a session has been created and linked to a room </summary>
        </member>
        <member name="F:Sony.NP.Matching.DataType.Changeable">
            <summary> Up to 1 KiB of data that can be modified at any time. Only available if a session has been created and linked to a room </summary>
        </member>
        <member name="T:Sony.NP.Matching.GetDataRequest">
            <summary>
            Request class provided to obtain data (modifiable or non-modifiable) of a session bound to the joined room.
            </summary>
        </member>
        <member name="M:Sony.NP.Matching.GetDataRequest.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Sony.NP.Matching.GetDataRequest"/> class.
            </summary>
        </member>
        <member name="P:Sony.NP.Matching.GetDataRequest.RoomId">
            <summary>
            The room identifier of the room associated to the session to obtain the data from.
            </summary>
        </member>
        <member name="P:Sony.NP.Matching.GetDataRequest.Type">
            <summary>
            Type of data of the bound session to get
            </summary>
        </member>
        <member name="T:Sony.NP.Matching.SendInvitationRequest">
            <summary>
            Request used to invite a user to a session and room.
            </summary>
        </member>
        <member name="F:Sony.NP.Matching.SendInvitationRequest.MAX_SIZE_ATTACHMENT">
            <summary>
            The maximum size that the data attached to an invitation can have
            </summary>
        </member>
        <member name="F:Sony.NP.Matching.SendInvitationRequest.MAX_NUM_RECIPIENTS">
            <summary>
            The maximum number of recipients that can receive one invitation
            </summary>
        </member>
        <member name="F:Sony.NP.Matching.SendInvitationRequest.MAX_SIZE_USER_MESSAGE">
            <summary>
            The maximum size the text message of an invitation can have, in UTF-8 characters
            </summary>
        </member>
        <member name="M:Sony.NP.Matching.SendInvitationRequest.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Sony.NP.Matching.SendInvitationRequest"/> class.
            </summary>
        </member>
        <member name="P:Sony.NP.Matching.SendInvitationRequest.RoomId">
            <summary>
            The room identifier of the room to be joined
            </summary>
        </member>
        <member name="P:Sony.NP.Matching.SendInvitationRequest.Recipients">
            <summary>
            Users to send this invite to. Not used if <see cref="P:Sony.NP.Matching.SendInvitationRequest.RecipientsEditableByUser"/> is set to true
            </summary>
        </member>
        <member name="P:Sony.NP.Matching.SendInvitationRequest.UserMessage">
            <summary>
            Pre-filled message to display if <see cref="P:Sony.NP.Matching.SendInvitationRequest.EnableDialog"/> is set to true
            </summary>
            <exception cref="T:Sony.NP.NpToolkitException">Will throw an exception if the user message is more than <see cref="F:Sony.NP.Matching.SendInvitationRequest.MAX_SIZE_USER_MESSAGE"/> characters.</exception>
        </member>
        <member name="P:Sony.NP.Matching.SendInvitationRequest.Attachment">
            <summary>
            Binary attachment data that can be added if <see cref="P:Sony.NP.Matching.SendInvitationRequest.EnableDialog"/> is set to false. If provided, the pointer has to remain valid in memory until a response is obtained
            </summary>
            <exception cref="T:Sony.NP.NpToolkitException">Will throw an exception if the array is larger than <see cref="F:Sony.NP.Matching.SendInvitationRequest.MAX_SIZE_ATTACHMENT"/>.</exception>
        </member>
        <member name="P:Sony.NP.Matching.SendInvitationRequest.MaxNumberRecipientsToAdd">
            <summary>
            Maximum number of users that this invitation can be sent to. Only used if <see cref="P:Sony.NP.Matching.SendInvitationRequest.RecipientsEditableByUser"/> is set to true
            </summary>
        </member>
        <member name="P:Sony.NP.Matching.SendInvitationRequest.RecipientsEditableByUser">
            <summary>
            If true, allows the user to edit the recipients. Only if <see cref="P:Sony.NP.Matching.SendInvitationRequest.EnableDialog"/> is set to true
            </summary>
        </member>
        <member name="P:Sony.NP.Matching.SendInvitationRequest.EnableDialog">
            <summary>
            Set to true to show the invitation dialog. If false, no dialog will be shown to the user and the invite will be sent silently
            </summary>
        </member>
        <member name="T:Sony.NP.Matching.SetRoomInfoType">
            <summary>
            Enum listing the different ways to update a room (set room information).
            </summary>
        </member>
        <member name="F:Sony.NP.Matching.SetRoomInfoType.Invalid">
            <summary> Default value. It should never be used </summary>
        </member>
        <member name="F:Sony.NP.Matching.SetRoomInfoType.MemberInfo">
            <summary> Information of the calling user, as the member of the room, will be modified </summary>
        </member>
        <member name="F:Sony.NP.Matching.SetRoomInfoType.RoomExternalInfo">
            <summary> External information of the room will be modified </summary>
        </member>
        <member name="F:Sony.NP.Matching.SetRoomInfoType.RoomInternalInfo">
            <summary> Internal information of the room (only visible to members) will be modified </summary>
        </member>
        <member name="F:Sony.NP.Matching.SetRoomInfoType.RoomSessionInfo">
            <summary> Information of the session bound to the room will be modified </summary>
        </member>
        <member name="F:Sony.NP.Matching.SetRoomInfoType.RoomTopology">
            <summary> The topology of the room will be modified </summary>
        </member>
        <member name="T:Sony.NP.Matching.SetRoomInfoRequest">
            <summary>
            Request class to modify information of a room (or a member of the room).
            </summary>
            <remarks>
            Only one type of update can be performed per call. See <see cref="T:Sony.NP.Matching.SetRoomInfoType"/> enum for the different types.
            Leave blank any value of this request that you do not want to modify.
            Booleans are represented as enums,<see cref="T:Sony.NP.Core.OptionalBoolean"/>, to identify when no modification is required.
            </remarks>
        </member>
        <member name="F:Sony.NP.Matching.SetRoomInfoRequest.MAX_MEMBER_ATTRIBUTES">
            <summary>
            The maximum number of member attributes. The total size of all member attributes (integer or binary) can't exceed 64 bytes.
            </summary>
        </member>
        <member name="F:Sony.NP.Matching.SetRoomInfoRequest.MAX_ATTRIBUTES">
            <summary>
            The maximum number of external and search attributes.
            </summary>
        </member>
        <member name="M:Sony.NP.Matching.SetRoomInfoRequest.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Sony.NP.Matching.GetDataRequest"/> class.
            </summary>
        </member>
        <member name="P:Sony.NP.Matching.SetRoomInfoRequest.RoomId">
            <summary>
            The room identifier of the room to be modified
            </summary>
        </member>
        <member name="P:Sony.NP.Matching.SetRoomInfoRequest.RoomInfoType">
            <summary>
            The type of update that will be performed on this call
            </summary>
        </member>
        <member name="P:Sony.NP.Matching.SetRoomInfoRequest.MemberInfo">
            <summary>
            Information of the calling user, as the member of the room, will be modified. <see cref="P:Sony.NP.Matching.SetRoomInfoRequest.RoomInfoType"/> must be <see cref="F:Sony.NP.Matching.SetRoomInfoType.MemberInfo"/>
            </summary>
        </member>
        <member name="P:Sony.NP.Matching.SetRoomInfoRequest.ExternalRoomInfo">
            <summary>
            External information of the room will be modified. <see cref="P:Sony.NP.Matching.SetRoomInfoRequest.RoomInfoType"/> must be <see cref="F:Sony.NP.Matching.SetRoomInfoType.RoomExternalInfo"/>
            </summary>
        </member>
        <member name="P:Sony.NP.Matching.SetRoomInfoRequest.InternalRoomInfo">
            <summary>
            Internal information of the room (only visible to members) will be modified
            </summary>
        </member>
        <member name="P:Sony.NP.Matching.SetRoomInfoRequest.RoomSessionInfo">
            <summary>
            Information of the session bound to the room will be modified
            </summary>
        </member>
        <member name="P:Sony.NP.Matching.SetRoomInfoRequest.RoomTopology">
            <summary>
            The topology of the room will be modified
            </summary>
        </member>
        <member name="T:Sony.NP.Matching.SetRoomInfoRequest.MemberInformation">
            <summary>
            Information of the calling user, as the member of the room, will be modified
            </summary>
        </member>
        <member name="P:Sony.NP.Matching.SetRoomInfoRequest.MemberInformation.MemberAttributes">
            <summary>
            The attributes to modify on the member. 
            </summary>
            <exception cref="T:Sony.NP.NpToolkitException">Will throw an exception if the array is larger than <see cref="F:Sony.NP.Matching.SetRoomInfoRequest.MAX_MEMBER_ATTRIBUTES"/>.</exception>
        </member>
        <member name="P:Sony.NP.Matching.SetRoomInfoRequest.MemberInformation.MemberId">
            <summary>
            The member whose attributes will be modified. Specify always the calling user member Id
            </summary>
        </member>
        <member name="T:Sony.NP.Matching.SetRoomInfoRequest.ExternalRoomInformation">
            <summary>
            External information of the room will be modified
            </summary>
        </member>
        <member name="P:Sony.NP.Matching.SetRoomInfoRequest.ExternalRoomInformation.ExternalAttributes">
            <summary>
            The external attributes to modify on the room
            </summary>
            <exception cref="T:Sony.NP.NpToolkitException">Will throw an exception if the array is larger than <see cref="F:Sony.NP.Matching.SetRoomInfoRequest.MAX_ATTRIBUTES"/>.</exception>
        </member>
        <member name="P:Sony.NP.Matching.SetRoomInfoRequest.ExternalRoomInformation.SearchAttributes">
            <summary>
            The search attributes to modify on the room
            </summary>
            <exception cref="T:Sony.NP.NpToolkitException">Will throw an exception if the array is larger than <see cref="F:Sony.NP.Matching.SetRoomInfoRequest.MAX_ATTRIBUTES"/>.</exception>
        </member>
        <member name="T:Sony.NP.Matching.SetRoomInfoRequest.InternalRoomInformation">
            <summary>
            Internal information of the room (only visible to members) will be modified
            </summary>
        </member>
        <member name="P:Sony.NP.Matching.SetRoomInfoRequest.InternalRoomInformation.InternalAttributes">
            <summary>
            The internal attributes to modify on the room
            </summary>
            <exception cref="T:Sony.NP.NpToolkitException">Will throw an exception if the array is larger than <see cref="F:Sony.NP.Matching.SetRoomInfoRequest.MAX_ATTRIBUTES"/>.</exception>
        </member>
        <member name="P:Sony.NP.Matching.SetRoomInfoRequest.InternalRoomInformation.AllowBlockedUsersOfMembers">
            <summary>
            Change it to allow or not adding blocked users of members to the blacklist of the room. The blocked users already added will be kept
            </summary>
        </member>
        <member name="P:Sony.NP.Matching.SetRoomInfoRequest.InternalRoomInformation.JoinAllLocalUsers">
            <summary>
            Change it to allow or not adding all local users to rooms when more than one local user is available on one system. It does not work if the number of reserved slots of the room is different than 0
            </summary>
        </member>
        <member name="P:Sony.NP.Matching.SetRoomInfoRequest.InternalRoomInformation.IsNatRestricted">
            <summary>
            Change it to restrict or not the members that can join the room to only those who can establish P2P connections
            </summary>
        </member>
        <member name="P:Sony.NP.Matching.SetRoomInfoRequest.InternalRoomInformation.NumReservedSlots">
            <summary>
            Change it to modify the number of reserved slots in the room. Only applicable if <see cref="P:Sony.NP.Matching.SetRoomInfoRequest.InternalRoomInformation.Visibility"/> is <see cref="F:Sony.NP.Matching.RoomVisibility.ReserveSlots"/> and JoinAllLocalUsers of the room is false
            </summary>
        </member>
        <member name="P:Sony.NP.Matching.SetRoomInfoRequest.InternalRoomInformation.Visibility">
            <summary>
            Change it to make the room private, public or public with reserved slots
            </summary>
        </member>
        <member name="P:Sony.NP.Matching.SetRoomInfoRequest.InternalRoomInformation.CloseRoom">
            <summary>
            Change it to close the room. It will no longer be provided in searches
            </summary>
        </member>
        <member name="T:Sony.NP.Matching.SetRoomInfoRequest.RoomSessionInformation">
            <summary>
            Information of the session bound to the room will be modified
            </summary>
        </member>
        <member name="P:Sony.NP.Matching.SetRoomInfoRequest.RoomSessionInformation.DisplayOnSystem">
            <summary>
            Change it to make the Session visible or not in the system
            </summary>
        </member>
        <member name="P:Sony.NP.Matching.SetRoomInfoRequest.RoomSessionInformation.IsSystemJoinable">
            <summary>
            Change it to allow or not users joining from the system (the platform)
            </summary>
        </member>
        <member name="P:Sony.NP.Matching.SetRoomInfoRequest.RoomSessionInformation.ChangeableData">
            <summary>
            Change it to modify the data associated to a system session. Other members won't be notified of this change.
            </summary>
            <exception cref="T:Sony.NP.NpToolkitException">Will throw an exception if the array is more than <see cref="F:Sony.NP.Matching.CreateRoomRequest.MAX_SIZE_CHANGEABLE_DATA"/> bytes.</exception>
        </member>
        <member name="P:Sony.NP.Matching.SetRoomInfoRequest.RoomSessionInformation.Status">
            <summary>
            Change it to modify the default status shown in the system. The default name is the room name. Other members won't be notified of this change
            </summary>
            <exception cref="T:Sony.NP.NpToolkitException">Will throw an exception if the string is more than <see cref="F:Sony.NP.Matching.CreateRoomRequest.MAX_SIZE_ROOM_STATUS"/> characters.</exception>
        </member>
        <member name="P:Sony.NP.Matching.SetRoomInfoRequest.RoomSessionInformation.Localizations">
            <summary>
            The localized session information shown by the system. If <see cref="P:Sony.NP.Matching.SetRoomInfoRequest.RoomSessionInformation.Status"/> is provided, the previously set localization will be discarded
            </summary>
            <exception cref="T:Sony.NP.NpToolkitException">Will throw an exception if the array is more than <see cref="F:Sony.NP.Matching.CreateRoomRequest.MAX_SIZE_LOCALIZATIONS"/>.</exception>
        </member>
        <member name="P:Sony.NP.Matching.SetRoomInfoRequest.RoomSessionInformation.Image">
            <summary>
            Change it to set a new image on the system session.
            </summary>
        </member>
        <member name="T:Sony.NP.Matching.NpMatching2SessionPassword">
            <summary>
            Session password. It is specified when creating and joining a session.
            </summary>
        </member>
        <member name="F:Sony.NP.Matching.NpMatching2SessionPassword.NP_MATCHING2_SESSION_PASSWORD_SIZE">
            <summary>
            Maximum size of the password
            </summary>
        </member>
        <member name="M:Sony.NP.Matching.NpMatching2SessionPassword.ToString">
            <summary>
            Return the password as a string
            </summary>
            <returns>The session password.</returns>
        </member>
        <member name="M:Sony.NP.Matching.NpMatching2SessionPassword.op_Implicit(System.String)~Sony.NP.Matching.NpMatching2SessionPassword">
            <summary>
            Allow direct assignment of string
            </summary>
            <param name="value">16bit world number.</param>
        </member>
        <member name="P:Sony.NP.Matching.NpMatching2SessionPassword.Password">
            <summary>
            World ID
            </summary>
            <exception cref="T:Sony.NP.NpToolkitException">Will throw an exception if the password is more than <see cref="F:Sony.NP.Matching.NpMatching2SessionPassword.NP_MATCHING2_SESSION_PASSWORD_SIZE"/> characters.</exception>
        </member>
        <member name="T:Sony.NP.Matching.NpSessionId">
            <summary>
            Session ID
            </summary>
        </member>
        <member name="F:Sony.NP.Matching.NpSessionId.NP_SESSION_ID_MAX_SIZE">
            <summary>
            Maximum length of the session id.
            </summary>
        </member>
        <member name="M:Sony.NP.Matching.NpSessionId.ToString">
            <summary>
            Return the session id as a string
            </summary>
            <returns>The session id as a string</returns>
        </member>
        <member name="P:Sony.NP.Matching.NpSessionId.Data">
            <summary>
            Session ID string (45 bytes or less)
            </summary>
        </member>
        <member name="T:Sony.NP.Matching.NpMatching2WorldId">
            <summary>
            This type represents a world ID.
            </summary>
        </member>
        <member name="P:Sony.NP.Matching.NpMatching2WorldId.Id">
            <summary>
            World ID
            </summary>
        </member>
        <member name="T:Sony.NP.Matching.NpMatching2WorldNumber">
            <summary>
            This type represents a world number.
            </summary>
        </member>
        <member name="M:Sony.NP.Matching.NpMatching2WorldNumber.op_Implicit(System.UInt16)~Sony.NP.Matching.NpMatching2WorldNumber">
            <summary>
            Allow direct assignment of UInt16
            </summary>
            <param name="value">16bit world number.</param>
        </member>
        <member name="P:Sony.NP.Matching.NpMatching2WorldNumber.Num">
            <summary>
            World number
            </summary>
        </member>
        <member name="T:Sony.NP.Matching.World">
            <summary>
            A class representing a world on the server. A world always has the identifiers (world Id and world number) and the
            current world information (number of members and number of rooms on the world).
            </summary>
        </member>
        <member name="P:Sony.NP.Matching.World.WorldId">
            <summary>
            The identifier of the world in the server, as it is read by the NpMatching2 function calls
            </summary>
        </member>
        <member name="P:Sony.NP.Matching.World.CurrentNumberOfRooms">
            <summary>
            The number of rooms that exist in the world at the moment
            </summary>
        </member>
        <member name="P:Sony.NP.Matching.World.CurrentNumberOfMembers">
            <summary>
            The number of members that exist in the world at the moment
            </summary>
        </member>
        <member name="P:Sony.NP.Matching.World.WorldNumber">
            <summary>
            The identifier of the world in the server, as it is read by the SMT configuration and the NpToolkit2 function calls
            </summary>
        </member>
        <member name="T:Sony.NP.Matching.SignalingStatus">
            <summary>
            Enum listing the different statuses the connection between the local user and the remote user can have.
            </summary>
        </member>
        <member name="F:Sony.NP.Matching.SignalingStatus.NotApplicable">
            <summary> Signaling information can not be obtained. </summary>
        </member>
        <member name="F:Sony.NP.Matching.SignalingStatus.Established">
            <summary> Connection between both peers has been established and information between them has been obtained. </summary>
        </member>
        <member name="F:Sony.NP.Matching.SignalingStatus.EstablishedFailToGetInformation">
            <summary> Connection between both peers has been established but information between them can not be obtained. </summary>
        </member>
        <member name="F:Sony.NP.Matching.SignalingStatus.Dead">
            <summary> Connection between both peers is not established (either lost or never established). </summary>
        </member>
        <member name="T:Sony.NP.Matching.NatType">
            <summary>
            
            </summary>
        </member>
        <member name="F:Sony.NP.Matching.NatType.Invalid">
            <summary> The NAT type is not provided. Default value. </summary>
        </member>
        <member name="F:Sony.NP.Matching.NatType.NatType1">
            <summary> The NAT type is 1. The network connection is quite good. </summary>
        </member>
        <member name="F:Sony.NP.Matching.NatType.NatType2">
            <summary> The NAT type is 2. The network connection is good. </summary>
        </member>
        <member name="F:Sony.NP.Matching.NatType.NatType3">
            <summary> The NAT type is 3. The network connection is bad and online gaming may not be possible. </summary>
        </member>
        <member name="T:Sony.NP.Matching.MemberSignalingInformation">
            <summary>
            This class contains information of the connection between a member and the calling user.
            </summary>
        </member>
        <member name="P:Sony.NP.Matching.MemberSignalingInformation.NatType">
            <summary>
            The type of NAT of the Member
            </summary>
        </member>
        <member name="P:Sony.NP.Matching.MemberSignalingInformation.Status">
            <summary>
            The status of the signal
            </summary>
        </member>
        <member name="P:Sony.NP.Matching.MemberSignalingInformation.RoundTripTime">
            <summary>
            The ping time with the member. Provided when signaling is established with the member
            </summary>
        </member>
        <member name="P:Sony.NP.Matching.MemberSignalingInformation.IpAddress">
            <summary>
            The IP address of the member. Provided when signaling is established with the member
            </summary>
        </member>
        <member name="P:Sony.NP.Matching.MemberSignalingInformation.Port">
            <summary>
            The port used by the member. Provided when signaling is established with the member. This in host byte order
            </summary>
        </member>
        <member name="P:Sony.NP.Matching.MemberSignalingInformation.PortNetworkOrder">
            <summary>
            The same port returned by <see cref="P:Sony.NP.Matching.MemberSignalingInformation.Port"/> except it is in network byte order
            </summary>
        </member>
        <member name="T:Sony.NP.Matching.Member">
            <summary>
            This class represents a member (a user that is inside a room).
            </summary>
        </member>
        <member name="P:Sony.NP.Matching.Member.OnlineUser">
            <summary>
            The Account Id and Online Id of the member
            </summary>
        </member>
        <member name="P:Sony.NP.Matching.Member.MemberAttributes">
            <summary>
            The attributes the member has on the room
            </summary>
        </member>
        <member name="P:Sony.NP.Matching.Member.JoinedDate">
            <summary>
            The date the member joined the room
            </summary>
        </member>
        <member name="P:Sony.NP.Matching.Member.SignalingInformation">
            <summary>
            Signaling information of the member (IP address, port, RTT, etc.)
            </summary>
        </member>
        <member name="P:Sony.NP.Matching.Member.Platform">
            <summary>
            The platform the member is using
            </summary>
        </member>
        <member name="P:Sony.NP.Matching.Member.RoomMemberId">
            <summary>
            The identifier of the member in the room
            </summary>
        </member>
        <member name="P:Sony.NP.Matching.Member.IsOwner">
            <summary>
            If the member is the owner of the room
            </summary>
        </member>
        <member name="P:Sony.NP.Matching.Member.IsMe">
            <summary>
            If the member is the calling user
            </summary>
        </member>
        <member name="T:Sony.NP.Matching.Room">
            <summary>
            Response data class containing information about a room on
            the server (a set of members playing an activity currently
            together).
            </summary>
        </member>
        <member name="M:Sony.NP.Matching.Room.FindRoomMemberId(Sony.NP.Core.NpAccountId)">
            <summary>
            Find a room member id using the members account id.
            </summary>
            <param name="accountId">The account id to find in the room</param>
            <returns>If the memeber is found, retuns the member id; other returns <see cref="F:Sony.NP.Matching.INVALID_ROOM_MEMBER_ID"/></returns>
        </member>
        <member name="M:Sony.NP.Matching.Room.FindRoomMemberId(Sony.NP.Core.OnlineID)">
            <summary>
            Find a room member id using the members online id.
            </summary>
            <param name="onlineId">The online id to find in the room.</param>
            <returns>If the memeber is found, retuns the member id; other returns <see cref="F:Sony.NP.Matching.INVALID_ROOM_MEMBER_ID"/></returns>
        </member>
        <member name="P:Sony.NP.Matching.Room.MatchingContext">
            <summary>
            The NpMatching2 context of the calling user in case it needs to be used in NpMatching2 calls
            </summary>
        </member>
        <member name="P:Sony.NP.Matching.Room.ServerId">
            <summary>
            The NpMatching2 server where the room is, in case it needs to be used in NpMatching2 calls
            </summary>
        </member>
        <member name="P:Sony.NP.Matching.Room.WorldId">
            <summary>
            The NpMatching2 world where the room is, in case it needs to be used in NpMatching2 calls
            </summary>
        </member>
        <member name="P:Sony.NP.Matching.Room.RoomId">
            <summary>
            The room identifier of the current room
            </summary>
        </member>
        <member name="P:Sony.NP.Matching.Room.Attributes">
            <summary>
            The list of room attributes (internal, external, search)
            </summary>
        </member>
        <member name="P:Sony.NP.Matching.Room.Name">
            <summary>
            The name of the room. It won't be localized
            </summary>
        </member>
        <member name="P:Sony.NP.Matching.Room.CurrentMembers">
            <summary>
            The list of members currently in the room
            </summary>
        </member>
        <member name="P:Sony.NP.Matching.Room.NumMaxMembers">
            <summary>
            The maximum number of members the <see cref="P:Sony.NP.Matching.Room.CurrentMembers"/> list can have
            </summary>
        </member>
        <member name="P:Sony.NP.Matching.Room.Topology">
            <summary>
            The connectivity structure the room is using
            </summary>
        </member>
        <member name="P:Sony.NP.Matching.Room.NumReservedSlots">
            <summary>
            The number of private spaces the room has. It cannot be used at the same time as <see cref="P:Sony.NP.Matching.Room.JoinAllLocalUsers"/>.
            </summary>
        </member>
        <member name="P:Sony.NP.Matching.Room.IsNatRestricted">
            <summary>
            Indicates if members joining the room must be able to connect with other members in a P2P connection
            </summary>
        </member>
        <member name="P:Sony.NP.Matching.Room.AllowBlockedUsersOfOwner">
            <summary>
            Indicates if the owner allows the blocked users of its list to join the room
            </summary>
        </member>
        <member name="P:Sony.NP.Matching.Room.AllowBlockedUsersOfMembers">
            <summary>
            Indicates if the owner allows other members to decide if blocked users of their lists can join the room
            </summary>
        </member>
        <member name="P:Sony.NP.Matching.Room.JoinAllLocalUsers">
            <summary>
            Indicates if all signed in users in the platform should join the room or just the calling user. It cannot be used at the same time as <see cref="P:Sony.NP.Matching.Room.NumReservedSlots"/>.
            </summary>
        </member>
        <member name="P:Sony.NP.Matching.Room.OwnershipMigration">
            <summary>
            Indicates what happens when the current owner of the room leaves (the room is destroyed or a new owner is selected)
            </summary>
        </member>
        <member name="P:Sony.NP.Matching.Room.Visibility">
            <summary>
            Indicates if the room is public (visible in searches), private (hidden in searches) or public with some slots restricted
            </summary>
        </member>
        <member name="P:Sony.NP.Matching.Room.Password">
            <summary>
            The password to set when users want to become members using one of the restricted slots 
            </summary>
        </member>
        <member name="P:Sony.NP.Matching.Room.BoundSessionId">
            <summary>
            The Session bound to the room
            </summary>
        </member>
        <member name="P:Sony.NP.Matching.Room.IsSystemJoinable">
            <summary>
            If the Session can be joined from the system. If it is joined from the system, a System Event with the Session Id will be called, and the <see cref="M:Sony.NP.Matching.JoinRoom(Sony.NP.Matching.JoinRoomRequest,Sony.NP.Matching.RoomResponse)"/> function with the Session Id will need to be used
            </summary>
        </member>
        <member name="P:Sony.NP.Matching.Room.DisplayOnSystem">
            <summary>
            If the session information of the session bound to the room is shown on the system
            </summary>
        </member>
        <member name="P:Sony.NP.Matching.Room.HasChangeableData">
            <summary>
            If there is modifiable data on the session bound to the room
            </summary>
        </member>
        <member name="P:Sony.NP.Matching.Room.HasFixedData">
            <summary>
            If there is non-modifiable data on the session bound to the room
            </summary>
        </member>
        <member name="P:Sony.NP.Matching.Room.IsCrossplatform">
            <summary>
            If the online gaming experience is for a multi-platform game
            </summary>
        </member>
        <member name="P:Sony.NP.Matching.Room.IsClosed">
            <summary>
            If the room is closed or full. If it is, it won't be retrieved in searches
            </summary>
        </member>
        <member name="T:Sony.NP.Matching.WorldsResponse">
            <summary>
            Response data class containing a list of worlds from the server. <see cref="M:Sony.NP.Matching.GetWorlds(Sony.NP.Matching.GetWorldsRequest,Sony.NP.Matching.WorldsResponse)"/>
            </summary>
        </member>
        <member name="M:Sony.NP.Matching.WorldsResponse.ReadResult(System.UInt32,Sony.NP.FunctionTypes,Sony.NP.RequestBase)">
            <summary>
            Read the response data from the plug-in
            </summary>
            <param name="id">The request id.</param>
            <param name="apiCalled">The API called.</param>
            <param name="request">The Request object.</param>
        </member>
        <member name="P:Sony.NP.Matching.WorldsResponse.Worlds">
            <summary>
            A list of retrieved worlds
            </summary>
        </member>
        <member name="T:Sony.NP.Matching.RoomResponse">
            <summary>
            Response data class containing a list of worlds from the server. <see cref="M:Sony.NP.Matching.GetWorlds(Sony.NP.Matching.GetWorldsRequest,Sony.NP.Matching.WorldsResponse)"/>
            </summary>
        </member>
        <member name="M:Sony.NP.Matching.RoomResponse.ReadResult(System.UInt32,Sony.NP.FunctionTypes,Sony.NP.RequestBase)">
            <summary>
            Read the response data from the plug-in
            </summary>
            <param name="id">The request id.</param>
            <param name="apiCalled">The API called.</param>
            <param name="request">The Request object.</param>
        </member>
        <member name="P:Sony.NP.Matching.RoomResponse.Room">
            <summary>
            Thre room created by the <see cref="M:Sony.NP.Matching.CreateRoom(Sony.NP.Matching.CreateRoomRequest,Sony.NP.Matching.RoomResponse)"/> method.
            </summary>
        </member>
        <member name="T:Sony.NP.Matching.RoomsResponse">
            <summary>
            Response data class containing a list of rooms matching a search criteria.
            </summary>
        </member>
        <member name="M:Sony.NP.Matching.RoomsResponse.ReadResult(System.UInt32,Sony.NP.FunctionTypes,Sony.NP.RequestBase)">
            <summary>
            Read the response data from the plug-in
            </summary>
            <param name="id">The request id.</param>
            <param name="apiCalled">The API called.</param>
            <param name="request">The Request object.</param>
        </member>
        <member name="P:Sony.NP.Matching.RoomsResponse.Rooms">
            <summary>
            A list of retrieved rooms
            </summary>
        </member>
        <member name="T:Sony.NP.Matching.GetRoomPingTimeResponse">
            <summary>
            Response data class containing signaling information (RTT) with the room.
            </summary>
        </member>
        <member name="M:Sony.NP.Matching.GetRoomPingTimeResponse.ReadResult(System.UInt32,Sony.NP.FunctionTypes,Sony.NP.RequestBase)">
            <summary>
            Read the response data from the plug-in
            </summary>
            <param name="id">The request id.</param>
            <param name="apiCalled">The API called.</param>
            <param name="request">The Request object.</param>
        </member>
        <member name="P:Sony.NP.Matching.GetRoomPingTimeResponse.RoundTripTime">
            <summary>
            The time for a signal to be sent plus the time for the ACK to be received. Also known as ping time or round-trip delay time
            </summary>
        </member>
        <member name="T:Sony.NP.Matching.GetDataResponse">
            <summary>
            Response data class containing data (modifiable or not) linked to the bound session of the current room.
            </summary>
        </member>
        <member name="M:Sony.NP.Matching.GetDataResponse.ReadResult(System.UInt32,Sony.NP.FunctionTypes,Sony.NP.RequestBase)">
            <summary>
            Read the response data from the plug-in
            </summary>
            <param name="id">The request id.</param>
            <param name="apiCalled">The API called.</param>
            <param name="request">The Request object.</param>
        </member>
        <member name="P:Sony.NP.Matching.GetDataResponse.Data">
            <summary>
            A buffer containing the requested data
            </summary>
        </member>
        <member name="P:Sony.NP.Matching.GetDataResponse.Type">
            <summary>
            If the buffer is from modifiable or non-modifiable data
            </summary>
        </member>
        <member name="T:Sony.NP.Matching.Reasons">
            <summary>
            Enum listing the possible reasons to refresh a room.
            </summary>
        </member>
        <member name="F:Sony.NP.Matching.Reasons.MemberJoined">
            <summary> A member joined </summary>
        </member>
        <member name="F:Sony.NP.Matching.Reasons.MemberLeft">
            <summary> A member left, see <see cref="P:Sony.NP.Matching.RefreshRoomResponse.Cause"/> for more granularity </summary>
        </member>
        <member name="F:Sony.NP.Matching.Reasons.MemberSignalingUpdate">
            <summary> Connection with a member was either established or lost </summary>
        </member>
        <member name="F:Sony.NP.Matching.Reasons.MemberInfoUpdated">
            <summary> Attributes or other basic information of a member has changed </summary>
        </member>
        <member name="F:Sony.NP.Matching.Reasons.OwnerChanged">
            <summary> The owner changed, see <see cref="P:Sony.NP.Matching.RefreshRoomResponse.Cause"/> for more granularity </summary>
        </member>
        <member name="F:Sony.NP.Matching.Reasons.RoomDestroyed">
            <summary> The room was destroyed, see <see cref="P:Sony.NP.Matching.RefreshRoomResponse.Cause"/> for more granularity </summary>
        </member>
        <member name="F:Sony.NP.Matching.Reasons.RoomKickedOut">
            <summary> The user was kicked out from the room </summary>
        </member>
        <member name="F:Sony.NP.Matching.Reasons.RoomExternalInfoUpdated">
            <summary> External information of the room has changed </summary>
        </member>
        <member name="F:Sony.NP.Matching.Reasons.RoomInternalInfoUpdated">
            <summary> Internal information of the room has changed </summary>
        </member>
        <member name="F:Sony.NP.Matching.Reasons.RoomTopologyUpdated">
            <summary> Topology information of the room has changed </summary>
        </member>
        <member name="F:Sony.NP.Matching.Reasons.RoomSessionInfoUpdated">
            <summary> Session-related information to the room has changed </summary>
        </member>
        <member name="T:Sony.NP.Matching.Causes">
            <summary>
            Cause of room response. Maps to SCE_NP_MATCHING2_EVENT_CAUSE_XXX defines
            </summary>
        </member>
        <member name="F:Sony.NP.Matching.Causes.Unknown">
            <summary> Unknown cause. </summary>
        </member>
        <member name="F:Sony.NP.Matching.Causes.LeaveAction">
            <summary> A member explicitly left the room. (SCE_NP_MATCHING2_EVENT_CAUSE_LEAVE_ACTION). </summary>
        </member>
        <member name="F:Sony.NP.Matching.Causes.KickoutAction">
            <summary> A member explicitly kicked another member out. (SCE_NP_MATCHING2_EVENT_CAUSE_KICKOUT_ACTION). </summary>
        </member>
        <member name="F:Sony.NP.Matching.Causes.GrantOwnerAction">
            <summary> A member explicitly transferred room ownership. (SCE_NP_MATCHING2_EVENT_CAUSE_GRANT_OWNER_ACTION). </summary>
        </member>
        <member name="F:Sony.NP.Matching.Causes.ServerOperation">
            <summary> Event was caused by server operation. (SCE_NP_MATCHING2_EVENT_CAUSE_SERVER_OPERATION). </summary>
        </member>
        <member name="F:Sony.NP.Matching.Causes.MemberDisappeared">
            <summary> A member disappeared. (SCE_NP_MATCHING2_EVENT_CAUSE_MEMBER_DISAPPEARED). </summary>
        </member>
        <member name="F:Sony.NP.Matching.Causes.ServerInternal">
            <summary> Event was caused by an internal server error. (SCE_NP_MATCHING2_EVENT_CAUSE_SERVER_INTERNAL). </summary>
        </member>
        <member name="F:Sony.NP.Matching.Causes.ConnectionError">
            <summary> Connection was severed. (SCE_NP_MATCHING2_EVENT_CAUSE_CONNECTION_ERROR). </summary>
        </member>
        <member name="F:Sony.NP.Matching.Causes.SignedOut">
            <summary> Signed out. (SCE_NP_MATCHING2_EVENT_CAUSE_NP_SIGNED_OUT). </summary>
        </member>
        <member name="F:Sony.NP.Matching.Causes.SystemError">
            <summary> System error occurred. (SCE_NP_MATCHING2_EVENT_CAUSE_SYSTEM_ERROR). </summary>
        </member>
        <member name="F:Sony.NP.Matching.Causes.ContextError">
            <summary> Context error occurred. (SCE_NP_MATCHING2_EVENT_CAUSE_CONTEXT_ERROR). </summary>
        </member>
        <member name="F:Sony.NP.Matching.Causes.ContextAction">
            <summary> Event was caused by a context operation. (SCE_NP_MATCHING2_EVENT_CAUSE_CONTEXT_ACTION). </summary>
        </member>
        <member name="T:Sony.NP.Matching.RefreshRoomResponse">
            <summary>
            Notification provided when a room has to be refreshed.
            </summary>
        </member>
        <member name="M:Sony.NP.Matching.RefreshRoomResponse.ReadResult(System.UInt32,Sony.NP.FunctionTypes,Sony.NP.RequestBase)">
            <summary>
            Read the response data from the plug-in
            </summary>
            <param name="id">The request id.</param>
            <param name="apiCalled">The API called.</param>
            <param name="request">The Request object.</param>
        </member>
        <member name="P:Sony.NP.Matching.RefreshRoomResponse.RoomId">
            <summary>
            The room where the notification is received
            </summary>
        </member>
        <member name="P:Sony.NP.Matching.RefreshRoomResponse.NotificationFromMember">
            <summary>
            Notification sent to other members. Application-defined data
            </summary>
        </member>
        <member name="P:Sony.NP.Matching.RefreshRoomResponse.Reason">
            <summary>
            The reason why the room information needs to be refreshed
            </summary>
        </member>
        <member name="P:Sony.NP.Matching.RefreshRoomResponse.Cause">
            <summary>
            For the reasons that require more granularity, it provides extra information of the cause for the update
            </summary>
        </member>
        <member name="P:Sony.NP.Matching.RefreshRoomResponse.OwnerInfo">
            <summary>
            Only set when the <see cref="P:Sony.NP.Matching.RefreshRoomResponse.Reason"/> is <see cref="F:Sony.NP.Matching.Reasons.OwnerChanged"/>
            </summary>
        </member>
        <member name="P:Sony.NP.Matching.RefreshRoomResponse.MemberInfo">
            <summary>
            Only set when <see cref="P:Sony.NP.Matching.RefreshRoomResponse.Reason"/> is one of the 'Member' enums, see remarks. Depending on the type, it will contain relevant information of the member 
            </summary>
            <remarks>
            Only set when <see cref="P:Sony.NP.Matching.RefreshRoomResponse.Reason"/> is either <see cref="F:Sony.NP.Matching.Reasons.MemberJoined"/>, <see cref="F:Sony.NP.Matching.Reasons.MemberLeft"/>, <see cref="F:Sony.NP.Matching.Reasons.MemberSignalingUpdate"/> or <see cref="F:Sony.NP.Matching.Reasons.MemberInfoUpdated"/>.
            </remarks>
        </member>
        <member name="P:Sony.NP.Matching.RefreshRoomResponse.RoomLeftError">
            <summary>
            Only set when the <see cref="P:Sony.NP.Matching.RefreshRoomResponse.Reason"/> is <see cref="F:Sony.NP.Matching.Reasons.RoomDestroyed"/> or <see cref="F:Sony.NP.Matching.Reasons.RoomKickedOut"/>
            </summary>
        </member>
        <member name="P:Sony.NP.Matching.RefreshRoomResponse.RoomExternalInfo">
            <summary>
            Only set when the <see cref="P:Sony.NP.Matching.RefreshRoomResponse.Reason"/> is <see cref="F:Sony.NP.Matching.Reasons.RoomExternalInfoUpdated"/>
            </summary>
        </member>
        <member name="P:Sony.NP.Matching.RefreshRoomResponse.RoomInternalInfo">
            <summary>
            Only set when the <see cref="P:Sony.NP.Matching.RefreshRoomResponse.Reason"/> is <see cref="F:Sony.NP.Matching.Reasons.RoomInternalInfoUpdated"/>
            </summary>
        </member>
        <member name="P:Sony.NP.Matching.RefreshRoomResponse.RoomSessionInfo">
            <summary>
            Only set when the <see cref="P:Sony.NP.Matching.RefreshRoomResponse.Reason"/> is <see cref="F:Sony.NP.Matching.Reasons.RoomSessionInfoUpdated"/>
            </summary>
        </member>
        <member name="P:Sony.NP.Matching.RefreshRoomResponse.RoomTopology">
            <summary>
            Only set when the <see cref="P:Sony.NP.Matching.RefreshRoomResponse.Reason"/> is <see cref="F:Sony.NP.Matching.Reasons.RoomTopologyUpdated"/>
            </summary>
        </member>
        <member name="T:Sony.NP.Matching.RefreshRoomResponse.OwnerInformation">
            <summary>
            Only set when the <see cref="P:Sony.NP.Matching.RefreshRoomResponse.Reason"/> is <see cref="F:Sony.NP.Matching.Reasons.OwnerChanged"/> 
            </summary>
        </member>
        <member name="F:Sony.NP.Matching.RefreshRoomResponse.OwnerInformation.OWNER_EXCHANGE_SIZE">
            <summary>
            The size of the array containing the old and new owners of the room
            </summary>
        </member>
        <member name="M:Sony.NP.Matching.RefreshRoomResponse.OwnerInformation.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Sony.NP.Matching.JoinRoomRequest"/> class.
            </summary>
        </member>
        <member name="P:Sony.NP.Matching.RefreshRoomResponse.OwnerInformation.Password">
            <summary>
            Only set when the user is the new owner. The password for the private slots
            </summary>
        </member>
        <member name="P:Sony.NP.Matching.RefreshRoomResponse.OwnerInformation.OldAndNewOwners">
            <summary>
            The member Ids of the old and new owners
            </summary>
        </member>
        <member name="T:Sony.NP.Matching.RefreshRoomResponse.RoomExternalInformation">
            <summary>
            Only set when the <see cref="P:Sony.NP.Matching.RefreshRoomResponse.Reason"/> is <see cref="F:Sony.NP.Matching.Reasons.RoomExternalInfoUpdated"/> 
            </summary>
        </member>
        <member name="P:Sony.NP.Matching.RefreshRoomResponse.RoomExternalInformation.Attributes">
            <summary>
            The external attributes modified on the room
            </summary>
        </member>
        <member name="T:Sony.NP.Matching.RefreshRoomResponse.RoomInternalInformation">
            <summary>
            Only set when the <see cref="P:Sony.NP.Matching.RefreshRoomResponse.Reason"/> is <see cref="F:Sony.NP.Matching.Reasons.RoomInternalInfoUpdated"/> 
            </summary>
        </member>
        <member name="P:Sony.NP.Matching.RefreshRoomResponse.RoomInternalInformation.Attributes">
            <summary>
            The internal attributes modified on the room
            </summary>
        </member>
        <member name="P:Sony.NP.Matching.RefreshRoomResponse.RoomInternalInformation.AllowBlockedUsersOfMembers">
            <summary>
            Allows or not adding blocked users of members to the blacklist of the room. The blocked users already added are kept
            </summary>
        </member>
        <member name="P:Sony.NP.Matching.RefreshRoomResponse.RoomInternalInformation.JoinAllLocalUsers">
            <summary>
            Allows or not adding all local users to rooms when more than one local user is available on one system.
            </summary>
        </member>
        <member name="P:Sony.NP.Matching.RefreshRoomResponse.RoomInternalInformation.IsNatRestricted">
            <summary>
            Restricts or not the members that can join the room to only those who can establish P2P connections
            </summary>
        </member>
        <member name="P:Sony.NP.Matching.RefreshRoomResponse.RoomInternalInformation.NumReservedSlots">
            <summary>
            Modifies the number of reserved slots in the room. 
            </summary>
        </member>
        <member name="P:Sony.NP.Matching.RefreshRoomResponse.RoomInternalInformation.Visibility">
            <summary>
            Makes the room private, public or public with reserved slots
            </summary>
        </member>
        <member name="P:Sony.NP.Matching.RefreshRoomResponse.RoomInternalInformation.CloseRoom">
            <summary>
            Closes the room. It is no longer provided in searches
            </summary>
        </member>
        <member name="T:Sony.NP.Matching.RefreshRoomResponse.RoomSessionInformation">
            <summary>
            Only set when the <see cref="P:Sony.NP.Matching.RefreshRoomResponse.Reason"/> is <see cref="F:Sony.NP.Matching.Reasons.RoomSessionInfoUpdated"/> 
            </summary>
        </member>
        <member name="P:Sony.NP.Matching.RefreshRoomResponse.RoomSessionInformation.DisplayOnSystem">
            <summary>
            Makes the Session visible or not in the system 
            </summary>
        </member>
        <member name="P:Sony.NP.Matching.RefreshRoomResponse.RoomSessionInformation.IsSystemJoinable">
            <summary>
            Allows or not users joining from the system (the platform)
            </summary>
        </member>
        <member name="P:Sony.NP.Matching.RefreshRoomResponse.RoomSessionInformation.HasChangeableData">
            <summary>
            Specifies if there is changeable data in the Session
            </summary>
        </member>
        <member name="P:Sony.NP.Matching.RefreshRoomResponse.RoomSessionInformation.BoundSessionId">
            <summary>
            This handles edge cases where users join late to sessions 
            </summary>
        </member>
        <member name="T:Sony.NP.Matching.NewRoomMessageResponse">
            <summary>
            Notification provided when a room has to be refreshed.
            </summary>
        </member>
        <member name="M:Sony.NP.Matching.NewRoomMessageResponse.ReadResult(System.UInt32,Sony.NP.FunctionTypes,Sony.NP.RequestBase)">
            <summary>
            Read the response data from the plug-in
            </summary>
            <param name="id">The request id.</param>
            <param name="apiCalled">The API called.</param>
            <param name="request">The Request object.</param>
        </member>
        <member name="P:Sony.NP.Matching.NewRoomMessageResponse.RoomId">
            <summary>
            The room where the message is received
            </summary>
        </member>
        <member name="P:Sony.NP.Matching.NewRoomMessageResponse.Data">
            <summary>
            The message information. If it is a chat message, the data is in UTF-8
            </summary>
        </member>
        <member name="P:Sony.NP.Matching.NewRoomMessageResponse.DataAsString">
            <summary>
            The message information as a string. If it is a chat message, the data is in UTF-8
            </summary>
            <exception cref="T:Sony.NP.NpToolkitException">Will throw an exception if <see cref="P:Sony.NP.Matching.NewRoomMessageResponse.IsChatMsg"/> is false.</exception>
        </member>
        <member name="P:Sony.NP.Matching.NewRoomMessageResponse.Sender">
            <summary>
            The member sending the message
            </summary>
        </member>
        <member name="P:Sony.NP.Matching.NewRoomMessageResponse.IsChatMsg">
            <summary>
            If the message is a chat message. In that case, the <see cref="P:Sony.NP.Matching.NewRoomMessageResponse.Data"/> will be in UTF-8 and it may be filtered by the vulgarity filter
            </summary>
        </member>
        <member name="P:Sony.NP.Matching.NewRoomMessageResponse.IsFiltered">
            <summary>
            Indicates if the chat message has been filtered or not.
            </summary>
        </member>
        <member name="T:Sony.NP.Matching.CurrentPlatform">
            <summary>
            The platform that the session is active on
            </summary>
        </member>
        <member name="F:Sony.NP.Matching.CurrentPlatform.NotSet">
            <summary> The value has not been set. </summary>
        </member>
        <member name="F:Sony.NP.Matching.CurrentPlatform.PSVita">
            <summary> Current platform is PS Vita. </summary>
        </member>
        <member name="F:Sony.NP.Matching.CurrentPlatform.PS4">
            <summary> Current platform is PS4. </summary>
        </member>
        <member name="T:Sony.NP.Matching.InvitationReceivedResponse">
            <summary>
            Push notification that is sent to the NP Toolkit 2 callback when an invitation has been received
            </summary>
        </member>
        <member name="M:Sony.NP.Matching.InvitationReceivedResponse.ReadResult(System.UInt32,Sony.NP.FunctionTypes,Sony.NP.RequestBase)">
            <summary>
            Read the response data from the plug-in
            </summary>
            <param name="id">The request id.</param>
            <param name="apiCalled">The API called.</param>
            <param name="request">The Request object.</param>
        </member>
        <member name="P:Sony.NP.Matching.InvitationReceivedResponse.LocalUpdatedUser">
            <summary>
            IDs of the local recipient
            </summary>
        </member>
        <member name="P:Sony.NP.Matching.InvitationReceivedResponse.RemoteUser">
            <summary>
            IDs of the sender
            </summary>
        </member>
        <member name="P:Sony.NP.Matching.InvitationReceivedResponse.Platform">
            <summary>
            The platform that the invitation was sent from
            </summary>
        </member>
        <member name="T:Sony.NP.Matching.NpInvitationId">
            <summary>
            Invitation ID
            </summary>
        </member>
        <member name="F:Sony.NP.Matching.NpInvitationId.NP_INVITATION_ID_MAX_SIZE">
            <summary>
            Maximum length of the invitiation id
            </summary>
        </member>
        <member name="M:Sony.NP.Matching.NpInvitationId.ToString">
            <summary>
            Return the id as a string
            </summary>
            <returns>The invitiation id.</returns>
        </member>
        <member name="P:Sony.NP.Matching.NpInvitationId.Id">
            <summary>
            Invitation ID string 
            </summary>
        </member>
        <member name="T:Sony.NP.Matching.SessionInvitationEventResponse">
            <summary>
            Notification that is received when a local player accepts an invitiation to join a room.
            </summary>
        </member>
        <member name="M:Sony.NP.Matching.SessionInvitationEventResponse.ReadResult(System.UInt32,Sony.NP.FunctionTypes,Sony.NP.RequestBase)">
            <summary>
            Read the response data from the plug-in
            </summary>
            <param name="id">The request id.</param>
            <param name="apiCalled">The API called.</param>
            <param name="request">The Request object.</param>
        </member>
        <member name="P:Sony.NP.Matching.SessionInvitationEventResponse.SessionId">
            <summary>
            Session ID
            </summary>
        </member>
        <member name="P:Sony.NP.Matching.SessionInvitationEventResponse.InvitationId">
            <summary>
            Invitation ID
            </summary>
        </member>
        <member name="P:Sony.NP.Matching.SessionInvitationEventResponse.AcceptedInvite">
            <summary>
            If true, the user "accepts invitation and joins the game" and has a valid invitation id. Otherwise it means the user performed an action that joins from session information, rather than an invitation.
            </summary>
        </member>
        <member name="P:Sony.NP.Matching.SessionInvitationEventResponse.OnlineId">
            <summary>
            Online ID of user who joined session or accepted invitation
            </summary>
        </member>
        <member name="P:Sony.NP.Matching.SessionInvitationEventResponse.UserId">
            <summary>
            User ID of user who joined session or accepted invitation
            </summary>
        </member>
        <member name="P:Sony.NP.Matching.SessionInvitationEventResponse.ReferralOnlineId">
            <summary>
            Online ID of the referral source user
            </summary>
        </member>
        <member name="P:Sony.NP.Matching.SessionInvitationEventResponse.ReferralAccountId">
            <summary>
            Account ID of the referral source user
            </summary>
        </member>
        <member name="T:Sony.NP.Matching.NpPlayTogetherInvitee">
            <summary>
            This structure contains ID information for an invitee to Play Together.
            </summary>
        </member>
        <member name="P:Sony.NP.Matching.NpPlayTogetherInvitee.AccountId">
            <summary>
            The account ID to invite to Play Together.
            </summary>
        </member>
        <member name="P:Sony.NP.Matching.NpPlayTogetherInvitee.OnlineId">
            <summary>
            The online ID to invite to Play Together.
            </summary>
        </member>
        <member name="T:Sony.NP.Matching.PlayTogetherHostEventResponse">
            <summary>
            Notification that is received when a local player starts the app via playtogether.
            </summary>
        </member>
        <member name="M:Sony.NP.Matching.PlayTogetherHostEventResponse.ReadResult(System.UInt32,Sony.NP.FunctionTypes,Sony.NP.RequestBase)">
            <summary>
            Read the response data from the plug-in
            </summary>
            <param name="id">The request id.</param>
            <param name="apiCalled">The API called.</param>
            <param name="request">The Request object.</param>
        </member>
        <member name="P:Sony.NP.Matching.PlayTogetherHostEventResponse.UserId">
            <summary>
            User ID of the local user that started the game.
            </summary>
        </member>
        <member name="P:Sony.NP.Matching.PlayTogetherHostEventResponse.Invitees">
            <summary>
            The players to invite to Play Together.
            </summary>
        </member>
        <member name="T:Sony.NP.Messaging">
            <summary>
            Messaging service related functionality.
            </summary>
        </member>
        <member name="M:Sony.NP.Messaging.SendInGameMessage(Sony.NP.Messaging.SendInGameMessageRequest,Sony.NP.Core.EmptyResponse)">
            <summary>
            This function sends an in-game message to the target user.
            </summary>
            <remarks>
            Usage of this method also requires the <see cref="P:Sony.NP.ServerPushNotifications.NewInGameMessage"/> to be initialised to true, other it will result in error SCE_NP_IN_GAME_MESSAGE_ERROR_LIB_CONTEXT_NOT_FOUND
            </remarks>
            <param name="request">Parameters needed to send an in-game data message </param>
            <param name="response">This response does not have data, only return code</param>
            <returns>If the operation is asynchronous, the function provides the request Id.</returns>
            <exception cref="T:Sony.NP.NpToolkitException">Will throw an exception either when the request data is invalid, or an internal error has occured inside the NpToolkit plug-in.</exception>
        </member>
        <member name="M:Sony.NP.Messaging.DisplayReceivedGameDataMessagesDialog(Sony.NP.Messaging.DisplayReceivedGameDataMessagesDialogRequest,Sony.NP.Core.EmptyResponse)">
            <summary>
            This function opens the System Received Game Data Messages Dialog (also known as Game Alerts on the system).
            </summary>
            <param name="request">Parameters needed to open the Received Game Data Messages Dialog </param>
            <param name="response">This response does not have data, only return code</param>
            <returns>If the operation is asynchronous, the function provides the request Id.</returns>
            <exception cref="T:Sony.NP.NpToolkitException">Will throw an exception either when the request data is invalid, or an internal error has occured inside the NpToolkit plug-in.</exception>
        </member>
        <member name="M:Sony.NP.Messaging.SendGameDataMessage(Sony.NP.Messaging.SendGameDataMessageRequest,Sony.NP.Core.EmptyResponse)">
            <summary>
            This function sends a message that contains data defined by the application (game data message).
            </summary>
            <param name="request">Parameters needed to send a Game Data Message</param>
            <param name="response">This response does not have data, only return code</param>
            <returns>If the operation is asynchronous, the function provides the request Id.</returns>
            <exception cref="T:Sony.NP.NpToolkitException">Will throw an exception either when the request data is invalid, or an internal error has occured inside the NpToolkit plug-in.</exception>
        </member>
        <member name="M:Sony.NP.Messaging.ConsumeGameDataMessage(Sony.NP.Messaging.ConsumeGameDataMessageRequest,Sony.NP.Core.EmptyResponse)">
            <summary>
            This function is used to set a game data message as used, to keep a track of the game data messages already used by the application.
            </summary>
            <param name="request">Game data message Id to be set as used </param>
            <param name="response">This response does not have data, only return code</param>
            <returns>If the operation is asynchronous, the function provides the request Id.</returns>
            <exception cref="T:Sony.NP.NpToolkitException">Will throw an exception either when the request data is invalid, or an internal error has occured inside the NpToolkit plug-in.</exception>
        </member>
        <member name="M:Sony.NP.Messaging.GetReceivedGameDataMessages(Sony.NP.Messaging.GetReceivedGameDataMessagesRequest,Sony.NP.Messaging.GameDataMessagesResponse)">
            <summary>
            This function returns a list of game data messages received by the calling user.
            </summary>
            <param name="request">Parameters needed to get game data messages </param>
            <param name="response">This response contains a list of <c>GameDataMessage</c> objects.</param>
            <returns>If the operation is asynchronous, the function provides the request Id.</returns>
            <exception cref="T:Sony.NP.NpToolkitException">Will throw an exception either when the request data is invalid, or an internal error has occured inside the NpToolkit plug-in.</exception>
        </member>
        <member name="M:Sony.NP.Messaging.GetGameDataMessageThumbnail(Sony.NP.Messaging.GetGameDataMessageThumbnailRequest,Sony.NP.Messaging.GameDataMessageThumbnailResponse)">
            <summary>
            This function returns the thumbnail of a game data message as an array of bytes.
            </summary>
            <param name="request">Parameters needed to get the thumbnail of a game data message </param>
            <param name="response">This response contains the return code and a pointer to the thumbnail of the game data message</param>
            <returns>If the operation is asynchronous, the function provides the request Id.</returns>
            <exception cref="T:Sony.NP.NpToolkitException">Will throw an exception either when the request data is invalid, or an internal error has occured inside the NpToolkit plug-in.</exception>
        </member>
        <member name="M:Sony.NP.Messaging.GetGameDataMessageAttachment(Sony.NP.Messaging.GetGameDataMessageAttachmentRequest,Sony.NP.Messaging.GameDataMessageAttachmentResponse)">
            <summary>
            This function returns the attachment data of a game data message as an array of bytes.
            </summary>
            <param name="request">Parameters needed to get the attachment data of a game data message </param>
            <param name="response">This response contains the return code and a pointer to the attachment data of the game data message</param>
            <returns>If the operation is asynchronous, the function provides the request Id.</returns>
            <exception cref="T:Sony.NP.NpToolkitException">Will throw an exception either when the request data is invalid, or an internal error has occured inside the NpToolkit plug-in.</exception>
        </member>
        <member name="T:Sony.NP.Messaging.SendInGameMessageRequest">
            <summary>
            This class represents the request to send an in-game data message.
            </summary>
        </member>
        <member name="F:Sony.NP.Messaging.SendInGameMessageRequest.NP_IN_GAME_MESSAGE_DATA_SIZE_MAX">
            <summary>
            Maximum size of the <see cref="P:Sony.NP.Messaging.SendInGameMessageRequest.Message"/> array.
            </summary>
        </member>
        <member name="M:Sony.NP.Messaging.SendInGameMessageRequest.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Sony.NP.Messaging.SendInGameMessageRequest"/> class.
            </summary>
        </member>
        <member name="P:Sony.NP.Messaging.SendInGameMessageRequest.Message">
            <summary>
            The binary data message to be sent
            </summary>
            <exception cref="T:Sony.NP.NpToolkitException">Will throw an exception if the array is larger than <see cref="F:Sony.NP.Messaging.SendInGameMessageRequest.NP_IN_GAME_MESSAGE_DATA_SIZE_MAX"/>.</exception>
        </member>
        <member name="P:Sony.NP.Messaging.SendInGameMessageRequest.RecipientId">
            <summary>
            The recipient to receive the message
            </summary>
        </member>
        <member name="P:Sony.NP.Messaging.SendInGameMessageRequest.RecipientPlatformType">
            <summary>
            The platform of the recipient receiving the message
            </summary>
        </member>
        <member name="T:Sony.NP.Messaging.DisplayReceivedGameDataMessagesDialogRequest">
            <summary>
            This request is sent to the library to open a dialog for the user "Game Alerts" (Game Data Messages).
            </summary>
        </member>
        <member name="M:Sony.NP.Messaging.DisplayReceivedGameDataMessagesDialogRequest.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Sony.NP.Messaging.DisplayReceivedGameDataMessagesDialogRequest"/> class.
            </summary>
        </member>
        <member name="T:Sony.NP.Messaging.GameCustomDataTypes">
            <summary>
            This enum identifies the type of data a game data message can have.
            </summary>
        </member>
        <member name="F:Sony.NP.Messaging.GameCustomDataTypes.Invalid">
            <summary> Incorrect value for a type of Game Data Message </summary>
        </member>
        <member name="F:Sony.NP.Messaging.GameCustomDataTypes.Url">
            <summary> The Game Data Message has a URL (it will open a URL in the browser of the platform) </summary>
        </member>
        <member name="F:Sony.NP.Messaging.GameCustomDataTypes.Attachment">
            <summary> The Game Data Message has an attachment (it will open the application and trigger a system event of game data received)  </summary>
        </member>
        <member name="T:Sony.NP.Messaging.GameDataMessageImage">
            <summary>
            Class to set the thumbnail image of the message.
            </summary>
        </member>
        <member name="F:Sony.NP.Messaging.GameDataMessageImage.IMAGE_PATH_MAX_LEN">
            <summary>
            The maximum length of the path where the image is located
            </summary>
        </member>
        <member name="P:Sony.NP.Messaging.GameDataMessageImage.ImgPath">
            <summary>
            The path of the image to upload to the Game Custom Data server. e.g. Application.streamingAssetsPath + "/PS4MessageImage.jpg"
            </summary>
            <exception cref="T:Sony.NP.NpToolkitException">Will throw an exception if the path is more than <see cref="F:Sony.NP.Messaging.GameDataMessageImage.IMAGE_PATH_MAX_LEN"/> characters.</exception>
        </member>
        <member name="T:Sony.NP.Messaging.LocalizedMetadata">
            <summary>
            Class to set the localized information for the data (name and description).
            </summary>
        </member>
        <member name="F:Sony.NP.Messaging.LocalizedMetadata.MAX_SIZE_DATA_NAME">
            <summary>
            Maximum size the localized name of the attachment can have
            </summary>
        </member>
        <member name="F:Sony.NP.Messaging.LocalizedMetadata.MAX_SIZE_DATA_DESCRIPTION">
            <summary>
            Maximum size the localized description of the attachment can have
            </summary>
        </member>
        <member name="P:Sony.NP.Messaging.LocalizedMetadata.LanguageCode">
            <summary>
            The localized language for the name and description. Five digits format (countryCode-language)
            Takes a copy of the code, see remarks for details.
            </summary>
            <remarks>
            Takes a copy of the language code or returns a copy. The language code must be assign explicitly. 
            </remarks>
        </member>
        <member name="P:Sony.NP.Messaging.LocalizedMetadata.Name">
            <summary>
            The localized name in the language specified in <see cref="P:Sony.NP.Messaging.LocalizedMetadata.LanguageCode"/>
            </summary>
            <exception cref="T:Sony.NP.NpToolkitException">Will throw an exception if the string is more than <see cref="F:Sony.NP.Messaging.LocalizedMetadata.MAX_SIZE_DATA_NAME"/> characters.</exception>
        </member>
        <member name="P:Sony.NP.Messaging.LocalizedMetadata.Description">
            <summary>
            The localized description in the language specified in <see cref="P:Sony.NP.Messaging.LocalizedMetadata.LanguageCode"/>
            </summary>
            <exception cref="T:Sony.NP.NpToolkitException">Will throw an exception if the string is more than <see cref="F:Sony.NP.Messaging.LocalizedMetadata.MAX_SIZE_DATA_DESCRIPTION"/> characters.</exception>
        </member>
        <member name="T:Sony.NP.Messaging.SendGameDataMessageRequest">
            <summary>
            This request class is used to send a game data message. The data can either be a Url or an attachment.
            </summary>
        </member>
        <member name="F:Sony.NP.Messaging.SendGameDataMessageRequest.MAX_SIZE_TEXT_MESSAGE">
            <summary>
            The maximum size the text message to be send can have
            </summary>
        </member>
        <member name="F:Sony.NP.Messaging.SendGameDataMessageRequest.MAX_SIZE_DATA_NAME">
            <summary>
            The maximum size the name of the data (attachment/url) can have
            </summary>
        </member>
        <member name="F:Sony.NP.Messaging.SendGameDataMessageRequest.MAX_SIZE_DATA_DESCRIPTION">
            <summary>
            The maximum size the description of the data (attachment/url) can have
            </summary>
        </member>
        <member name="F:Sony.NP.Messaging.SendGameDataMessageRequest.MAX_NUM_RECIPIENTS">
            <summary>
            The maximum number of recipients that can receive the message
            </summary>
        </member>
        <member name="F:Sony.NP.Messaging.SendGameDataMessageRequest.MAX_SIZE_ATTACHMENT">
            <summary>
            The maximum size the data attachment can have
            </summary>
        </member>
        <member name="F:Sony.NP.Messaging.SendGameDataMessageRequest.MAX_URL_SIZE">
            <summary>
            The maximum size the data url can have
            </summary>
        </member>
        <member name="F:Sony.NP.Messaging.SendGameDataMessageRequest.MAX_LOCALIZED_METADATA">
            <summary>
            The maximum size the localized metadata array
            </summary>
        </member>
        <member name="M:Sony.NP.Messaging.SendGameDataMessageRequest.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Sony.NP.Messaging.SendGameDataMessageRequest"/> class.
            </summary>
        </member>
        <member name="P:Sony.NP.Messaging.SendGameDataMessageRequest.TextMessage">
            <summary>
            The text message to be sent
            </summary>
            <exception cref="T:Sony.NP.NpToolkitException">Will throw an exception if the string is more than <see cref="F:Sony.NP.Messaging.SendGameDataMessageRequest.MAX_SIZE_TEXT_MESSAGE"/> characters.</exception>
        </member>
        <member name="P:Sony.NP.Messaging.SendGameDataMessageRequest.DataName">
            <summary>
            The name of the data (either the attachment or the url data)
            </summary>
            <exception cref="T:Sony.NP.NpToolkitException">Will throw an exception if the string is more than <see cref="F:Sony.NP.Messaging.SendGameDataMessageRequest.MAX_SIZE_DATA_NAME"/> characters.</exception>
        </member>
        <member name="P:Sony.NP.Messaging.SendGameDataMessageRequest.DataDescription">
            <summary>
            The description of the data (either the attachment or the url data)
            </summary>
            <exception cref="T:Sony.NP.NpToolkitException">Will throw an exception if the string is more than <see cref="F:Sony.NP.Messaging.SendGameDataMessageRequest.MAX_SIZE_DATA_DESCRIPTION"/> characters.</exception>
        </member>
        <member name="P:Sony.NP.Messaging.SendGameDataMessageRequest.Recipients">
            <summary>
            The recipients to send the game custom data to. If the sender user can edit the recipients, leave blank. Otherwise, mandatory
            </summary>
        </member>
        <member name="P:Sony.NP.Messaging.SendGameDataMessageRequest.DataType">
            <summary>
            If the custom data to be send is an attachment or a url. Will be set to the message type when either <see cref="P:Sony.NP.Messaging.SendGameDataMessageRequest.Attachment"/> or <see cref="P:Sony.NP.Messaging.SendGameDataMessageRequest.Url"/> is set.
            </summary>
        </member>
        <member name="P:Sony.NP.Messaging.SendGameDataMessageRequest.Attachment">
            <summary>
            The attachment data for an attachment type message. Will set <see cref="P:Sony.NP.Messaging.SendGameDataMessageRequest.DataType"/> to <see cref="F:Sony.NP.Messaging.GameCustomDataTypes.Attachment"/>
            </summary>
            <exception cref="T:Sony.NP.NpToolkitException">Will throw an exception if the array is larger than <see cref="F:Sony.NP.Messaging.SendGameDataMessageRequest.MAX_SIZE_ATTACHMENT"/>.</exception>
        </member>
        <member name="P:Sony.NP.Messaging.SendGameDataMessageRequest.ExpireMinutes">
            <summary>
            The minutes for this message to be valid. Specify 0 if there is no expiration.
            </summary>
        </member>
        <member name="P:Sony.NP.Messaging.SendGameDataMessageRequest.Url">
            <summary>
            If the custom data is a URL, specify the URL here. Will set <see cref="P:Sony.NP.Messaging.SendGameDataMessageRequest.DataType"/> to <see cref="F:Sony.NP.Messaging.GameCustomDataTypes.Url"/>
            </summary>
            <exception cref="T:Sony.NP.NpToolkitException">Will throw an exception if the string is more than <see cref="F:Sony.NP.Messaging.SendGameDataMessageRequest.MAX_URL_SIZE"/> characters.</exception>
        </member>
        <member name="P:Sony.NP.Messaging.SendGameDataMessageRequest.LocalizedMetaData">
            <summary>
            Information for localization. Includes the language code, the name and the description of the data. If the system language of the recipient matches a localized language, the localized information will be retrieved by the APIs and shown by the system. Otherwise, the default information (non-localized) will be used
            </summary>
            <exception cref="T:Sony.NP.NpToolkitException">Will throw an exception if the array is more than <see cref="F:Sony.NP.Messaging.SendGameDataMessageRequest.MAX_LOCALIZED_METADATA"/> characters.</exception>
        </member>
        <member name="P:Sony.NP.Messaging.SendGameDataMessageRequest.Thumbnail">
            <summary>
            The thumbnail image that goes in the message. It is mandatory
            </summary>
        </member>
        <member name="P:Sony.NP.Messaging.SendGameDataMessageRequest.MaxNumberRecipientsToAdd">
            <summary>
            If the dialog is enabled and the sender user can edit the recipients, then the maximum number of recipients the sender user can add must be specified
            </summary>
        </member>
        <member name="P:Sony.NP.Messaging.SendGameDataMessageRequest.EnableDialog">
            <summary>
            If a dialog is displayed to the sender user or the message is directly sent from the application without user interaction
            </summary>
        </member>
        <member name="P:Sony.NP.Messaging.SendGameDataMessageRequest.SenderCanEditRecipients">
            <summary>
            In case the dialog is enabled <see cref="P:Sony.NP.Messaging.SendGameDataMessageRequest.EnableDialog"/>, this boolean specifies if the sender user can modify the recipients. If true then set <see cref="P:Sony.NP.Messaging.SendGameDataMessageRequest.MaxNumberRecipientsToAdd"/>. If false then set <see cref="P:Sony.NP.Messaging.SendGameDataMessageRequest.Recipients"/>
            </summary>
        </member>
        <member name="P:Sony.NP.Messaging.SendGameDataMessageRequest.IsPS4Available">
            <summary>
            If the message is sent to a PS4 platform
            </summary>
        </member>
        <member name="P:Sony.NP.Messaging.SendGameDataMessageRequest.IsPSVitaAvailable">
            <summary>
            If the message is sent to a PS Vita platform
            </summary>
        </member>
        <member name="P:Sony.NP.Messaging.SendGameDataMessageRequest.AddGameDataMsgIdToUrl">
            <summary>
            When set to true, it will append the id at the end of the URL specified in <see cref="P:Sony.NP.Messaging.SendGameDataMessageRequest.Url"/> so the custom data message Id can be sent on the URL, perhaps to be recognized by the hosting server
            </summary>
        </member>
        <member name="T:Sony.NP.Messaging.ConsumeGameDataMessageRequest">
            <summary>
            Request class to set a game data message as used.
            </summary>
        </member>
        <member name="M:Sony.NP.Messaging.ConsumeGameDataMessageRequest.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Sony.NP.Messaging.ConsumeGameDataMessageRequest"/> class.
            </summary>
        </member>
        <member name="P:Sony.NP.Messaging.ConsumeGameDataMessageRequest.GameDataMsgId">
            <summary>
            The game data message Id of the game data message to retrieve the thumbnail image from
            </summary>
        </member>
        <member name="T:Sony.NP.Messaging.GameDataMessagesToRetrieve">
            <summary>
            This enum represents the way the game data messages to be retrieved will be requested.
            </summary>
        </member>
        <member name="F:Sony.NP.Messaging.GameDataMessagesToRetrieve.FromGameDataMsgIds">
            <summary> When obtaining game data messages, specify this option if the game custom data Ids of those messages are going to be provided in the request </summary>
        </member>
        <member name="F:Sony.NP.Messaging.GameDataMessagesToRetrieve.All">
            <summary> When obtaining game data messages, specify this option if all game custom data Ids want to be retrieved. Pagination will need to be specified </summary>
        </member>
        <member name="T:Sony.NP.Messaging.GetReceivedGameDataMessagesRequest">
            <summary>
            This request class is used to get a set of game data messages that have been received by the calling user.
            </summary>
        </member>
        <member name="F:Sony.NP.Messaging.GetReceivedGameDataMessagesRequest.MAX_NUM_GAME_DATA_MSG_IDS">
            <summary>
            The maximum number of game data Id messages that can be specified to be retrieved
            </summary>
        </member>
        <member name="F:Sony.NP.Messaging.GetReceivedGameDataMessagesRequest.MAX_PAGE_SIZE">
            <summary>
            The maximum number of a page containing game data messages in case all of them need to be retrieved
            </summary>
        </member>
        <member name="M:Sony.NP.Messaging.GetReceivedGameDataMessagesRequest.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Sony.NP.Messaging.GetReceivedGameDataMessagesRequest"/> class.
            </summary>
        </member>
        <member name="P:Sony.NP.Messaging.GetReceivedGameDataMessagesRequest.GameDataMsgIds">
            <summary>
            In case the game data message Ids are provided, specify them here. <see cref="P:Sony.NP.Messaging.GetReceivedGameDataMessagesRequest.RetrieveType"/> will be <see cref="F:Sony.NP.Messaging.GameDataMessagesToRetrieve.FromGameDataMsgIds"/>.
            </summary>
            <exception cref="T:Sony.NP.NpToolkitException">Will throw an exception if the array is more than <see cref="F:Sony.NP.Messaging.GetReceivedGameDataMessagesRequest.MAX_NUM_GAME_DATA_MSG_IDS"/> characters.</exception>
        </member>
        <member name="P:Sony.NP.Messaging.GetReceivedGameDataMessagesRequest.PageSize">
            <summary>
            In case all game data messages want to be retrieved, specify the page size here. <see cref="P:Sony.NP.Messaging.GetReceivedGameDataMessagesRequest.RetrieveType"/> will be <see cref="F:Sony.NP.Messaging.GameDataMessagesToRetrieve.All"/>.
            </summary>
            <exception cref="T:Sony.NP.NpToolkitException">Will throw an exception if value is more than <see cref="F:Sony.NP.Messaging.GetReceivedGameDataMessagesRequest.MAX_PAGE_SIZE"/>.</exception>
        </member>
        <member name="P:Sony.NP.Messaging.GetReceivedGameDataMessagesRequest.Offset">
            <summary>
            In case all game data messages want to be retrieved, specify the first element to be retrieved here. <see cref="P:Sony.NP.Messaging.GetReceivedGameDataMessagesRequest.RetrieveType"/> will be <see cref="F:Sony.NP.Messaging.GameDataMessagesToRetrieve.All"/>. The first element is 0
            </summary>
        </member>
        <member name="P:Sony.NP.Messaging.GetReceivedGameDataMessagesRequest.RetrieveType">
            <summary>
            Game data messages can be provided in bulk (all of them) or just a selection of them (specifying the game data message Id). This is set when using either <see cref="P:Sony.NP.Messaging.GetReceivedGameDataMessagesRequest.GameDataMsgIds"/> or <see cref="P:Sony.NP.Messaging.GetReceivedGameDataMessagesRequest.PageSize"/> and <see cref="P:Sony.NP.Messaging.GetReceivedGameDataMessagesRequest.Offset"/>.
            </summary>
        </member>
        <member name="T:Sony.NP.Messaging.GetGameDataMessageThumbnailRequest">
            <summary>
            This request class is used to identify a game data message whose thumbnail image wants to be retrieved.
            </summary>
        </member>
        <member name="M:Sony.NP.Messaging.GetGameDataMessageThumbnailRequest.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Sony.NP.Messaging.GetGameDataMessageThumbnailRequest"/> class.
            </summary>
        </member>
        <member name="P:Sony.NP.Messaging.GetGameDataMessageThumbnailRequest.GameDataMsgId">
            <summary>
            The game data message Id of the game data message to retrieve the thumbnail image from
            </summary>
        </member>
        <member name="T:Sony.NP.Messaging.GetGameDataMessageAttachmentRequest">
            <summary>
            This request class is used to identify a game data message whose attachment data wants to be retrieved.
            </summary>
        </member>
        <member name="M:Sony.NP.Messaging.GetGameDataMessageAttachmentRequest.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Sony.NP.Messaging.GetGameDataMessageAttachmentRequest"/> class.
            </summary>
        </member>
        <member name="P:Sony.NP.Messaging.GetGameDataMessageAttachmentRequest.GameDataMsgId">
            <summary>
            The game data message Id of the game data message whose attachment data wants to be retrieved
            </summary>
        </member>
        <member name="T:Sony.NP.Messaging.GameDataMessageDetails">
            <summary>
            This class represents details of a game data message.
            </summary>
        </member>
        <member name="P:Sony.NP.Messaging.GameDataMessageDetails.DataName">
            <summary>
            The name of a game custom data message. In case the system language matches a localized name, the localized name is the one set. Otherwise, the default name is the one provided
            </summary>
        </member>
        <member name="P:Sony.NP.Messaging.GameDataMessageDetails.DataDescription">
            <summary>
            The description of a game custom data message. In case the system language matches a localized description, the localized description is the one set. Otherwise, the default description is the one provided
            </summary>
        </member>
        <member name="P:Sony.NP.Messaging.GameDataMessageDetails.TextMessage">
            <summary>
            The text message sent in the game custom data message. This parameter can't be localized
            </summary>
        </member>
        <member name="T:Sony.NP.Messaging.GameDataMessage">
            <summary>
            This class represents a game data message provided to the application.
            </summary>
        </member>
        <member name="P:Sony.NP.Messaging.GameDataMessage.GameDataMsgId">
            <summary>
            The Id of the game data message
            </summary>
        </member>
        <member name="P:Sony.NP.Messaging.GameDataMessage.FromUser">
            <summary>
            The sender of the game data message
            </summary>
        </member>
        <member name="P:Sony.NP.Messaging.GameDataMessage.ReceivedDate">
            <summary>
            The date the game data message was received by the recipient. The format is RFC3339 (ISO8601) fixed to UTC
            </summary>
        </member>
        <member name="P:Sony.NP.Messaging.GameDataMessage.ExpiredDate">
            <summary>
            If an expire date in minutes has been set (a value other than 0) the date for the expiration. The format is RFC3339 (ISO8601) fixed to UTC
            </summary>
        </member>
        <member name="P:Sony.NP.Messaging.GameDataMessage.IsPS4Available">
            <summary>
            If the game data message is available on PS4 platform
            </summary>
        </member>
        <member name="P:Sony.NP.Messaging.GameDataMessage.IsPSVitaAvailable">
            <summary>
            If the game data message is available on PS Vita platform
            </summary>
        </member>
        <member name="P:Sony.NP.Messaging.GameDataMessage.DataType">
            <summary>
            The type of data for the game data message. It can be an attachment (if the attachment wants to be received, a separate call needs to be made) or a URL, which is provided in this class
            </summary>
        </member>
        <member name="P:Sony.NP.Messaging.GameDataMessage.Url">
            <summary>
            If the game data message is of <see cref="P:Sony.NP.Messaging.GameDataMessage.DataType"/> is <see cref="F:Sony.NP.Messaging.GameCustomDataTypes.Url"/>, the URL set when sending the game data message. It includes the game custom data Id in the URL (as "itemId=") if that option was set to true when sending the game data message
            </summary>
        </member>
        <member name="P:Sony.NP.Messaging.GameDataMessage.Details">
            <summary>
            Only set when the game data messages were requested specifying their Ids (blank when <see cref="F:Sony.NP.Messaging.GameDataMessagesToRetrieve.All"/> was selected in the request class). It provides the text message, data name and data description of the game data message
            </summary>
        </member>
        <member name="P:Sony.NP.Messaging.GameDataMessage.HasDetails">
            <summary>
            If the <see cref="P:Sony.NP.Messaging.GameDataMessage.Details"/> class was meant to be set or not. It will only be set when <see cref="F:Sony.NP.Messaging.GameDataMessagesToRetrieve.FromGameDataMsgIds"/> is specified as <see cref="P:Sony.NP.Messaging.GetReceivedGameDataMessagesRequest.RetrieveType"/> of request class
            </summary>
        </member>
        <member name="P:Sony.NP.Messaging.GameDataMessage.IsUsed">
            <summary>
            If the game data message has been already used
            </summary>
        </member>
        <member name="T:Sony.NP.Messaging.GameDataMessagesResponse">
            <summary>
            The response data class that contains game data messages retrieved.
            </summary>
        </member>
        <member name="M:Sony.NP.Messaging.GameDataMessagesResponse.ReadResult(System.UInt32,Sony.NP.FunctionTypes,Sony.NP.RequestBase)">
            <summary>
            Read the response data from the plug-in
            </summary>
            <param name="id">The request id.</param>
            <param name="apiCalled">The API called.</param>
            <param name="request">The Request object.</param>
        </member>
        <member name="P:Sony.NP.Messaging.GameDataMessagesResponse.GameDataMessages">
            <summary>
            A list with the game data messages requested
            </summary>
        </member>
        <member name="T:Sony.NP.Messaging.GameDataMessageThumbnailResponse">
            <summary>
            TUS data that was returned from the TUS server
            </summary>
        </member>
        <member name="M:Sony.NP.Messaging.GameDataMessageThumbnailResponse.ReadResult(System.UInt32,Sony.NP.FunctionTypes,Sony.NP.RequestBase)">
            <summary>
            The response data class that contains information about the thumbnail image.
            </summary>
            <param name="id">The request id.</param>
            <param name="apiCalled">The API called.</param>
            <param name="request">The Request object.</param>
        </member>
        <member name="P:Sony.NP.Messaging.GameDataMessageThumbnailResponse.GameDataMsgId">
            <summary>
            The Id of the game data message
            </summary>
        </member>
        <member name="P:Sony.NP.Messaging.GameDataMessageThumbnailResponse.Thumbnail">
            <summary>
            The thumbnail image data of the game data message
            </summary>
        </member>
        <member name="T:Sony.NP.Messaging.GameDataMessageAttachmentResponse">
            <summary>
            The response data class that contains information about the attachment provided in a game data message.
            </summary>
        </member>
        <member name="M:Sony.NP.Messaging.GameDataMessageAttachmentResponse.ReadResult(System.UInt32,Sony.NP.FunctionTypes,Sony.NP.RequestBase)">
            <summary>
            Read the response data from the plug-in
            </summary>
            <param name="id">The request id.</param>
            <param name="apiCalled">The API called.</param>
            <param name="request">The Request object.</param>
        </member>
        <member name="P:Sony.NP.Messaging.GameDataMessageAttachmentResponse.GameDataMsgId">
            <summary>
            The Id of the game data message containing the attachment
            </summary>
        </member>
        <member name="P:Sony.NP.Messaging.GameDataMessageAttachmentResponse.Attachment">
            <summary>
            The attachment data of the game data message.
            </summary>
        </member>
        <member name="T:Sony.NP.Messaging.NewInGameMessageResponse">
            <summary>
            Notification sent by the library to the application when a new in-game message has been received.
            </summary>
        </member>
        <member name="M:Sony.NP.Messaging.NewInGameMessageResponse.ReadResult(System.UInt32,Sony.NP.FunctionTypes,Sony.NP.RequestBase)">
            <summary>
            Read the response data from the plug-in
            </summary>
            <param name="id">The request id.</param>
            <param name="apiCalled">The API called.</param>
            <param name="request">The Request object.</param>
        </member>
        <member name="P:Sony.NP.Messaging.NewInGameMessageResponse.Message">
            <summary>
            The binary data message received
            </summary>
        </member>
        <member name="P:Sony.NP.Messaging.NewInGameMessageResponse.Sender">
            <summary>
            The user who sent the message
            </summary>
        </member>
        <member name="P:Sony.NP.Messaging.NewInGameMessageResponse.Recipient">
            <summary>
            The user who receives the message
            </summary>
        </member>
        <member name="P:Sony.NP.Messaging.NewInGameMessageResponse.SenderPlatformType">
            <summary>
            The platform used by the sender when the message was sent
            </summary>
        </member>
        <member name="P:Sony.NP.Messaging.NewInGameMessageResponse.RecipientPlatformType">
            <summary>
            The platform where the recipient needs to be to receive the message
            </summary>
        </member>
        <member name="T:Sony.NP.Messaging.NewGameDataMessageResponse">
            <summary>
            Notification sent by the library to the application when a new in-game data message has been received.
            </summary>
        </member>
        <member name="M:Sony.NP.Messaging.NewGameDataMessageResponse.ReadResult(System.UInt32,Sony.NP.FunctionTypes,Sony.NP.RequestBase)">
            <summary>
            Read the response data from the plug-in
            </summary>
            <param name="id">The request id.</param>
            <param name="apiCalled">The API called.</param>
            <param name="request">The Request object.</param>
        </member>
        <member name="P:Sony.NP.Messaging.NewGameDataMessageResponse.To">
            <summary>
            The user that the game data message was sent to
            </summary>
        </member>
        <member name="P:Sony.NP.Messaging.NewGameDataMessageResponse.From">
            <summary>
            The sender of the game data message
            </summary>
        </member>
        <member name="T:Sony.NP.Messaging.GameCustomDataEventResponse">
            <summary>
            Notification that is received when a local player 'Accepts' a 'Game Alert' message.
            </summary>
        </member>
        <member name="M:Sony.NP.Messaging.GameCustomDataEventResponse.ReadResult(System.UInt32,Sony.NP.FunctionTypes,Sony.NP.RequestBase)">
            <summary>
            Read the response data from the plug-in
            </summary>
            <param name="id">The request id.</param>
            <param name="apiCalled">The API called.</param>
            <param name="request">The Request object.</param>
        </member>
        <member name="P:Sony.NP.Messaging.GameCustomDataEventResponse.ItemId">
            <summary>
            Game custom data ID
            </summary>
        </member>
        <member name="P:Sony.NP.Messaging.GameCustomDataEventResponse.OnlineId">
            <summary>
            Online ID of user who performed action
            </summary>
        </member>
        <member name="P:Sony.NP.Messaging.GameCustomDataEventResponse.UserId">
            <summary>
            User ID of user who performed action
            </summary>
        </member>
        <member name="T:Sony.NP.NetworkUtils">
            <summary>
            Network Utils service related functionality
            </summary>
        </member>
        <member name="M:Sony.NP.NetworkUtils.GetBandwidthInfo(Sony.NP.NetworkUtils.GetBandwidthInfoRequest,Sony.NP.NetworkUtils.BandwidthInfoResponse)">
            <summary>
            Measure a users bandwidth. The upload and download speeds are given in bits per second.
            </summary>
            <param name="request">The parameters required to retrieve a users bandwidth information</param>
            <param name="response">The users bandwidth results given in bits per second</param>
            <returns>If the operation is asynchronous, the function provides the request Id.</returns>
            <exception cref="T:Sony.NP.NpToolkitException">Will throw an exception either when the request data is invalid, or an internal error has occured inside the NpToolkit plug-in.</exception>
        </member>
        <member name="M:Sony.NP.NetworkUtils.GetBasicNetworkInfoInfo(Sony.NP.NetworkUtils.GetBasicNetworkInfoRequest,Sony.NP.NetworkUtils.BasicNetworkInfoResponse)">
            <summary>
            Gets a users basic network information. This includes the users mapped IP address, NAT information and connection status.
            </summary>
            <param name="request">Parameters required to retrieve a users basic network information</param>
            <param name="response">The users network information upon successful completion</param>
            <returns>If the operation is asynchronous, the function provides the request Id.</returns>
            <exception cref="T:Sony.NP.NpToolkitException">Will throw an exception either when the request data is invalid, or an internal error has occured inside the NpToolkit plug-in.</exception>
        </member>
        <member name="M:Sony.NP.NetworkUtils.GetDetailedNetworkInfo(Sony.NP.NetworkUtils.GetDetailedNetworkInfoRequest,Sony.NP.NetworkUtils.DetailedNetworkInfoResponse)">
            <summary>
            Get detailed network information. This includes all obtainable information about a users local network. Most of
            this information is only useful during development and would not normally be used in the released application.
            </summary>
            <param name="request">Parameters required to retrieve a users detailed network information</param>
            <param name="response">Detailed information about a users local network</param>
            <returns>If the operation is asynchronous, the function provides the request Id.</returns>
            <exception cref="T:Sony.NP.NpToolkitException">Will throw an exception either when the request data is invalid, or an internal error has occured inside the NpToolkit plug-in.</exception>
        </member>
        <member name="T:Sony.NP.NetworkUtils.GetBandwidthInfoRequest">
            <summary>
            Parameters required to measure a users bandwidth
            </summary>
        </member>
        <member name="M:Sony.NP.NetworkUtils.GetBandwidthInfoRequest.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Sony.NP.NetworkUtils.GetBandwidthInfoRequest"/> class.
            </summary>
        </member>
        <member name="T:Sony.NP.NetworkUtils.GetBasicNetworkInfoRequest">
            <summary>
            Parameters required to retrieve basic network information
            </summary>
        </member>
        <member name="M:Sony.NP.NetworkUtils.GetBasicNetworkInfoRequest.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Sony.NP.NetworkUtils.GetBasicNetworkInfoRequest"/> class.
            </summary>
        </member>
        <member name="T:Sony.NP.NetworkUtils.GetDetailedNetworkInfoRequest">
            <summary>
            Parameters required to retrieve detailed network information
            </summary>
        </member>
        <member name="M:Sony.NP.NetworkUtils.GetDetailedNetworkInfoRequest.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Sony.NP.NetworkUtils.GetDetailedNetworkInfoRequest"/> class.
            </summary>
        </member>
        <member name="T:Sony.NP.NetworkUtils.NetworkConnectionState">
            <summary>
            The connection status. 
            </summary>
        </member>
        <member name="F:Sony.NP.NetworkUtils.NetworkConnectionState.Disconnected">
            <summary>Disconnected</summary>
        </member>
        <member name="F:Sony.NP.NetworkUtils.NetworkConnectionState.Connecting">
            <summary>Connecting (to cable or wireless device)</summary>
        </member>
        <member name="F:Sony.NP.NetworkUtils.NetworkConnectionState.ObtainingIP">
            <summary>Obtaining IP address</summary>
        </member>
        <member name="F:Sony.NP.NetworkUtils.NetworkConnectionState.ObtainedIP">
            <summary>IP address obtained</summary>
        </member>
        <member name="T:Sony.NP.NetworkUtils.NpBandwidthTestResult">
            <summary>
            Results of bandwidth measurement
            </summary>
        </member>
        <member name="M:Sony.NP.NetworkUtils.NpBandwidthTestResult.ToString">
            <summary>
            Return the upload and download bps as a string
            </summary>
            <returns>The upload/download bps string</returns>
        </member>
        <member name="P:Sony.NP.NetworkUtils.NpBandwidthTestResult.UploadBps">
            <summary>
            Upload rate (bit per second)
            </summary>
        </member>
        <member name="P:Sony.NP.NetworkUtils.NpBandwidthTestResult.DownloadBps">
            <summary>
            Download rate (bit per second)
            </summary>
        </member>
        <member name="T:Sony.NP.NetworkUtils.NetInAddr">
            <summary>
            IPv4 address structure
            </summary>
        </member>
        <member name="M:Sony.NP.NetworkUtils.NetInAddr.ToString">
            <summary>
            The IPv4 address as a string
            </summary>
            <returns>IPv4 formatted address.</returns>
        </member>
        <member name="P:Sony.NP.NetworkUtils.NetInAddr.Addr">
            <summary>
            The IPv4 address as a 32bit value
            </summary>
        </member>
        <member name="T:Sony.NP.NetworkUtils.RouterNatType">
            <summary>
            NAT type
            </summary>
        </member>
        <member name="F:Sony.NP.NetworkUtils.RouterNatType.Type1">
            <summary>Type 1 NAT </summary>
        </member>
        <member name="F:Sony.NP.NetworkUtils.RouterNatType.Type2">
            <summary>Type 2 NAT </summary>
        </member>
        <member name="F:Sony.NP.NetworkUtils.RouterNatType.Type3">
            <summary>Type 3 NAT </summary>
        </member>
        <member name="T:Sony.NP.NetworkUtils.RouterStun">
            <summary>
            STUN status.
            </summary>
        </member>
        <member name="F:Sony.NP.NetworkUtils.RouterStun.Unchecked">
            <summary>STUN has not completed yet </summary>
        </member>
        <member name="F:Sony.NP.NetworkUtils.RouterStun.Failed">
            <summary>STUN failed</summary>
        </member>
        <member name="F:Sony.NP.NetworkUtils.RouterStun.OK">
            <summary>STUN succeeded</summary>
        </member>
        <member name="T:Sony.NP.NetworkUtils.NatRouterInfo">
            <summary>
            NAT router information structure
            </summary>
        </member>
        <member name="M:Sony.NP.NetworkUtils.NatRouterInfo.ToString">
            <summary>
            The router information structure as a string
            </summary>
            <returns>The router information structure</returns>
        </member>
        <member name="P:Sony.NP.NetworkUtils.NatRouterInfo.StunStatus">
            <summary>
            STUN status
            </summary>
        </member>
        <member name="P:Sony.NP.NetworkUtils.NatRouterInfo.NatType">
            <summary>
            NAT type
            </summary>
        </member>
        <member name="P:Sony.NP.NetworkUtils.NatRouterInfo.MappedAddr">
            <summary>
            IP address of the PlayStation®4 device as seen from the global Internet side
            </summary>
        </member>
        <member name="T:Sony.NP.NetworkUtils.NetEtherAddr">
            <summary>
            Ethernet address structure (IPv6) as an array of bytes
            </summary>
        </member>
        <member name="F:Sony.NP.NetworkUtils.NetEtherAddr.SCE_NET_ETHER_ADDR_LEN">
            <summary>
            The number of bytes in the address. This is a 48bit-Ethernet address.
            </summary>
        </member>
        <member name="M:Sony.NP.NetworkUtils.NetEtherAddr.ToString">
            <summary>
            The IPv6 address as a string
            </summary>
            <returns>The IPv6 address</returns>
        </member>
        <member name="P:Sony.NP.NetworkUtils.NetEtherAddr.Data">
            <summary>
            The array containing the IPv6 address
            </summary>
        </member>
        <member name="T:Sony.NP.NetworkUtils.BandwidthInfoResponse">
            <summary>
            Bandwidth test result
            </summary>
        </member>
        <member name="M:Sony.NP.NetworkUtils.BandwidthInfoResponse.ReadResult(System.UInt32,Sony.NP.FunctionTypes,Sony.NP.RequestBase)">
            <summary>
            Read the response data from the plug-in
            </summary>
            <param name="id">The request id.</param>
            <param name="apiCalled">The API called.</param>
            <param name="request">The Request instance.</param>
        </member>
        <member name="P:Sony.NP.NetworkUtils.BandwidthInfoResponse.Bandwidth">
            <summary>
            The results of the bandwidth test
            </summary>
        </member>
        <member name="T:Sony.NP.NetworkUtils.BasicNetworkInfoResponse">
            <summary>
            Basic information about a users local network
            </summary>
        </member>
        <member name="M:Sony.NP.NetworkUtils.BasicNetworkInfoResponse.ReadResult(System.UInt32,Sony.NP.FunctionTypes,Sony.NP.RequestBase)">
            <summary>
            Read the response data from the plug-in
            </summary>
            <param name="id">The request id.</param>
            <param name="apiCalled">The API called.</param>
            <param name="request">The Request object.</param>
        </member>
        <member name="P:Sony.NP.NetworkUtils.BasicNetworkInfoResponse.IpAddress">
            <summary>
            The IP address of the network adapter
            </summary>
        </member>
        <member name="P:Sony.NP.NetworkUtils.BasicNetworkInfoResponse.NatInfo">
            <summary>
            The NAT type
            </summary>
        </member>
        <member name="P:Sony.NP.NetworkUtils.BasicNetworkInfoResponse.ConnectionStatus">
            <summary>
            The connection status. 
            </summary>
        </member>
        <member name="T:Sony.NP.NetworkUtils.NetworkDevice">
            <summary>
            Device (cable or wireless)
            </summary>
        </member>
        <member name="F:Sony.NP.NetworkUtils.NetworkDevice.Wired">
            <summary>Cable connection</summary>
        </member>
        <member name="F:Sony.NP.NetworkUtils.NetworkDevice.Wireless">
            <summary>Wireless connection</summary>
        </member>
        <member name="T:Sony.NP.NetworkUtils.NetworkLink">
            <summary>
            Link connection state (disconnected or connected)
            </summary>
        </member>
        <member name="F:Sony.NP.NetworkUtils.NetworkLink.Disconnected">
            <summary>Disconnected</summary>
        </member>
        <member name="F:Sony.NP.NetworkUtils.NetworkLink.Connected">
            <summary>Connected</summary>
        </member>
        <member name="T:Sony.NP.NetworkUtils.WfiSecurity">
            <summary>
            Security measure for wireless connection
            </summary>
        </member>
        <member name="F:Sony.NP.NetworkUtils.WfiSecurity.NoSecurity">
            <summary>No security</summary>
        </member>
        <member name="F:Sony.NP.NetworkUtils.WfiSecurity.WEP">
            <summary>WEP</summary>
        </member>
        <member name="F:Sony.NP.NetworkUtils.WfiSecurity.WPAPSK_WPA2PSK">
            <summary>(Not used)</summary>
        </member>
        <member name="F:Sony.NP.NetworkUtils.WfiSecurity.WPAPSK_TKIP">
            <summary>WPA-PSK(TKIP)</summary>
        </member>
        <member name="F:Sony.NP.NetworkUtils.WfiSecurity.WPAPSK_AES">
            <summary>WPA-PSK(AES)</summary>
        </member>
        <member name="F:Sony.NP.NetworkUtils.WfiSecurity.WPA2PSK_TKIP">
            <summary>WPA2-PSK(TKIP)</summary>
        </member>
        <member name="F:Sony.NP.NetworkUtils.WfiSecurity.WPA2PSK_AES">
            <summary>WPA2-PSK(AES)</summary>
        </member>
        <member name="F:Sony.NP.NetworkUtils.WfiSecurity.Unsupported">
            <summary>(Not used)</summary>
        </member>
        <member name="T:Sony.NP.NetworkUtils.NetworkIPConfig">
            <summary>
            IP setting (automatic, static, PPPoE)
            </summary>
        </member>
        <member name="F:Sony.NP.NetworkUtils.NetworkIPConfig.DHCP">
            <summary>Automatic (DHCP)</summary>
        </member>
        <member name="F:Sony.NP.NetworkUtils.NetworkIPConfig.Static">
            <summary>Static IP</summary>
        </member>
        <member name="F:Sony.NP.NetworkUtils.NetworkIPConfig.PPPoE">
            <summary>PPPoE</summary>
        </member>
        <member name="T:Sony.NP.NetworkUtils.NetworkHTTPProxyConfig">
            <summary>
            Proxy server setting (do not use or use)
            </summary>
        </member>
        <member name="F:Sony.NP.NetworkUtils.NetworkHTTPProxyConfig.Off">
            <summary>HTTP proxy off</summary>
        </member>
        <member name="F:Sony.NP.NetworkUtils.NetworkHTTPProxyConfig.On">
            <summary>HTTP proxy on</summary>
        </member>
        <member name="T:Sony.NP.NetworkUtils.DetailedNetworkInfoResponse">
            <summary>
            Detailed local network information. This contains all retrievable information about a users network.
            </summary>
        </member>
        <member name="M:Sony.NP.NetworkUtils.DetailedNetworkInfoResponse.ReadResult(System.UInt32,Sony.NP.FunctionTypes,Sony.NP.RequestBase)">
            <summary>
            Read the response data from the plug-in
            </summary>
            <param name="id">The request id.</param>
            <param name="apiCalled">The API called.</param>
            <param name="request">The Request object.</param>
        </member>
        <member name="P:Sony.NP.NetworkUtils.DetailedNetworkInfoResponse.NatInfo">
            <summary>
            The NAT type
            </summary>
        </member>
        <member name="P:Sony.NP.NetworkUtils.DetailedNetworkInfoResponse.ConnectionStatus">
            <summary>
            The connection status.
            </summary>
        </member>
        <member name="P:Sony.NP.NetworkUtils.DetailedNetworkInfoResponse.Device">
            <summary>
            The network device being used.
            </summary>
        </member>
        <member name="P:Sony.NP.NetworkUtils.DetailedNetworkInfoResponse.EthernetAddress">
            <summary>
            The MAC address       
            </summary>
        </member>
        <member name="P:Sony.NP.NetworkUtils.DetailedNetworkInfoResponse.RssiPercentage">
            <summary>
            The signal strength
            </summary>
        </member>
        <member name="P:Sony.NP.NetworkUtils.DetailedNetworkInfoResponse.Channel">
            <summary>
            The wireless channel used
            </summary>
        </member>
        <member name="P:Sony.NP.NetworkUtils.DetailedNetworkInfoResponse.MTU">
            <summary>
            MTU 		
            </summary>
        </member>
        <member name="P:Sony.NP.NetworkUtils.DetailedNetworkInfoResponse.Link">
            <summary>
            The link connection state
            </summary>
        </member>
        <member name="P:Sony.NP.NetworkUtils.DetailedNetworkInfoResponse.WifiSecurity">
            <summary>
            Specifies whether wireless LAN is encrypted 	 	
            </summary>
        </member>
        <member name="P:Sony.NP.NetworkUtils.DetailedNetworkInfoResponse.IpConfig">
            <summary>
            Specifies how the IP address is configured
            </summary>
        </member>
        <member name="P:Sony.NP.NetworkUtils.DetailedNetworkInfoResponse.HttpProxyConfig">
            <summary>
            The configuration of the proxy server
            </summary>
        </member>
        <member name="P:Sony.NP.NetworkUtils.DetailedNetworkInfoResponse.HttpProxyPort">
            <summary>
            The proxy server port address
            </summary>
        </member>
        <member name="P:Sony.NP.NetworkUtils.DetailedNetworkInfoResponse.BSSID">
            <summary>
            BSSID
            </summary>
        </member>
        <member name="P:Sony.NP.NetworkUtils.DetailedNetworkInfoResponse.SSID">
            <summary>
            SSID
            </summary>
        </member>
        <member name="P:Sony.NP.NetworkUtils.DetailedNetworkInfoResponse.DhcpHostname">
            <summary>
            The DHCP hostname
            </summary>
        </member>
        <member name="P:Sony.NP.NetworkUtils.DetailedNetworkInfoResponse.PPPoeAuthName">
            <summary>
            The PPPOE authentication name
            </summary>
        </member>
        <member name="P:Sony.NP.NetworkUtils.DetailedNetworkInfoResponse.IpAddress">
            <summary>
            The devices IP address
            </summary>
        </member>
        <member name="P:Sony.NP.NetworkUtils.DetailedNetworkInfoResponse.Netmask">
            <summary>
            The devices Net mask
            </summary>
        </member>
        <member name="P:Sony.NP.NetworkUtils.DetailedNetworkInfoResponse.DefaultRoute">
            <summary>
            The default route IP address
            </summary>
        </member>
        <member name="P:Sony.NP.NetworkUtils.DetailedNetworkInfoResponse.PrimaryDNS">
            <summary>
            The primary domain name server IP address
            </summary>
        </member>
        <member name="P:Sony.NP.NetworkUtils.DetailedNetworkInfoResponse.SecondaryDNS">
            <summary>
            The secondary domain name server IP address
            </summary>
        </member>
        <member name="P:Sony.NP.NetworkUtils.DetailedNetworkInfoResponse.HttpProxyServer">
            <summary>
            The IP address of the proxy
            </summary>
        </member>
        <member name="T:Sony.NP.NetworkUtils.NetworkEvent">
            <summary>
            Represents a network event
            </summary>
        </member>
        <member name="F:Sony.NP.NetworkUtils.NetworkEvent.none">
            <summary>Event not set</summary>
        </member>
        <member name="F:Sony.NP.NetworkUtils.NetworkEvent.networkConnected">
            <summary>A network has been connected</summary>
        </member>
        <member name="F:Sony.NP.NetworkUtils.NetworkEvent.networkDisconnected">
            <summary>The network has been disconnected</summary>
        </member>
        <member name="T:Sony.NP.NetworkUtils.NetStateChangeResponse">
            <summary>
            Notification that is sent to the NP Toolkit callback in the event of a network state change. The notification will be
            sent when a network has been connected or disconnected.
            </summary>
        </member>
        <member name="M:Sony.NP.NetworkUtils.NetStateChangeResponse.ReadResult(System.UInt32,Sony.NP.FunctionTypes,Sony.NP.RequestBase)">
            <summary>
            Read the response data from the plug-in
            </summary>
            <param name="id">The request id.</param>
            <param name="apiCalled">The API called.</param>
            <param name="request">The Request object.</param>
        </member>
        <member name="P:Sony.NP.NetworkUtils.NetStateChangeResponse.NetEvent">
            <summary>
            The network event that occurred
            </summary>
        </member>
        <member name="T:Sony.NP.NpUtils">
            <summary>
            Np Utils service related functionality.
            </summary>
        </member>
        <member name="M:Sony.NP.NpUtils.SetTitleIdForDevelopment(Sony.NP.NpUtils.SetTitleIdForDevelopmentRequest,Sony.NP.Core.EmptyResponse)">
            <summary>
            This function sets a Title ID and Title Secret to be used during development (on a DevKit in Development Mode).
            </summary>
            <param name="request">The Title Id and Title Secret to be set</param>
            <param name="response">This response does not have data, only return code</param>
            <returns>If the operation is asynchronous, the function provides the request Id.</returns>
            <exception cref="T:Sony.NP.NpToolkitException">Will throw an exception either when the request data is invalid, or an internal error has occured inside the NpToolkit plug-in.</exception>
        </member>
        <member name="M:Sony.NP.NpUtils.DisplaySigninDialog(Sony.NP.NpUtils.DisplaySigninDialogRequest,Sony.NP.Core.EmptyResponse)">
            <summary>
            This function opens the System Sign-In Dialog if the user is
            not signed in to PlayStation Network.
            </summary>
            <param name="request">Parameters needed to open the Sign-In Dialog </param>
            <param name="response">This response does not have data, only return code</param>
            <returns>If the operation is asynchronous, the function provides the request Id.</returns>
            <exception cref="T:Sony.NP.NpToolkitException">Will throw an exception either when the request data is invalid, or an internal error has occured inside the NpToolkit plug-in.</exception>
        </member>
        <member name="M:Sony.NP.NpUtils.CheckAvailablity(Sony.NP.NpUtils.CheckAvailablityRequest,Sony.NP.Core.EmptyResponse)">
            <summary>
            This function checks the calling user passes all restrictions necessary to access the PSN servers.
            </summary>
            <param name="request">Parameters needed to perform the checking operation </param>
            <param name="response"> This response does not have data, only return code</param>
            <returns>If the operation is asynchronous, the function provides the request Id.</returns>
            <exception cref="T:Sony.NP.NpToolkitException">Will throw an exception either when the request data is invalid, or an internal error has occured inside the NpToolkit plug-in.</exception>
        </member>
        <member name="M:Sony.NP.NpUtils.CheckPlus(Sony.NP.NpUtils.CheckPlusRequest,Sony.NP.NpUtils.CheckPlusResponse)">
            <summary>
            This function checks the calling user has a PS plus account.
            </summary>
            <remarks>
            This function determines whether a user has PlayStation®Plus feature usage entitlements or not, it cannot be used for determining whether a user has joined the PlayStation®Plus service or not. 
            There are cases where a user that has not joined the PlayStation®Plus service is granted usage entitlements for real-time multiplayer play; in such cases this function will return results that state that entitlements are present.
            Do not overinterpret the results returned by this function.
            This function is an extension to the NpToolkit library. As such it is possible for the request to finish before other pending requests as this is handled seperately to other NpToolkit request.
            </remarks>
            <param name="request">Parameters needed to perform the checking operation </param>
            <param name="response">This response contains the return code and CheckPlus results.</param>
            <returns>If the operation is asynchronous, the function provides the request Id.</returns>
            <exception cref="T:Sony.NP.NpToolkitException">Will throw an exception either when the request data is invalid, or an internal error has occured inside the NpToolkit plug-in.</exception>
        </member>
        <member name="M:Sony.NP.NpUtils.GetParentalControlInfo(Sony.NP.NpUtils.GetParentalControlInfoRequest,Sony.NP.NpUtils.GetParentalControlInfoResponse)">
            <summary>
            Get parental control information
            </summary>
            <remarks>
            This function obtains the parental control information. In other words, 
            it obtains the chat restrictions and usage restriction settings for user-generated media. 
            This function carries out synchronous or asynchronous processing depending on the request argument.
            </remarks>
            <param name="request">Parameters needed to perform the operation </param>
            <param name="response">This response contains the return code and CheckPlus results.</param>
            <returns>If the operation is asynchronous, the function provides the request Id.</returns>
            <exception cref="T:Sony.NP.NpToolkitException">Will throw an exception either when the request data is invalid, or an internal error has occured inside the NpToolkit plug-in.</exception>
        </member>
        <member name="M:Sony.NP.NpUtils.NotifyPlusFeature(Sony.NP.Core.UserServiceUserId)">
            <summary>
            Notification for use of PlayStation®Plus features
            </summary>
            <param name="userId">User ID</param>
        </member>
        <member name="T:Sony.NP.NpUtils.SetTitleIdForDevelopmentRequest">
            <summary>
            This class is passed through to the library to set the Title
            Id and Title Secret that will be used in DevKits in
            Development Mode.
            </summary>
        </member>
        <member name="F:Sony.NP.NpUtils.SetTitleIdForDevelopmentRequest.titleId">
            The title id to be set
        </member>
        <member name="F:Sony.NP.NpUtils.SetTitleIdForDevelopmentRequest.titleSecretString">
            The title secret to be set. This is the same string set in the .txt file given on DevNet
        </member>
        <member name="F:Sony.NP.NpUtils.SetTitleIdForDevelopmentRequest.titleSecretStringSize">
            The size of titleSecretString
        </member>
        <member name="M:Sony.NP.NpUtils.SetTitleIdForDevelopmentRequest.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Sony.NP.NpUtils.SetTitleIdForDevelopmentRequest"/> class.
            </summary>
        </member>
        <member name="T:Sony.NP.NpUtils.DisplaySigninDialogRequest">
            <summary>
            Parameters passed to open the sign in dialog.
            </summary>
        </member>
        <member name="M:Sony.NP.NpUtils.DisplaySigninDialogRequest.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Sony.NP.NpUtils.DisplaySigninDialogRequest"/> class.
            </summary>
        </member>
        <member name="T:Sony.NP.NpUtils.CheckAvailablityRequest">
            <summary>
            This class is passed through to the library to check that the calling user can communicate to PSN servers.
            </summary>
        </member>
        <member name="M:Sony.NP.NpUtils.CheckAvailablityRequest.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Sony.NP.NpUtils.CheckAvailablityRequest"/> class.
            </summary>
        </member>
        <member name="T:Sony.NP.NpUtils.CheckPlusRequest">
            <summary>
            PlayStation®Plus feature usage entitlement check
            </summary>
        </member>
        <member name="M:Sony.NP.NpUtils.CheckPlusRequest.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Sony.NP.NpUtils.CheckPlusRequest"/> class.
            </summary>
        </member>
        <member name="T:Sony.NP.NpUtils.GetParentalControlInfoRequest">
            <summary>
            Get parental control information
            </summary>
        </member>
        <member name="M:Sony.NP.NpUtils.GetParentalControlInfoRequest.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Sony.NP.NpUtils.GetParentalControlInfoRequest"/> class.
            </summary>
        </member>
        <member name="T:Sony.NP.NpUtils.CheckPlusResponse">
            <summary>
            PlayStation Plus feature usage entitlement check results
            </summary>
        </member>
        <member name="M:Sony.NP.NpUtils.CheckPlusResponse.ReadResult(System.UInt32,Sony.NP.FunctionTypes,Sony.NP.RequestBase)">
            <summary>
            Read the response data from the plug-in
            </summary>
            <param name="id">The request id.</param>
            <param name="apiCalled">The API called.</param>
            <param name="request">The Request object.</param>
        </member>
        <member name="P:Sony.NP.NpUtils.CheckPlusResponse.Authorized">
            <summary>
            PlayStation Plus feature usage entitlement check results
            </summary>
        </member>
        <member name="T:Sony.NP.NpUtils.GetParentalControlInfoResponse">
            <summary>
            Get parental control information
            </summary>
        </member>
        <member name="M:Sony.NP.NpUtils.GetParentalControlInfoResponse.ReadResult(System.UInt32,Sony.NP.FunctionTypes,Sony.NP.RequestBase)">
            <summary>
            Read the response data from the plug-in
            </summary>
            <param name="id">The request id.</param>
            <param name="apiCalled">The API called.</param>
            <param name="request">The Request object.</param>
        </member>
        <member name="P:Sony.NP.NpUtils.GetParentalControlInfoResponse.Age">
            <summary>
            Users age
            </summary>
        </member>
        <member name="P:Sony.NP.NpUtils.GetParentalControlInfoResponse.ChatRestriction">
            <summary>
            Chat restriction
            </summary>
        </member>
        <member name="P:Sony.NP.NpUtils.GetParentalControlInfoResponse.UGCRestriction">
            <summary>
            User-generated media restriction
            </summary>
        </member>
        <member name="T:Sony.NP.NpUtils.SignInState">
            <summary>
            Defines the possible sign in states a user can have on a PlayStation 4.
            </summary>
        </member>
        <member name="F:Sony.NP.NpUtils.SignInState.unknown">
            <summary>Representation of an unknown signed in state. It shouldn't happen</summary>
        </member>
        <member name="F:Sony.NP.NpUtils.SignInState.signedOut">
            <summary>Representation of the signed out state of a user</summary>
        </member>
        <member name="F:Sony.NP.NpUtils.SignInState.signedIn">
            <summary>Representation of the signed in state of a user</summary>
        </member>
        <member name="T:Sony.NP.NpUtils.LogInState">
            <summary>
            Defines the possible log in states a user can have on a PlayStation 4.
            </summary>
        </member>
        <member name="F:Sony.NP.NpUtils.LogInState.loggedIn">
            <summary>Representation of the logged in state of a user</summary>
        </member>
        <member name="F:Sony.NP.NpUtils.LogInState.loggedOut">
            <summary>Representation of the logged out state of a user</summary>
        </member>
        <member name="F:Sony.NP.NpUtils.LogInState.unknown">
            <summary>Representation of an unknown logged in state. It shouldn't happen</summary>
        </member>
        <member name="T:Sony.NP.NpUtils.StateChanged">
            <summary>
            Defines the type of change that has triggered this notification.
            </summary>
        </member>
        <member name="F:Sony.NP.NpUtils.StateChanged.none">
            <summary>No states have changed. This should never happen as otherwise there would be no notification</summary>
        </member>
        <member name="F:Sony.NP.NpUtils.StateChanged.signedInState">
            <summary>The signed in state has changed. See SignInState</summary>
        </member>
        <member name="F:Sony.NP.NpUtils.StateChanged.loggedInState">
            <summary>The logged in state has changed. See LoggedInState</summary>
        </member>
        <member name="T:Sony.NP.NpUtils.UserStateChangeResponse">
            <summary>
            This notification represents a change in a user logged in or signed in state.
            </summary>
        </member>
        <member name="M:Sony.NP.NpUtils.UserStateChangeResponse.ReadResult(System.UInt32,Sony.NP.FunctionTypes,Sony.NP.RequestBase)">
            <summary>
            Read the response data from the plug-in
            </summary>
            <param name="id">The request id.</param>
            <param name="apiCalled">The API called.</param>
            <param name="request">The Request object.</param>
        </member>
        <member name="P:Sony.NP.NpUtils.UserStateChangeResponse.UserId">
            <summary>
            The user Id whose state has changed		
            </summary>
        </member>
        <member name="P:Sony.NP.NpUtils.UserStateChangeResponse.CurrentSignInState">
            <summary>
            The sign in state of the user in userId after the change
            </summary>
        </member>
        <member name="P:Sony.NP.NpUtils.UserStateChangeResponse.CurrentLogInState">
            <summary>
            The log in state of the user in userId after the change
            </summary>
        </member>
        <member name="P:Sony.NP.NpUtils.UserStateChangeResponse.StateChanged">
            <summary>
            The state that has changed
            </summary>
        </member>
        <member name="T:Sony.NP.Presence">
            <summary>
            Presence service related functionality.
            </summary>
        </member>
        <member name="M:Sony.NP.Presence.DeletePresence(Sony.NP.Presence.DeletePresenceRequest,Sony.NP.Core.EmptyResponse)">
            <summary>
            Function to delete the presence information for the calling user on the Presence server.
            </summary>
            <param name="request">The parameters with the information to delete.</param>
            <param name="response">This response does not have data, only return code.</param>
            <returns>If the operation is asynchronous, the function provides the request Id.</returns>
            <exception cref="T:Sony.NP.NpToolkitException">Will throw an exception either when the request data is invalid, or an internal error has occured inside the NpToolkit plug-in.</exception>
        </member>
        <member name="M:Sony.NP.Presence.SetPresence(Sony.NP.Presence.SetPresenceRequest,Sony.NP.Core.EmptyResponse)">
            <summary>
            Function to send to the server the game status (default and localized version) and the binary data for the calling user.
            </summary>
            <param name="request">The parameters with the information to be set for the calling user.</param>
            <param name="response">This response does not have data, only return code.</param>
            <returns>If the operation is asynchronous, the function provides the request Id.</returns>
            <exception cref="T:Sony.NP.NpToolkitException">Will throw an exception either when the request data is invalid, or an internal error has occured inside the NpToolkit plug-in.</exception>
        </member>
        <member name="M:Sony.NP.Presence.GetPresence(Sony.NP.Presence.GetPresenceRequest,Sony.NP.Presence.PresenceResponse)">
            <summary>
            Function to obtain the presence information of a target user.
            </summary>
            <param name="request">The parameters with with the information to obtain the presence of a target user.</param>
            <param name="response">This response contains the return code and the presence information of the target user.</param>
            <returns>If the operation is asynchronous, the function provides the request Id.</returns>
            <exception cref="T:Sony.NP.NpToolkitException">Will throw an exception either when the request data is invalid, or an internal error has occured inside the NpToolkit plug-in.</exception>
        </member>
        <member name="T:Sony.NP.Presence.DeletePresenceRequest">
            <summary>
            Parameters to delete the presence information of the calling user.
            </summary>
        </member>
        <member name="M:Sony.NP.Presence.DeletePresenceRequest.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Sony.NP.Presence.DeletePresenceRequest"/> class.
            </summary>
        </member>
        <member name="P:Sony.NP.Presence.DeletePresenceRequest.DeleteGameData">
            <summary>
            When set to true, game data of the calling user will be deleted. Defaults to true.
            </summary>
        </member>
        <member name="P:Sony.NP.Presence.DeletePresenceRequest.DeleteGameStatus">
            <summary>
            When set to true, all game statuses of the calling user (default and localized) will be deleted. Defaults to true.
            </summary>
        </member>
        <member name="T:Sony.NP.Presence.LocalizedGameStatus">
            <summary>
            Information to specify a game status that is localized (language of localization and status itself).
            </summary>
        </member>
        <member name="F:Sony.NP.Presence.LocalizedGameStatus.MAX_SIZE_LOCALIZED_GAME_STATUS">
            <summary>
            The maximum size of the GameStatus array
            </summary>
        </member>
        <member name="P:Sony.NP.Presence.LocalizedGameStatus.LanguageCode">
            <summary>
            The localized game status provided is written in this language. Five digits format (countryCode-language)
            Takes a copy of the code, see remarks for details.
            </summary>
            <remarks>
            Takes a copy of the language code or returns a copy. The language code must be assign explicitly. 
            </remarks>
        </member>
        <member name="P:Sony.NP.Presence.LocalizedGameStatus.GameStatus">
            <summary>
            A localized string for the game status. It will be provided when users have the paired language as the system software language. UTF-8 format
            </summary>
            <exception cref="T:Sony.NP.NpToolkitException">Will throw an exception if the string is more than <see cref="F:Sony.NP.Presence.LocalizedGameStatus.MAX_SIZE_LOCALIZED_GAME_STATUS"/> characters.</exception>
        </member>
        <member name="T:Sony.NP.Presence.SetPresenceRequest">
            <summary>
            Parameters to set the presence information of the calling user.
            </summary>
        </member>
        <member name="F:Sony.NP.Presence.SetPresenceRequest.MAX_LOCALIZED_STATUSES">
            <summary>
            The maximum size of localiszed statuses array
            </summary>
        </member>
        <member name="F:Sony.NP.Presence.SetPresenceRequest.MAX_SIZE_GAME_DATA">
            <summary>
            The maximum size of the binary game data array
            </summary>
        </member>
        <member name="F:Sony.NP.Presence.SetPresenceRequest.MAX_SIZE_DEFAULT_GAME_STATUS">
            <summary>
            The maximum size of the default game status string that will be shown for users whose localized game status is not found
            </summary>
        </member>
        <member name="F:Sony.NP.Presence.SetPresenceRequest.localizedGameStatuses">
            An array of localizations for the game status. If the system language on the console matches one of the languages, the game status used by the system and provided to the application will be the matching one. 
        </member>
        <member name="F:Sony.NP.Presence.SetPresenceRequest.numLocalizedGameStatuses">
            The number of localizedGameStatus in the localizedGameStatuses array
        </member>
        <member name="F:Sony.NP.Presence.SetPresenceRequest.binaryGameData">
            Binary data the user can set for the game. It can be retrieved by other users (it can contain a session Id, room Id, or any information up to MAX_SIZE_GAME_DATA bytes)
        </member>
        <member name="F:Sony.NP.Presence.SetPresenceRequest.binaryGameDataSize">
            The size of the binary data
        </member>
        <member name="M:Sony.NP.Presence.SetPresenceRequest.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Sony.NP.Presence.SetPresenceRequest"/> class.
            </summary>		
        </member>
        <member name="P:Sony.NP.Presence.SetPresenceRequest.DefaultGameStatus">
            <summary>
            A default string identifying the status (level, etc.) the user is in. It will be shown in "Now Playing" on the user profile. It can be a maximum of <see cref="F:Sony.NP.Presence.SetPresenceRequest.MAX_SIZE_DEFAULT_GAME_STATUS"/> characters.
            </summary>
            <exception cref="T:Sony.NP.NpToolkitException">Will throw an exception if the string is more than <see cref="F:Sony.NP.Presence.SetPresenceRequest.MAX_SIZE_DEFAULT_GAME_STATUS"/> characters.</exception>
        </member>
        <member name="P:Sony.NP.Presence.SetPresenceRequest.LocalizedGameStatuses">
            <summary>
            An array of localizations for the game status. If the system language on the console matches one of the languages, the game status used by the system and provided to the application will be the matching one. 
            The array size must not exceed <see cref="F:Sony.NP.Presence.SetPresenceRequest.MAX_LOCALIZED_STATUSES"/>.
            </summary>
            <remarks>
            Takes a copy of the array or returns a copy. The game statuses must be assign explicitly. Changing the array set or returned by this property won't change the stored data in this instance.
            </remarks>
            <exception cref="T:Sony.NP.NpToolkitException">Will throw an exception if the array is more than <see cref="F:Sony.NP.Presence.SetPresenceRequest.MAX_LOCALIZED_STATUSES"/> characters.</exception>
        </member>
        <member name="P:Sony.NP.Presence.SetPresenceRequest.BinaryGameData">
            <summary>
            Binary data the user can set for the game. It can be retrieved by other users (it can contain a session Id, room Id, or any information up to <see cref="F:Sony.NP.Presence.SetPresenceRequest.MAX_SIZE_GAME_DATA"/> bytes)
            </summary>
            <remarks>
            Takes a copy of the binary data or returns a copy. The binary data must be assign explicitly. Changing the array set or returned by this property won't change the stored data in this instance.
            </remarks>
            <exception cref="T:Sony.NP.NpToolkitException">Will throw an exception if the array is more than <see cref="F:Sony.NP.Presence.SetPresenceRequest.MAX_SIZE_GAME_DATA"/> characters.</exception>
        </member>
        <member name="T:Sony.NP.Presence.GetPresenceRequest">
            <summary>
            Function to get the presence information for the target user specified.
            </summary>
        </member>
        <member name="M:Sony.NP.Presence.GetPresenceRequest.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Sony.NP.Presence.GetPresenceRequest"/> class.
            </summary>
        </member>
        <member name="P:Sony.NP.Presence.GetPresenceRequest.FromUser">
            <summary>
            The user to get the presence from. It can be the calling user or a friend.
            </summary>
        </member>
        <member name="P:Sony.NP.Presence.GetPresenceRequest.InContext">
            <summary>
            True by default. If the presence information to be obtained is regarding the game (true) or the system (false).
            </summary>
        </member>
        <member name="T:Sony.NP.Presence.PlatformPresence">
            <summary>
            This class contains the presence information of a user and title for one platform.
            </summary>
        </member>
        <member name="F:Sony.NP.Presence.PlatformPresence.MAX_SIZE_TITLE_NAME">
            <summary>
            The maximum size the name of the application can have
            </summary>
        </member>
        <member name="F:Sony.NP.Presence.PlatformPresence.MAX_SIZE_GAME_STATUS">
            <summary>
            The maximum size the status (playing a level, mission, etc.) can be
            </summary>
        </member>
        <member name="F:Sony.NP.Presence.PlatformPresence.MAX_SIZE_GAME_DATA">
            <summary>
            The maximum size of binary data that can be set for a user
            </summary>
        </member>
        <member name="M:Sony.NP.Presence.PlatformPresence.ToString">
            <summary>
            Returns the most common platform presence information.
            </summary>
            <returns>The string containing the online status, platform, and title info.</returns>
        </member>
        <member name="P:Sony.NP.Presence.PlatformPresence.OnlineStatusOnPlatform">
            <summary>
            If InContext is true, offline when the user is not playing the application or the user state (online, stand by) if the user is. If InContext is false, the state of the user on the platform
            </summary>
        </member>
        <member name="P:Sony.NP.Presence.PlatformPresence.Platform">
            <summary>
            The platform the information in this class belongs to. See <see cref="T:Sony.NP.Core.PlatformType"/> for values provided
            </summary>
        </member>
        <member name="P:Sony.NP.Presence.PlatformPresence.TitleId">
            <summary>
            The title Id being played by the user on the platform. Not provided if the <see cref="P:Sony.NP.Presence.PlatformPresence.OnlineStatusOnPlatform"/> is offline.
            </summary>
        </member>
        <member name="P:Sony.NP.Presence.PlatformPresence.TitleName">
            <summary>
             The name of the title the user is playing. Not provided if the <see cref="P:Sony.NP.Presence.PlatformPresence.OnlineStatusOnPlatform"/> is offline.
            </summary>
        </member>
        <member name="P:Sony.NP.Presence.PlatformPresence.GameStatus">
            <summary>
            The status the user is in. It will match the calling user system language (or the default game status if a localized one is not found). It will only be retrieved on Title Ids that share the Presence service in DevNet
            </summary>
        </member>
        <member name="P:Sony.NP.Presence.PlatformPresence.BinaryGameData">
            <summary>
            The binary data set by the user playing the application
            </summary>
        </member>
        <member name="T:Sony.NP.Presence.UserPresence">
            <summary>
            This class represents the presence information of a user.
            </summary>
        </member>
        <member name="F:Sony.NP.Presence.UserPresence.MAX_NUM_PLATFORM_PRESENCE">
            <summary>
            The presence information can be retrieved for this maximum number of platforms
            </summary>
        </member>
        <member name="M:Sony.NP.Presence.UserPresence.ToString">
            <summary>
            Create a string containg the most common data from the user presence.
            </summary>
            <returns>Returns the accountid, name, online static, relevant platform and number platforms in this presence.</returns>
        </member>
        <member name="P:Sony.NP.Presence.UserPresence.User">
            <summary>
            The target user and its online Id (for display purposes) 
            </summary>
        </member>
        <member name="P:Sony.NP.Presence.UserPresence.PsnOnlineStatus">
            <summary>
            Indicates if the user appears as "Online", "Stand by" (Away) or "Offline" in PSN
            </summary>
        </member>
        <member name="P:Sony.NP.Presence.UserPresence.MostRelevantPlatform">
            <summary>
            The primary platform the user is using. Decided by the online status or, in case it is the same, the date/time of the presence update. See <see cref="T:Sony.NP.Core.PlatformType"/> for values provided
            </summary>
        </member>
        <member name="P:Sony.NP.Presence.UserPresence.Platforms">
            <summary>
            Information of the presence for the target user in different platforms. To know the platform, use the <see cref="P:Sony.NP.Presence.PlatformPresence.Platform"/> data member of the object
            </summary>
        </member>
        <member name="T:Sony.NP.Presence.PresenceResponse">
            <summary>
            This class represents the presence information of a user from a call to <see cref="M:Sony.NP.Presence.GetPresence(Sony.NP.Presence.GetPresenceRequest,Sony.NP.Presence.PresenceResponse)"/>
            </summary>
        </member>
        <member name="M:Sony.NP.Presence.PresenceResponse.ReadResult(System.UInt32,Sony.NP.FunctionTypes,Sony.NP.RequestBase)">
            <summary>
            Read the response data from the plug-in
            </summary>
            <param name="id">The request id.</param>
            <param name="apiCalled">The API called.</param>
            <param name="request">The Request object.</param>
        </member>
        <member name="P:Sony.NP.Presence.PresenceResponse.UserPresence">
            <summary>
            Get the user presence.
            </summary>
        </member>
        <member name="T:Sony.NP.Presence.PresenceUpdateType">
            <summary>
            The type of presence update
            </summary>
        </member>
        <member name="F:Sony.NP.Presence.PresenceUpdateType.invalid">
            <summary>Invalid presence update type</summary>
        </member>
        <member name="F:Sony.NP.Presence.PresenceUpdateType.gameTitle">
            <summary>Push event sent when game title information is updated</summary>
        </member>
        <member name="F:Sony.NP.Presence.PresenceUpdateType.gameStatus">
            <summary>Push event sent when status string related to gameplay is updated</summary>
        </member>
        <member name="F:Sony.NP.Presence.PresenceUpdateType.gameData">
            <summary>Push event sent when in-game presence arbitrarily-defined data is updated</summary>
        </member>
        <member name="T:Sony.NP.Presence.PresenceUpdateResponse">
            <summary>
            Push notification that is sent to the NP Toolkit 2 callback when the presence of a users friend changes
            </summary>
        </member>
        <member name="F:Sony.NP.Presence.PresenceUpdateResponse.MAX_SIZE_GAME_STATUS">
            <summary>
            The maximum size the status (playing a level, mission, etc.) can be
            </summary>
        </member>
        <member name="F:Sony.NP.Presence.PresenceUpdateResponse.MAX_SIZE_GAME_DATA">
            <summary>
            The maximum size of binary data that can be set for a user
            </summary>
        </member>
        <member name="M:Sony.NP.Presence.PresenceUpdateResponse.ReadResult(System.UInt32,Sony.NP.FunctionTypes,Sony.NP.RequestBase)">
            <summary>
            Read the response data from the plug-in
            </summary>
            <param name="id">The request id.</param>
            <param name="apiCalled">The API called.</param>
            <param name="request">The Request object.</param>
        </member>
        <member name="P:Sony.NP.Presence.PresenceUpdateResponse.LocalUpdatedUser">
            <summary>
            IDs of local user whose friends presence was updated
            </summary>
            
        </member>
        <member name="P:Sony.NP.Presence.PresenceUpdateResponse.RemoteUser">
            <summary>
            The user whose presence was updated
            </summary>
        </member>
        <member name="P:Sony.NP.Presence.PresenceUpdateResponse.UserId">
            <summary>
            The user Id of local user
            </summary>
        </member>
        <member name="P:Sony.NP.Presence.PresenceUpdateResponse.UpdateType">
            <summary>
            The type of presence notification
            </summary>
        </member>
        <member name="P:Sony.NP.Presence.PresenceUpdateResponse.GameStatus">
            <summary>
            The status the user is in. This will only be set if <see cref="P:Sony.NP.Presence.PresenceUpdateResponse.UpdateType"/> is set to <see cref="F:Sony.NP.Presence.PresenceUpdateType.gameStatus"/> 
            </summary>
            <exception cref="T:Sony.NP.NpToolkitException">Will throw an exception if <see cref="P:Sony.NP.Presence.PresenceUpdateResponse.UpdateType"/> isn't set to <see cref="F:Sony.NP.Presence.PresenceUpdateType.gameStatus"/></exception>
        </member>
        <member name="P:Sony.NP.Presence.PresenceUpdateResponse.BinaryGameData">
            <summary>
            The binary data set by the user playing the application. This will only be set if <see cref="P:Sony.NP.Presence.PresenceUpdateResponse.UpdateType"/> is set to <see cref="F:Sony.NP.Presence.PresenceUpdateType.gameData"/> 
            </summary>
            <exception cref="T:Sony.NP.NpToolkitException">Will throw an exception if <see cref="P:Sony.NP.Presence.PresenceUpdateResponse.UpdateType"/> isn't set to <see cref="F:Sony.NP.Presence.PresenceUpdateType.gameData"/></exception>
        </member>
        <member name="P:Sony.NP.Presence.PresenceUpdateResponse.Platform">
            <summary>
            The platform the information in this class belongs to. See <see cref="T:Sony.NP.Core.PlatformType"/> for values provided
            </summary>
        </member>
        <member name="T:Sony.NP.Profiles">
            <summary>
            Contains the profile classed and structures common to the Friends and UserProfile systems.
            </summary>
        </member>
        <member name="T:Sony.NP.Profiles.RealName">
            <summary>
            This class represents a Real Name of a user.
            </summary>
        </member>
        <member name="F:Sony.NP.Profiles.RealName.MAX_SIZE_FIRST_NAME">
            <summary>
            The maximum size of the first name
            </summary>
        </member>
        <member name="F:Sony.NP.Profiles.RealName.MAX_SIZE_MIDDLE_NAME">
            <summary>
            The maximum size of the middle name
            </summary>
        </member>
        <member name="F:Sony.NP.Profiles.RealName.MAX_SIZE_LAST_NAME">
            <summary>
            The maximum size of the last name
            </summary>
        </member>
        <member name="P:Sony.NP.Profiles.RealName.FirstName">
            <summary>
            The first name of the user. It can contain spaces or hyphens
            </summary>
        </member>
        <member name="P:Sony.NP.Profiles.RealName.MiddleName">
            <summary>
            The middle name of the user. It can contain spaces or hyphens
            </summary>
        </member>
        <member name="P:Sony.NP.Profiles.RealName.LastName">
            <summary>
            The last name of the user. It can contain spaces or hyphens
            </summary>
        </member>
        <member name="T:Sony.NP.Profiles.Profile">
            <summary>
            Representation of the profile of a user.
            </summary>
        </member>
        <member name="F:Sony.NP.Profiles.Profile.MAX_SIZE_ABOUT_ME">
            <summary>
            The maximum size of <see cref="P:Sony.NP.Profiles.Profile.AboutMe"/>
            </summary>
        </member>
        <member name="F:Sony.NP.Profiles.Profile.MAX_SIZE_AVATAR_URL">
            <summary>
            The maximum size of the <see cref="P:Sony.NP.Profiles.Profile.AvatarUrl"/>
            </summary>
        </member>
        <member name="F:Sony.NP.Profiles.Profile.MAX_NUM_LANGUAGES_USED">
            <summary>
            The maximum number of languages that can be set in the profile
            </summary>
        </member>
        <member name="F:Sony.NP.Profiles.Profile.MAX_SIZE_VERIFIED_ACCOUNT_DISPLAY_NAME">
            <summary>
            The maximum size of the display name field for <see cref="P:Sony.NP.Profiles.Profile.VerifiedAccountDisplayName"/>
            </summary>
        </member>
        <member name="F:Sony.NP.Profiles.Profile.MAX_SIZE_PROFILE_PICTURE_URL">
            <summary>
            The maximum size of the <see cref="P:Sony.NP.Profiles.Profile.ProfilePictureUrl"/>
            </summary>
        </member>
        <member name="M:Sony.NP.Profiles.Profile.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Sony.NP.Profiles.Profile"/> class.
            </summary>
        </member>
        <member name="M:Sony.NP.Profiles.Profile.ToString">
            <summary>
            Generate an abbreviated string containing the profile data.
            </summary>
            <returns>The profile data</returns>
        </member>
        <member name="P:Sony.NP.Profiles.Profile.OnlineUser">
            <summary>
            The user whose profile is retrieved
            </summary>
        </member>
        <member name="P:Sony.NP.Profiles.Profile.RelationType">
            <summary>
            The relation between the profile user and the calling user
            </summary>
        </member>
        <member name="P:Sony.NP.Profiles.Profile.Country">
            <summary>
            The country code in ISO 3166-1 format (two-letter system)
            </summary>
        </member>
        <member name="P:Sony.NP.Profiles.Profile.LanguagesUsed">
            <summary>
            An array of the languages used starting with the primary language onwards. A five digit format (countryCode-language) is used.
            </summary>
        </member>
        <member name="P:Sony.NP.Profiles.Profile.PersonalDetailsType">
            <summary>
            The kind of personal information the user has set on the account
            </summary>
            <remarks>
            The personal details identifying the user who owns the account. See <see cref="P:Sony.NP.Profiles.Profile.RealName"/> and <see cref="P:Sony.NP.Profiles.Profile.VerifiedAccountDisplayName"/> for more information of
            the details provided.
            </remarks>
        </member>
        <member name="P:Sony.NP.Profiles.Profile.RealName">
            <summary>
            The first name, middle name and last name of the user
            </summary>
            <remarks>
            This should only be called if <see cref="P:Sony.NP.Profiles.Profile.PersonalDetailsType"/> is set to <see cref="F:Sony.NP.Profiles.Profile.PersonalDetailsTypes.realName"/>
            </remarks>
            <exception cref="T:Sony.NP.NpToolkitException">Will throw an exception if <see cref="P:Sony.NP.Profiles.Profile.PersonalDetailsType"/> isn't set to <see cref="F:Sony.NP.Profiles.Profile.PersonalDetailsTypes.realName"/></exception>
        </member>
        <member name="P:Sony.NP.Profiles.Profile.VerifiedAccountDisplayName">
            <summary>
            Verified Accounts can set a display name. If they do, then real name can't be provided as per TRC
            </summary>
            <remarks>
            This should only be called if <see cref="P:Sony.NP.Profiles.Profile.PersonalDetailsType"/> is set to <see cref="F:Sony.NP.Profiles.Profile.PersonalDetailsTypes.verifiedAccountDisplayName"/>
            </remarks>
            <exception cref="T:Sony.NP.NpToolkitException">Will throw an exception if <see cref="P:Sony.NP.Profiles.Profile.PersonalDetailsType"/> isn't set to <see cref="F:Sony.NP.Profiles.Profile.PersonalDetailsTypes.verifiedAccountDisplayName"/></exception>
        </member>
        <member name="P:Sony.NP.Profiles.Profile.IsVerifiedAccount">
            <summary>
            If this profile is from a Verified Account
            </summary>
        </member>
        <member name="P:Sony.NP.Profiles.Profile.AboutMe">
            <summary>
            Information set by the user on its profile
            </summary>
        </member>
        <member name="P:Sony.NP.Profiles.Profile.AvatarUrl">
            <summary>
            The avatar picture URL of the profile
            </summary>
        </member>
        <member name="P:Sony.NP.Profiles.Profile.ProfilePictureUrl">
            <summary>
            The profile picture URL of the user. Usually a real picture (when linked to Facebook, etc.)
            </summary>
        </member>
        <member name="T:Sony.NP.Profiles.Profile.RelationTypes">
            <summary>
            Enum representing the relationship between the calling user and the target user.
            </summary>
        </member>
        <member name="F:Sony.NP.Profiles.Profile.RelationTypes.notSet">
            <summary>Relation type was not set</summary>
        </member>
        <member name="F:Sony.NP.Profiles.Profile.RelationTypes.me">
            <summary>The profile is the calling user one</summary>
        </member>
        <member name="F:Sony.NP.Profiles.Profile.RelationTypes.friends">
            <summary>The profile is from a friend of the calling user</summary>
        </member>
        <member name="F:Sony.NP.Profiles.Profile.RelationTypes.requestingFriend">
            <summary>The profile is from someone who wants to be a friend of the calling user</summary>
        </member>
        <member name="F:Sony.NP.Profiles.Profile.RelationTypes.requestedFriend">
            <summary>The profile is from someone whom the calling user wants to be a friend of</summary>
        </member>
        <member name="F:Sony.NP.Profiles.Profile.RelationTypes.blocked">
            <summary>The profile is from a user the calling user has blocked</summary>
        </member>
        <member name="F:Sony.NP.Profiles.Profile.RelationTypes.friendOfFriends">
            <summary>The profile is from a friend of a friend of the calling user</summary>
        </member>
        <member name="F:Sony.NP.Profiles.Profile.RelationTypes.noRelationship">
            <summary>The profile is for someone that has no relationship with the calling user</summary>
        </member>
        <member name="T:Sony.NP.Profiles.Profile.PersonalDetailsTypes">
            <summary>
            Enum representing the personal detailed information provided in the user profile of the target user.
            </summary>
        </member>
        <member name="F:Sony.NP.Profiles.Profile.PersonalDetailsTypes.none">
            <summary>The user has not set any personal details or they can't be obtained by the calling user</summary>
        </member>
        <member name="F:Sony.NP.Profiles.Profile.PersonalDetailsTypes.realName">
            <summary>The user has set the real name</summary>
        </member>
        <member name="F:Sony.NP.Profiles.Profile.PersonalDetailsTypes.verifiedAccountDisplayName">
            <summary>The user has a verified account with a display name set</summary>
        </member>
        <member name="T:Sony.NP.Ranking">
            <summary>
            Ranking service related functionality.
            </summary>
        </member>
        <member name="F:Sony.NP.Ranking.MAX_NUM_BOARDS">
            <summary>
            The maximum number of boards that an application can have
            </summary>
        </member>
        <member name="F:Sony.NP.Ranking.MIN_PCID">
            <summary>
            The minimum, and default, player character Id
            </summary>
        </member>
        <member name="F:Sony.NP.Ranking.MAX_PCID">
            <summary>
            The maximum player character Id that can be set
            </summary>
        </member>
        <member name="F:Sony.NP.Ranking.MAX_RANGE">
            <summary>
            The maximum range of ranks that can be requested in one call
            </summary>
        </member>
        <member name="F:Sony.NP.Ranking.MIN_RANGE">
            <summary>
            The minimum range of ranks that can be requested in one call
            </summary>
        </member>
        <member name="F:Sony.NP.Ranking.FIRST_RANK">
            <summary>
            The first rank that can be requested. Please note that rank 0 does not exist   
            </summary>
        </member>
        <member name="M:Sony.NP.Ranking.SetScore(Sony.NP.Ranking.SetScoreRequest,Sony.NP.Ranking.TempRankResponse)">
            <summary>
            This function registers a new score for the calling user on the server (in the board specified) and provides a temporary rank.
            </summary>
            <param name="request">The parameters needed to register a score on the Ranking server </param>
            <param name="response">This response contains the return code  and an array with the temporary rank </param>
            <returns>If the operation is asynchronous, the function provides the request Id.</returns>
            <exception cref="T:Sony.NP.NpToolkitException">Will throw an exception either when the request data is invalid, or an internal error has occured inside the NpToolkit plug-in.</exception>
        </member>
        <member name="M:Sony.NP.Ranking.GetRangeOfRanks(Sony.NP.Ranking.GetRangeOfRanksRequest,Sony.NP.Ranking.RangeOfRanksResponse)">
            <summary>
            This function gets a range of ranks from a board from an specified starting rank.
            </summary>
            <param name="request">The parameters needed to get a range of ranks from a board starting from a rank specified.</param>
            <param name="response">This response contains the return code and an array with the information requested</param>
            <returns>If the operation is asynchronous, the function provides the request Id.</returns>
            <exception cref="T:Sony.NP.NpToolkitException">Will throw an exception either when the request data is invalid, or an internal error has occured inside the NpToolkit plug-in.</exception>
        </member>
        <member name="M:Sony.NP.Ranking.GetFriendsRanks(Sony.NP.Ranking.GetFriendsRanksRequest,Sony.NP.Ranking.FriendsRanksResponse)">
            <summary>
            This function gets ranks from a board from users who are friends of the calling user, starting on an specified rank.
            </summary>
            <param name="request">The parameters needed to get all friends ranks from a board starting from a rank specified.</param>
            <param name="response">This response contains the return code and an array with the information requested.</param>
            <returns>If the operation is asynchronous, the function provides the request Id.</returns>
            <exception cref="T:Sony.NP.NpToolkitException">Will throw an exception either when the request data is invalid, or an internal error has occured inside the NpToolkit plug-in.</exception>
        </member>
        <member name="M:Sony.NP.Ranking.GetUsersRanks(Sony.NP.Ranking.GetUsersRanksRequest,Sony.NP.Ranking.UsersRanksResponse)">
            <summary>
            This function gets the ranks of all users specified for one specific board.
            </summary>
            <param name="request">The parameters needed to get information from users on the Ranking server for an specific board.</param>
            <param name="response">This response contains the return code and an array with the information requested.</param>
            <returns>If the operation is asynchronous, the function provides the request Id.</returns>
            <exception cref="T:Sony.NP.NpToolkitException">Will throw an exception either when the request data is invalid, or an internal error has occured inside the NpToolkit plug-in.</exception>
        </member>
        <member name="M:Sony.NP.Ranking.SetGameData(Sony.NP.Ranking.SetGameDataRequest,Sony.NP.Ranking.SetGameDataResultResponse)">
            <summary>
            This function sets game data for an specific entry of the calling user in one board on the Server.
            </summary>
            <param name="request">The parameters parameters needed to set game data for an entry on the Ranking server .</param>
            <param name="response">This response contains the chunk Id. If it is 0, it means all game data has been set. Otherwise (chunks are being used and the last one has not been sent yet), this value needs to be used in the next request to set idOfPrevChunk.</param>
            <returns>If the operation is asynchronous, the function provides the request Id.</returns>
            <exception cref="T:Sony.NP.NpToolkitException">Will throw an exception either when the request data is invalid, or an internal error has occured inside the NpToolkit plug-in.</exception>
        </member>
        <member name="M:Sony.NP.Ranking.GetGameData(Sony.NP.Ranking.GetGameDataRequest,Sony.NP.Ranking.GetGameDataResultResponse)">
            <summary>
            This function gets game data for an specific entry of the user specified in one board on the Server.
            </summary>
            <param name="request">The parameters needed to get game data for an entry on the Ranking server.</param>
            <param name="response">This response contains the chunk Id. If it is 0, it means all game data has been retrieved. Otherwise (chunks are being used and the last one has not been retrieved yet), this value needs to be used in the next request to set idOfPrevChunk.</param>
            <returns>If the operation is asynchronous, the function provides the request Id.</returns>
            <exception cref="T:Sony.NP.NpToolkitException">Will throw an exception either when the request data is invalid, or an internal error has occured inside the NpToolkit plug-in.</exception>
        </member>
        <member name="T:Sony.NP.Ranking.SetScoreRequest">
            <summary>
            Request object to set a new score on a board for the calling user.
            </summary>
        </member>
        <member name="F:Sony.NP.Ranking.SetScoreRequest.NP_SCORE_COMMENT_MAXLEN">
            <summary>
            The maximum length of the UTF8 comment string
            </summary>
        </member>
        <member name="F:Sony.NP.Ranking.SetScoreRequest.NP_SCORE_GAMEINFO_MAXSIZE">
            <summary>
            The maximum number of bytes in the <see cref="P:Sony.NP.Ranking.SetScoreRequest.GameInfoData"/> array.
            </summary>
        </member>
        <member name="M:Sony.NP.Ranking.SetScoreRequest.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Sony.NP.Ranking.SetScoreRequest"/> class.
            </summary>
        </member>
        <member name="P:Sony.NP.Ranking.SetScoreRequest.Score">
            <summary>
            The score to register
            </summary>
        </member>
        <member name="P:Sony.NP.Ranking.SetScoreRequest.Comment">
            <summary>
            Optional. A string comment to be registered along with the score
            </summary>
            <exception cref="T:Sony.NP.NpToolkitException">Will throw an exception if the string is more than <see cref="F:Sony.NP.Ranking.SetScoreRequest.NP_SCORE_COMMENT_MAXLEN"/> characters.</exception>
        </member>
        <member name="P:Sony.NP.Ranking.SetScoreRequest.GameInfoData">
            <summary>
            Optional. Game information data that can be saved per score
            </summary>
            <remarks>
            Takes a copy of the data or returns a copy. The binary data must be assign explicitly. Changing the array set or returned by this property won't change the stored data in this instance.
            </remarks>
            <exception cref="T:Sony.NP.NpToolkitException">Will throw an exception if the array is more than <see cref="F:Sony.NP.Ranking.SetScoreRequest.NP_SCORE_GAMEINFO_MAXSIZE"/> characters.</exception>
        </member>
        <member name="P:Sony.NP.Ranking.SetScoreRequest.BoardId">
            <summary>
            The board Id of the board where the score will be registered
            </summary>
            <exception cref="T:Sony.NP.NpToolkitException">Will throw an exception if it is more than <see cref="F:Sony.NP.Ranking.MAX_NUM_BOARDS"/>.</exception>
        </member>
        <member name="P:Sony.NP.Ranking.SetScoreRequest.PcId">
            <summary>
            Optional. The player character Id, in case it is different than 0           
            </summary>
        </member>
        <member name="T:Sony.NP.Ranking.GetRangeOfRanksRequest">
            <summary>
            Request object to get a range of ranks from a board (if any) starting from a specified rank.
            </summary>
        </member>
        <member name="M:Sony.NP.Ranking.GetRangeOfRanksRequest.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Sony.NP.Ranking.GetRangeOfRanksRequest"/> class.
            </summary>
        </member>
        <member name="P:Sony.NP.Ranking.GetRangeOfRanksRequest.BoardId">
            <summary>
            The board Id of the board where the range of ranks will be obtained from     
            </summary>
            <exception cref="T:Sony.NP.NpToolkitException">Will throw an exception if it is more than <see cref="F:Sony.NP.Ranking.MAX_NUM_BOARDS"/>.</exception>
        </member>
        <member name="P:Sony.NP.Ranking.GetRangeOfRanksRequest.StartRank">
            <summary>
            The first rank that will be obtained in the range
            </summary>
            <exception cref="T:Sony.NP.NpToolkitException">Will throw an exception if it is less than <see cref="F:Sony.NP.Ranking.FIRST_RANK"/>.</exception>
        </member>
        <member name="P:Sony.NP.Ranking.GetRangeOfRanksRequest.Range">
            <summary>
            The number of ranks that will be obtained, starting from the <see cref="P:Sony.NP.Ranking.GetRangeOfRanksRequest.StartRank"/> 
            </summary>
            /// <exception cref="T:Sony.NP.NpToolkitException">Will throw an exception if it is less than <see cref="F:Sony.NP.Ranking.MIN_RANGE"/> or greater than <see cref="F:Sony.NP.Ranking.MAX_RANGE"/>.</exception>
        </member>
        <member name="P:Sony.NP.Ranking.GetRangeOfRanksRequest.IsCrossSaveInformation">
            <summary>
            Optional. Set it to true if the board is shared with PS Vita or PS3 applications 
            </summary>
        </member>
        <member name="T:Sony.NP.Ranking.GetFriendsRanksRequest">
            <summary>
            Request object to get the ranks of the friends for the calling user (if any) starting from a specified rank.
            </summary>
        </member>
        <member name="M:Sony.NP.Ranking.GetFriendsRanksRequest.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Sony.NP.Ranking.GetRangeOfRanksRequest"/> class.
            </summary>
        </member>
        <member name="P:Sony.NP.Ranking.GetFriendsRanksRequest.BoardId">
            <summary>
            The board Id of the board where the friends ranks will be obtained from 
            </summary>
        </member>
        <member name="P:Sony.NP.Ranking.GetFriendsRanksRequest.StartRank">
            <summary>
            Optional. In case pagination is needed, specify the last rank obtained in the previous call. Otherwise, leave blank
            </summary>
        </member>
        <member name="P:Sony.NP.Ranking.GetFriendsRanksRequest.FriendsWithPcId">
            <summary>
            Optional. In case the pc Id to be retrieved is different than the default one 0, specify the pc Id to retrieve
            </summary>
        </member>
        <member name="P:Sony.NP.Ranking.GetFriendsRanksRequest.IsCrossSaveInformation">
            <summary>
            Optional. Set it to true if the board is shared with PS Vita or PS3 applications 
            </summary>
        </member>
        <member name="P:Sony.NP.Ranking.GetFriendsRanksRequest.AddCallingUserRank">
            <summary>
            True by default. It also returns the calling user rank, along with the ranks of the user' friends 
            </summary>
        </member>
        <member name="T:Sony.NP.Ranking.ScoreAccountIdPcId">
            <summary>
            Account ID structure with player character ID
            </summary>
        </member>
        <member name="F:Sony.NP.Ranking.ScoreAccountIdPcId.accountId">
            <summary>
            Account ID
            </summary>
        </member>
        <member name="F:Sony.NP.Ranking.ScoreAccountIdPcId.pcId">
            <summary>
            Player character ID
            </summary>
        </member>
        <member name="T:Sony.NP.Ranking.GetUsersRanksRequest">
            <summary>
            Request object to get ranks from a board for specific users (if any rank is found).
            </summary>
        </member>
        <member name="F:Sony.NP.Ranking.GetUsersRanksRequest.MAX_NUM_USERS">
            <summary>
            The maximum number of users that can be requested in one call
            </summary>
        </member>
        <member name="M:Sony.NP.Ranking.GetUsersRanksRequest.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Sony.NP.Ranking.GetRangeOfRanksRequest"/> class.
            </summary>
        </member>
        <member name="P:Sony.NP.Ranking.GetUsersRanksRequest.Users">
            <summary>
            The array identifying the users whom ranks want to be obtained. If pc ids should be looked into, set <see cref="P:Sony.NP.Ranking.GetUsersRanksRequest.IgnorePcIds"/> to false. Otherwise, do not set pcIds
            The array size must not exceed <see cref="F:Sony.NP.Ranking.GetUsersRanksRequest.MAX_NUM_USERS"/>.
            </summary>
            <remarks>
            Takes a copy of the array or returns a copy. The ids must be assign explicitly. Changing the array set or returned by this property won't change the stored data in this instance.
            </remarks>
            <exception cref="T:Sony.NP.NpToolkitException">Will throw an exception if the array is more than <see cref="F:Sony.NP.Ranking.GetUsersRanksRequest.MAX_NUM_USERS"/>.</exception>
            <exception cref="T:Sony.NP.NpToolkitException">Will throw an exception if the PcIds are outside the range of <see cref="F:Sony.NP.Ranking.MIN_PCID"/> and <see cref="F:Sony.NP.Ranking.MAX_PCID"/>.</exception>
        </member>
        <member name="P:Sony.NP.Ranking.GetUsersRanksRequest.BoardId">
            <summary>
            The board Id of the board where the users ranks will be obtained from
            </summary>
        </member>
        <member name="P:Sony.NP.Ranking.GetUsersRanksRequest.IsCrossSaveInformation">
            <summary>
            Optional. Set it to true if the board is shared with PS Vita or PS3 applications     
            </summary>
        </member>
        <member name="P:Sony.NP.Ranking.GetUsersRanksRequest.IgnorePcIds">
            <summary>
            Optional. When set to true, the pc Ids specified in the <see cref="P:Sony.NP.Ranking.GetUsersRanksRequest.Users"/> array should be ignored 
            </summary>
        </member>
        <member name="T:Sony.NP.Ranking.SetGameDataRequest">
            <summary>
            Request object to set game data for an already registered entry on a board for the calling user.
            </summary>
        </member>
        <member name="M:Sony.NP.Ranking.SetGameDataRequest.SetDataChunk(System.Byte[],System.UInt64,System.UInt64)">
            <summary>
            Set the Chunk of data to upload to the the Ranking board.
            </summary>
            <param name="data">The array contain the data.</param>
            <param name="startIndex">An offset into the array to start writing the data.</param>
            <param name="chunkSize">The total number of bytes to write.</param>
        </member>
        <member name="M:Sony.NP.Ranking.SetGameDataRequest.SetDataChunk(System.Byte[],System.UInt64,System.UInt64,System.UInt64)">
            <summary>
            Set the Chunk of data to upload to the the Ranking board.
            </summary>
            <param name="data">The array contain the data.</param>
            <param name="startIndex">An offset into the array to start writing the data.</param>
            <param name="chunkSize">The total number of bytes to write.</param>
            <param name="totalSize">The total size of the entire game data. All chunks included.</param>
        </member>
        <member name="M:Sony.NP.Ranking.SetGameDataRequest.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Sony.NP.Ranking.SetGameDataRequest"/> class.
            </summary>
        </member>
        <member name="P:Sony.NP.Ranking.SetGameDataRequest.BoardId">
            <summary>
            The board Id of the board where the game data will be set
            </summary>
        </member>
        <member name="P:Sony.NP.Ranking.SetGameDataRequest.IdOfPrevChunk">
            <summary>
            Set it when sending game data in chunks, after the first chunk has been sent. The value should be the value received in <see cref="P:Sony.NP.Ranking.SetGameDataResultResponse.ChunkId"/> in the response of the previous request.
            </summary>
        </member>
        <member name="P:Sony.NP.Ranking.SetGameDataRequest.Score">
            <summary>
            The score to save the game data that is being send. This score must belong to the calling user (only the calling user game data can be set)
            </summary>
        </member>
        <member name="P:Sony.NP.Ranking.SetGameDataRequest.TotalSize">
            <summary>
            Get the total size of the entire game data. All chunks included. Set by <see cref="M:Sony.NP.Ranking.SetGameDataRequest.SetDataChunk(System.Byte[],System.UInt64,System.UInt64)"/>.
            </summary>
        </member>
        <member name="P:Sony.NP.Ranking.SetGameDataRequest.Data">
            <summary>
            Get the game data set by <see cref="M:Sony.NP.Ranking.SetGameDataRequest.SetDataChunk(System.Byte[],System.UInt64,System.UInt64)"/>. 
            </summary>
        </member>
        <member name="P:Sony.NP.Ranking.SetGameDataRequest.StartIndex">
            <summary>
            Get the start index for the <see cref="P:Sony.NP.Ranking.SetGameDataRequest.Data"/> array where the chunk of data will start.
            </summary>
        </member>
        <member name="P:Sony.NP.Ranking.SetGameDataRequest.PcId">
            <summary>
            Optional. The player character Id, in case it is different than 0    
            </summary>
        </member>
        <member name="T:Sony.NP.Ranking.GetGameDataRequest">
            <summary>
            Request object to get game data for an already registered entry on a board for a specified user.
            </summary>
        </member>
        <member name="M:Sony.NP.Ranking.GetGameDataRequest.SetRcvDataChunk(System.Byte[],System.UInt64,System.UInt64)">
            <summary>
            
            </summary>
            <param name="data"></param>
            <param name="startIndex"></param>
            <param name="chunkSize"></param>
        </member>
        <member name="M:Sony.NP.Ranking.GetGameDataRequest.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Sony.NP.Ranking.GetGameDataRequest"/> class.
            </summary>
        </member>
        <member name="P:Sony.NP.Ranking.GetGameDataRequest.BoardId">
            <summary>
            The board Id of the board where the game data will be get from
            </summary>
        </member>
        <member name="P:Sony.NP.Ranking.GetGameDataRequest.IdOfPrevChunk">
            <summary>
            Set it when getting game data in chunks, after the first chunk has been received. The value should be the value received in <see cref="P:Sony.NP.Ranking.GetGameDataResultResponse.ChunkId"/> in the response of the previous request
            </summary>
        </member>
        <member name="P:Sony.NP.Ranking.GetGameDataRequest.AccountId">
            <summary>
            The account Id of the user to get the game data from
            </summary>
        </member>
        <member name="P:Sony.NP.Ranking.GetGameDataRequest.RcvData">
            <summary>
            Gets the array to received the game data requested. Set in <see cref="M:Sony.NP.Ranking.GetGameDataRequest.SetRcvDataChunk(System.Byte[],System.UInt64,System.UInt64)"/>.
            </summary>
        </member>
        <member name="P:Sony.NP.Ranking.GetGameDataRequest.PcId">
            <summary>
            Optional. The player character Id, in case it is different than 0
            </summary>
        </member>
        <member name="T:Sony.NP.Ranking.TempRankResponse">
            <summary>
            Response data containing an approximated rank of the calling user when a score is registered from a call to <see cref="M:Sony.NP.Ranking.SetScore(Sony.NP.Ranking.SetScoreRequest,Sony.NP.Ranking.TempRankResponse)"/>
            </summary>
        </member>
        <member name="M:Sony.NP.Ranking.TempRankResponse.ReadResult(System.UInt32,Sony.NP.FunctionTypes,Sony.NP.RequestBase)">
            <summary>
            Read the response data from the plug-in
            </summary>
            <param name="id">The request id.</param>
            <param name="apiCalled">The API called.</param>
            <param name="request">The Request object.</param>
        </member>
        <member name="P:Sony.NP.Ranking.TempRankResponse.TempRank">
            <summary>
            Temporary rank given by the server when a score is just registered. It may be a bit innacurate to the final result, but it is a quick and safe approximation
            </summary>
        </member>
        <member name="T:Sony.NP.Ranking.ScoreRankDataBase">
            <summary>
            Common data members for score rank data
            </summary>
        </member>
        <member name="P:Sony.NP.Ranking.ScoreRankDataBase.Comment">
            <summary>
             Comments on the board for the user
            </summary>
        </member>
        <member name="P:Sony.NP.Ranking.ScoreRankDataBase.GameInfo">
            <summary>
            Game information on the board for the user.
            </summary>
        </member>
        <member name="P:Sony.NP.Ranking.ScoreRankDataBase.PcId">
            <summary>
            Player character ID of the player registering the score. 0 is set for a score registered without the player character ID set.
            </summary>
        </member>
        <member name="P:Sony.NP.Ranking.ScoreRankDataBase.SerialRank">
            <summary>
            Current rank. For same scores, the first one registered to the server will rank higher.
            </summary>
        </member>
        <member name="P:Sony.NP.Ranking.ScoreRankDataBase.Rank">
            <summary>
            Current rank. For same scores, scores will be ranked equally.
            </summary>
        </member>
        <member name="P:Sony.NP.Ranking.ScoreRankDataBase.HighestRank">
            <summary>
            Highest rank achieved by the player registering the score. rank value will be used.
            </summary>
        </member>
        <member name="P:Sony.NP.Ranking.ScoreRankDataBase.HasGameData">
            <summary>
            Flag to indicate whether score has game data attached or not. Only players having high ranks can register game data.
            </summary>
        </member>
        <member name="P:Sony.NP.Ranking.ScoreRankDataBase.ScoreValue">
            <summary>
            Score value
            </summary>
        </member>
        <member name="P:Sony.NP.Ranking.ScoreRankDataBase.RecordDate">
            <summary>
            Time at which this score was registered (processed by the ranking server)
            </summary>
        </member>
        <member name="P:Sony.NP.Ranking.ScoreRankDataBase.AccountId">
            <summary>
            Account ID of the player registering the score
            </summary>
        </member>
        <member name="T:Sony.NP.Ranking.ScoreRankData">
            <summary>
            Ranking information
            </summary>
        </member>
        <member name="P:Sony.NP.Ranking.ScoreRankData.OnlineId">
            <summary>
            Online ID of the player registering the score
            </summary>
        </member>
        <member name="T:Sony.NP.Ranking.ScoreRankDataForCrossSave">
            <summary>
            Ranking information for Cross-Save
            </summary>
        </member>
        <member name="P:Sony.NP.Ranking.ScoreRankDataForCrossSave.NpId">
            <summary>
            Online ID of the player registering the score
            </summary>
        </member>
        <member name="T:Sony.NP.Ranking.ScorePlayerRankData">
            <summary>
            Ranking information of a specific player
            </summary>
        </member>
        <member name="P:Sony.NP.Ranking.ScorePlayerRankData.HasData">
            <summary>
            Indicating whether target player has rank registered or not. 
            If false all other data in this instance isn't valid.
            </summary>
        </member>
        <member name="T:Sony.NP.Ranking.ScorePlayerRankDataForCrossSave">
            <summary>
            Ranking information of a specific player for Cross-Save
            </summary>
        </member>
        <member name="P:Sony.NP.Ranking.ScorePlayerRankDataForCrossSave.HasData">
            <summary>
            Indicating whether target player has rank registered or not. 
            If false all other data in this instance isn't valid.
            </summary>
        </member>
        <member name="T:Sony.NP.Ranking.RangeOfRanksResponse">
            <summary>
            Response data containing the ranks, comments and game information of the range requested (if any) from a call to <see cref="M:Sony.NP.Ranking.SetScore(Sony.NP.Ranking.SetScoreRequest,Sony.NP.Ranking.TempRankResponse)"/>
            </summary>
        </member>
        <member name="M:Sony.NP.Ranking.RangeOfRanksResponse.ReadResult(System.UInt32,Sony.NP.FunctionTypes,Sony.NP.RequestBase)">
            <summary>
            Read the response data from the plug-in
            </summary>
            <param name="id">The request id.</param>
            <param name="apiCalled">The API called.</param>
            <param name="request">The Request object.</param>
        </member>
        <member name="P:Sony.NP.Ranking.RangeOfRanksResponse.RankData">
            <summary>
            Rank data information for the users on the board in case <see cref="P:Sony.NP.Ranking.RangeOfRanksResponse.IsCrossSaveInformation"/> was not set in the request   
            </summary>
            <exception cref="T:Sony.NP.NpToolkitException">Will throw an exception if <see cref="P:Sony.NP.Ranking.RangeOfRanksResponse.IsCrossSaveInformation"/> isn't set to false.</exception>
        </member>
        <member name="P:Sony.NP.Ranking.RangeOfRanksResponse.RankDataForCrossSave">
            <summary>
            Rank data information for the users on the board in case <see cref="P:Sony.NP.Ranking.RangeOfRanksResponse.IsCrossSaveInformation"/> was set to true in the request 
            </summary>
            <exception cref="T:Sony.NP.NpToolkitException">Will throw an exception if <see cref="P:Sony.NP.Ranking.RangeOfRanksResponse.IsCrossSaveInformation"/> isn't set to true.</exception>
        </member>
        <member name="P:Sony.NP.Ranking.RangeOfRanksResponse.IsCrossSaveInformation">
            <summary>
            It is true if the information requested was from a shared board between PS Vita or PS3        
            </summary>
        </member>
        <member name="P:Sony.NP.Ranking.RangeOfRanksResponse.UpdateTime">
            <summary>
            The time when the server created the ranking information (UTC)  
            </summary>
        </member>
        <member name="P:Sony.NP.Ranking.RangeOfRanksResponse.TotalEntriesOnBoard">
            <summary>
            The total number of entries in the board
            </summary>
        </member>
        <member name="P:Sony.NP.Ranking.RangeOfRanksResponse.BoardId">
            <summary>
            The board of which ranks belong to
            </summary>
        </member>
        <member name="P:Sony.NP.Ranking.RangeOfRanksResponse.NumValidEntries">
            <summary>
            Number of valid entries in the <see cref="P:Sony.NP.Ranking.RangeOfRanksResponse.RankData"/> (or <see cref="P:Sony.NP.Ranking.RangeOfRanksResponse.RankDataForCrossSave"/>) array. Different from size of those arrays if the number of entries in the board is less than the requested
            </summary>
        </member>
        <member name="P:Sony.NP.Ranking.RangeOfRanksResponse.StartRank">
            <summary>
            The rank from which the range was originally requested
            </summary>
        </member>
        <member name="T:Sony.NP.Ranking.FriendsRanksResponse">
            <summary>
            Response data containing the ranks, comments and game information of the range requested (if any) from a call to <see cref="M:Sony.NP.Ranking.SetScore(Sony.NP.Ranking.SetScoreRequest,Sony.NP.Ranking.TempRankResponse)"/>
            </summary>
        </member>
        <member name="M:Sony.NP.Ranking.FriendsRanksResponse.ReadResult(System.UInt32,Sony.NP.FunctionTypes,Sony.NP.RequestBase)">
            <summary>
            Read the response data from the plug-in
            </summary>
            <param name="id">The request id.</param>
            <param name="apiCalled">The API called.</param>
            <param name="request">The Request object.</param>
        </member>
        <member name="P:Sony.NP.Ranking.FriendsRanksResponse.RankData">
            <summary>
            Rank data information for the users on the board in case <see cref="P:Sony.NP.Ranking.FriendsRanksResponse.IsCrossSaveInformation"/> was not set in the request   
            </summary>
            <exception cref="T:Sony.NP.NpToolkitException">Will throw an exception if <see cref="P:Sony.NP.Ranking.FriendsRanksResponse.IsCrossSaveInformation"/> isn't set to false.</exception>
        </member>
        <member name="P:Sony.NP.Ranking.FriendsRanksResponse.RankDataForCrossSave">
            <summary>
            Rank data information for the users on the board in case <see cref="P:Sony.NP.Ranking.FriendsRanksResponse.IsCrossSaveInformation"/> was set to true in the request 
            </summary>
            <exception cref="T:Sony.NP.NpToolkitException">Will throw an exception if <see cref="P:Sony.NP.Ranking.FriendsRanksResponse.IsCrossSaveInformation"/> isn't set to true.</exception>
        </member>
        <member name="P:Sony.NP.Ranking.FriendsRanksResponse.IsCrossSaveInformation">
            <summary>
            It is true if the information requested was from a shared board between PS Vita or PS3        
            </summary>
        </member>
        <member name="P:Sony.NP.Ranking.FriendsRanksResponse.NumFriends">
            <summary>
            The size of <see cref="P:Sony.NP.Ranking.FriendsRanksResponse.RankData"/> (or <see cref="P:Sony.NP.Ranking.FriendsRanksResponse.RankDataForCrossSave"/>) array   
            </summary>
        </member>
        <member name="P:Sony.NP.Ranking.FriendsRanksResponse.UpdateTime">
            <summary>
            The time when the server created the ranking information (UTC)  
            </summary>
        </member>
        <member name="P:Sony.NP.Ranking.FriendsRanksResponse.BoardId">
            <summary>
            The board of which ranks belong to
            </summary>
        </member>
        <member name="P:Sony.NP.Ranking.FriendsRanksResponse.TotalEntriesOnBoard">
            <summary>
            The total amount of entries the board has
            </summary>
        </member>
        <member name="P:Sony.NP.Ranking.FriendsRanksResponse.TotalFriendsOnBoard">
            <summary>
            The total amount of friends of the calling user the board has
            </summary>
        </member>
        <member name="P:Sony.NP.Ranking.FriendsRanksResponse.FriendsWithPcId">
            <summary>
            The pc Id for all friends retrieved 
            </summary>
        </member>
        <member name="T:Sony.NP.Ranking.UsersRanksResponse">
            <summary>
            Response data containing the ranks, comments and game information of the specific users requested (if any).
            </summary>
        </member>
        <member name="M:Sony.NP.Ranking.UsersRanksResponse.ReadResult(System.UInt32,Sony.NP.FunctionTypes,Sony.NP.RequestBase)">
            <summary>
            Read the response data from the plug-in
            </summary>
            <param name="id">The request id.</param>
            <param name="apiCalled">The API called.</param>
            <param name="request">The Request object.</param>
        </member>
        <member name="P:Sony.NP.Ranking.UsersRanksResponse.Users">
            <summary>
            Users requested, and their rank data information in case <see cref="P:Sony.NP.Ranking.UsersRanksResponse.IsCrossSaveInformation"/> was not set in the request. The order of users in the array maps the order given in the request, in the <see cref="P:Sony.NP.Ranking.GetUsersRanksRequest.Users"/> array.
            </summary>
            <exception cref="T:Sony.NP.NpToolkitException">Will throw an exception if <see cref="P:Sony.NP.Ranking.UsersRanksResponse.IsCrossSaveInformation"/> isn't set to false.</exception>
        </member>
        <member name="P:Sony.NP.Ranking.UsersRanksResponse.UsersForCrossSave">
            <summary>
            Users requested, and their rank data information in case <see cref="P:Sony.NP.Ranking.UsersRanksResponse.IsCrossSaveInformation"/> was set to true in the request. The order of users in the array maps the order given in the request, in the <see cref="P:Sony.NP.Ranking.GetUsersRanksRequest.Users"/> array.
            </summary>
            <exception cref="T:Sony.NP.NpToolkitException">Will throw an exception if <see cref="P:Sony.NP.Ranking.UsersRanksResponse.IsCrossSaveInformation"/> isn't set to true.</exception>
        </member>
        <member name="P:Sony.NP.Ranking.UsersRanksResponse.IsCrossSaveInformation">
            <summary>
            It is true if the information requested was from a shared board between PS Vita or PS3        
            </summary>
        </member>
        <member name="P:Sony.NP.Ranking.UsersRanksResponse.NumUsers">
            <summary>
            The size of <see cref="P:Sony.NP.Ranking.UsersRanksResponse.Users"/> (or <see cref="P:Sony.NP.Ranking.UsersRanksResponse.UsersForCrossSave"/>) array   
            </summary>
        </member>
        <member name="P:Sony.NP.Ranking.UsersRanksResponse.NumValidUsers">
            <summary>
            Number of valid entries in the <see cref="P:Sony.NP.Ranking.UsersRanksResponse.Users"/> (or <see cref="P:Sony.NP.Ranking.UsersRanksResponse.UsersForCrossSave"/>) array. This is, the number of users found to have a rank and returned in this call   
            </summary>
        </member>
        <member name="P:Sony.NP.Ranking.UsersRanksResponse.UpdateTime">
            <summary>
            The time when the server created the ranking information (UTC)  
            </summary>
        </member>
        <member name="P:Sony.NP.Ranking.UsersRanksResponse.BoardId">
            <summary>
            The board of which ranks belong to
            </summary>
        </member>
        <member name="P:Sony.NP.Ranking.UsersRanksResponse.TotalEntriesOnBoard">
            <summary>
            The total amount of entries the board has
            </summary>
        </member>
        <member name="T:Sony.NP.Ranking.SetGameDataResultResponse">
            <summary>
            Response data containing an indicator if a new call needs to be performed to set a new chunk of game data or if all game data information has been already set.
            </summary>
        </member>
        <member name="M:Sony.NP.Ranking.SetGameDataResultResponse.ReadResult(System.UInt32,Sony.NP.FunctionTypes,Sony.NP.RequestBase)">
            <summary>
            Read the response data from the plug-in
            </summary>
            <param name="id">The request id.</param>
            <param name="apiCalled">The API called.</param>
            <param name="request">The Request object.</param>
        </member>
        <member name="P:Sony.NP.Ranking.SetGameDataResultResponse.ChunkId">
            <summary>
            When different than 0 it means there are more chunks pending. Use this value to set, in the next request in <see cref="M:Sony.NP.Ranking.SetGameData(Sony.NP.Ranking.SetGameDataRequest,Sony.NP.Ranking.SetGameDataResultResponse)"/>, the member <see cref="F:Sony.NP.Ranking.SetGameDataRequest.idOfPrevChunk"/>.
            </summary>
        </member>
        <member name="T:Sony.NP.Ranking.GetGameDataResultResponse">
            <summary>
            Response data containing the game data retrieved and an indicator if a new call needs to be performed to get a new chunk.
            </summary>
        </member>
        <member name="M:Sony.NP.Ranking.GetGameDataResultResponse.ReadResult(System.UInt32,Sony.NP.FunctionTypes,Sony.NP.RequestBase)">
            <summary>
            Read the response data from the plug-in
            </summary>
            <param name="id">The request id.</param>
            <param name="apiCalled">The API called.</param>
            <param name="request">The Request object.</param>
        </member>
        <member name="P:Sony.NP.Ranking.GetGameDataResultResponse.TotalSize">
            <summary>
            The total size of the entire game data. All chunks included
            </summary>
        </member>
        <member name="P:Sony.NP.Ranking.GetGameDataResultResponse.RcvDataSize">
            <summary>
            The size of the chunk buffer recieved.
            </summary>
        </member>
        <member name="P:Sony.NP.Ranking.GetGameDataResultResponse.RcvDataValidSize">
            <summary>
            The number of bytes of proper data. It may defer from <see cref="P:Sony.NP.Ranking.GetGameDataResultResponse.RcvDataSize"/> if the remaining bytes from the game data do not match the chunk size.
            </summary>
        </member>
        <member name="P:Sony.NP.Ranking.GetGameDataResultResponse.StartIndex">
            <summary>
            The index into the <see cref="P:Sony.NP.Ranking.GetGameDataResultResponse.RcvData"/> array where the recieved data was written.
            </summary>
        </member>
        <member name="P:Sony.NP.Ranking.GetGameDataResultResponse.RcvData">
            <summary>
            Same array as the one given in the request. Now it contains the game data chunk.
            </summary>
        </member>
        <member name="P:Sony.NP.Ranking.GetGameDataResultResponse.ChunkId">
            <summary>
            When different than 0 it means there are more chunks pending. Use this value to set, in the next request in <see cref="M:Sony.NP.Ranking.GetGameData(Sony.NP.Ranking.GetGameDataRequest,Sony.NP.Ranking.GetGameDataResultResponse)"/>, the member <see cref="P:Sony.NP.Ranking.GetGameDataRequest.IdOfPrevChunk"/>.  
            </summary>
        </member>
        <member name="T:Sony.NP.Trophies">
            <summary>
            Trophy service related functionality.
            </summary>
        </member>
        <member name="M:Sony.NP.Trophies.RegisterTrophyPack(Sony.NP.Trophies.RegisterTrophyPackRequest,Sony.NP.Core.EmptyResponse)">
            <summary>
            This function makes the trophy package visible to the user in the system software
            </summary>
            <param name="request">Parameters needed to register the trophy package for a user </param>
            <param name="response">This response does not have data, only return code</param>
            <returns>If the operation is asynchronous, the function provides the request Id.</returns>
            <exception cref="T:Sony.NP.NpToolkitException">Will throw an exception either when the request data is invalid, or an internal error has occured inside the NpToolkit plug-in.</exception>
        </member>
        <member name="M:Sony.NP.Trophies.SetScreenshot(Sony.NP.Trophies.SetScreenshotRequest,Sony.NP.Core.EmptyResponse)">
            <summary>
            This function captures a screenshot and set it to the locked trophies specified, to be visible in the system when they are unlocked.
            </summary>
            <param name="request">Parameters needed to take the screenshot </param>
            <param name="response">This response does not have data, only return code</param>
            <returns>If the operation is asynchronous, the function provides the request Id.</returns>
            <exception cref="T:Sony.NP.NpToolkitException">Will throw an exception either when the request data is invalid, or an internal error has occured inside the NpToolkit plug-in.</exception>
        </member>
        <member name="M:Sony.NP.Trophies.UnlockTrophy(Sony.NP.Trophies.UnlockTrophyRequest,Sony.NP.Core.EmptyResponse)">
            <summary>
            Function to unlock a trophy for the calling user.
            </summary>
            <param name="request">The parameters needed to register the trophy package for a user.</param>
            <param name="response">This response does not have data, only return code</param>
            <returns>If the operation is asynchronous, the function provides the request Id.</returns>
            <exception cref="T:Sony.NP.NpToolkitException">Will throw an exception either when the request data is invalid, or an internal error has occured inside the NpToolkit plug-in.</exception>
        </member>
        <member name="M:Sony.NP.Trophies.GetUnlockedTrophies(Sony.NP.Trophies.GetUnlockedTrophiesRequest,Sony.NP.Trophies.UnlockedTrophiesResponse)">
            <summary>
            This function is used to know which trophies have been already unlocked by the calling user.
            </summary>
            <param name="request">Parameters needed to obtain the unlocked trophy Ids for the calling user </param>
            <param name="response">This response contains the return code and an array with the unlocked trophy Ids</param>
            <returns>If the operation is asynchronous, the function provides the request Id.</returns>
            <exception cref="T:Sony.NP.NpToolkitException">Will throw an exception either when the request data is invalid, or an internal error has occured inside the NpToolkit plug-in.</exception>
        </member>
        <member name="M:Sony.NP.Trophies.DisplayTrophyListDialog(Sony.NP.Trophies.DisplayTrophyListDialogRequest,Sony.NP.Core.EmptyResponse)">
            <summary>
            This function opens the System Trophy list for the specified  title and service label.
            </summary>
            <param name="request">Parameters needed to open the System Trophy list </param>
            <param name="response">This response does not have data, only return code</param>
            <returns>If the operation is asynchronous, the function provides the request Id.</returns>
            <exception cref="T:Sony.NP.NpToolkitException">Will throw an exception either when the request data is invalid, or an internal error has occured inside the NpToolkit plug-in.</exception>
        </member>
        <member name="M:Sony.NP.Trophies.GetTrophyPackSummary(Sony.NP.Trophies.GetTrophyPackSummaryRequest,Sony.NP.Trophies.TrophyPackSummaryResponse)">
            <summary>
            This function is used to obtain information about the trophy package and the user interaction with it.
            </summary>
            <param name="request">Parameters needed to obtain the trophy package summary information </param>
            <param name="response">This response contains the return code and the icon (if requested), the configuration  data, and the user specific data, of the trophy package</param>
            <returns>If the operation is asynchronous, the function provides the request Id.</returns>
            <exception cref="T:Sony.NP.NpToolkitException">Will throw an exception either when the request data is invalid, or an internal error has occured inside the NpToolkit plug-in.</exception>
        </member>
        <member name="M:Sony.NP.Trophies.GetTrophyPackGroup(Sony.NP.Trophies.GetTrophyPackGroupRequest,Sony.NP.Trophies.TrophyPackGroupResponse)">
            <summary>
            This function is used to obtain information about a group and the user interaction with it.
            </summary>
            <param name="request">Parameters needed to obtain the group information.</param>
            <param name="response">This response contains the return code and the icon (if requested), the configuration data, and the user specific data, of the group</param>
            <returns>If the operation is asynchronous, the function provides the request Id.</returns>
            <exception cref="T:Sony.NP.NpToolkitException">Will throw an exception either when the request data is invalid, or an internal error has occured inside the NpToolkit plug-in.</exception>
        </member>
        <member name="M:Sony.NP.Trophies.GetTrophyPackTrophy(Sony.NP.Trophies.GetTrophyPackTrophyRequest,Sony.NP.Trophies.TrophyPackTrophyResponse)">
            <summary>
            This function is used to obtain information about a trophy and the user interaction with it.
            </summary>
            <param name="request">Parameters needed to obtain the trophy information </param>
            <param name="response">This response contains the return code and the icon (if requested), the configuration data, and the user specific data, of the trophy</param>
            <returns>If the operation is asynchronous, the function provides the request Id.</returns>
            <exception cref="T:Sony.NP.NpToolkitException">Will throw an exception either when the request data is invalid, or an internal error has occured inside the NpToolkit plug-in.</exception>
        </member>
        <member name="T:Sony.NP.Trophies.RegisterTrophyPackRequest">
            <summary>
            Parameters passed to register the trophy package for the calling user.
            </summary>
        </member>
        <member name="M:Sony.NP.Trophies.RegisterTrophyPackRequest.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Sony.NP.Trophies.RegisterTrophyPackRequest"/> class.
            </summary>
        </member>
        <member name="T:Sony.NP.Trophies.UnlockTrophyRequest">
            <summary>
            Parameters passed to unlock a trophy for the calling user.
            </summary>
        </member>
        <member name="M:Sony.NP.Trophies.UnlockTrophyRequest.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Sony.NP.Trophies.UnlockTrophyRequest"/> class.
            </summary>
        </member>
        <member name="P:Sony.NP.Trophies.UnlockTrophyRequest.TrophyId">
            <summary>
            The trophy Id the user is going to unlock. The platinum trophy (0) cannot be unlocked manually if the title supports a platinum trophy. For small scope
            titles id 0 can be unlocked manually.
            </summary>
        </member>
        <member name="T:Sony.NP.Trophies.SetScreenshotRequest">
            <summary>
            Parameters passed to capture a screenshot to be linked with trophies.
            </summary>
        </member>
        <member name="F:Sony.NP.Trophies.SetScreenshotRequest.INVALID_TROPHY_ID">
            <summary>
            A representation of an incorrect trophy Id
            </summary>
        </member>
        <member name="F:Sony.NP.Trophies.SetScreenshotRequest.MAX_NUMBER_TROPHIES">
            <summary>
            The maximum number of trophies the array <see cref="P:Sony.NP.Trophies.SetScreenshotRequest.TrophiesIds"/> can have    
            </summary>
        </member>
        <member name="M:Sony.NP.Trophies.SetScreenshotRequest.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Sony.NP.Trophies.SetScreenshotRequest"/> class.
            </summary>
        </member>
        <member name="P:Sony.NP.Trophies.SetScreenshotRequest.TrophiesIds">
            <summary>
            An array with the trophy Ids to be assigned to the screenshot once it is taken. A maximum of <see cref="F:Sony.NP.Trophies.SetScreenshotRequest.MAX_NUMBER_TROPHIES"/>
            </summary>
            <exception cref="T:Sony.NP.NpToolkitException">Will throw an exception if the array is more than <see cref="F:Sony.NP.Trophies.SetScreenshotRequest.MAX_NUMBER_TROPHIES"/></exception>
        </member>
        <member name="P:Sony.NP.Trophies.SetScreenshotRequest.AssignToAllUsers">
            <summary>
            True by default. Specify if the screenshot taken should be associated with all logged in users for the trophies specified in the <see cref="P:Sony.NP.Trophies.SetScreenshotRequest.TrophiesIds"/> array 
            </summary>
        </member>
        <member name="T:Sony.NP.Trophies.GetUnlockedTrophiesRequest">
            <summary>
            Parameters passed to get the unlocked trophies of the calling user.
            </summary>
        </member>
        <member name="M:Sony.NP.Trophies.GetUnlockedTrophiesRequest.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Sony.NP.Trophies.GetUnlockedTrophiesRequest"/> class.
            </summary>
        </member>
        <member name="T:Sony.NP.Trophies.DisplayTrophyListDialogRequest">
            <summary>
            Parameters passed to open the trophy list for the title and service label.
            </summary>
        </member>
        <member name="M:Sony.NP.Trophies.DisplayTrophyListDialogRequest.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Sony.NP.Trophies.DisplayTrophyListDialogRequest"/> class.
            </summary>
        </member>
        <member name="T:Sony.NP.Trophies.GetTrophyPackSummaryRequest">
            <summary>
            Parameters passed to get summary information of the entire trophy package.
            </summary>
        </member>
        <member name="M:Sony.NP.Trophies.GetTrophyPackSummaryRequest.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Sony.NP.Trophies.GetTrophyPackSummaryRequest"/> class.
            </summary>
        </member>
        <member name="P:Sony.NP.Trophies.GetTrophyPackSummaryRequest.RetrieveTrophyPackSummaryIcon">
            <summary>
            False by default. Set it to true to return the icon for the trophy package
            </summary>
        </member>
        <member name="T:Sony.NP.Trophies.GetTrophyPackGroupRequest">
            <summary>
            Parameters passed to get information regarding a specific group of the trophy package.
            </summary>
        </member>
        <member name="F:Sony.NP.Trophies.GetTrophyPackGroupRequest.groupId">
            The group to return the information from. 
        </member>
        <member name="F:Sony.NP.Trophies.GetTrophyPackGroupRequest.retrieveTrophyPackGroupIcon">
            False by default. Set it to true to return the icon for the group
        </member>
        <member name="M:Sony.NP.Trophies.GetTrophyPackGroupRequest.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Sony.NP.Trophies.GetTrophyPackGroupRequest"/> class.
            </summary>
        </member>
        <member name="P:Sony.NP.Trophies.GetTrophyPackGroupRequest.GroupId">
            <summary>
            The group to return the information from
            </summary>
        </member>
        <member name="P:Sony.NP.Trophies.GetTrophyPackGroupRequest.RetrieveTrophyPackGroupIcon">
            <summary>
            False by default. Set it to true to return the icon for the group
            </summary>
        </member>
        <member name="T:Sony.NP.Trophies.GetTrophyPackTrophyRequest">
            <summary>
            Parameters passed to get information regarding a specific trophy of the trophy package.
            </summary>
        </member>
        <member name="F:Sony.NP.Trophies.GetTrophyPackTrophyRequest.trophyId">
            The trophy to return the information from 
        </member>
        <member name="F:Sony.NP.Trophies.GetTrophyPackTrophyRequest.retrieveTrophyPackTrophyIcon">
            False by default. Set it to true to return the icon for the trophy 
        </member>
        <member name="M:Sony.NP.Trophies.GetTrophyPackTrophyRequest.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Sony.NP.Trophies.GetTrophyPackTrophyRequest"/> class.
            </summary>
        </member>
        <member name="P:Sony.NP.Trophies.GetTrophyPackTrophyRequest.TrophyId">
            <summary>
            The trophy to return the information from
            </summary>
        </member>
        <member name="P:Sony.NP.Trophies.GetTrophyPackTrophyRequest.RetrieveTrophyPackTrophyIcon">
            <summary>
            False by default. Set it to true to return the icon for the trophy 
            </summary>
        </member>
        <member name="T:Sony.NP.Trophies.UnlockedTrophiesResponse">
            <summary>
            Class containing the Ids for the unlocked trophies the user making the request has.
            </summary>
        </member>
        <member name="M:Sony.NP.Trophies.UnlockedTrophiesResponse.ReadResult(System.UInt32,Sony.NP.FunctionTypes,Sony.NP.RequestBase)">
            <summary>
            Read the response data from the plug-in
            </summary>
            <param name="id">The request id.</param>
            <param name="apiCalled">The API called.</param>
            <param name="request">The Request object.</param>
        </member>
        <member name="P:Sony.NP.Trophies.UnlockedTrophiesResponse.TrophyIds">
            <summary>
            Array of trophy Ids already unlocked by the user making the request
            </summary>
        </member>
        <member name="T:Sony.NP.Trophies.NpTrophyGameDetails">
            <summary>
            Trophy configuration data of a trophy set
            </summary>
        </member>
        <member name="P:Sony.NP.Trophies.NpTrophyGameDetails.NumGroups">
            <summary>
            Defined total number of trophy groups
            </summary>
        </member>
        <member name="P:Sony.NP.Trophies.NpTrophyGameDetails.NumTrophies">
            <summary>
            Defined total number of trophies
            </summary>
        </member>
        <member name="P:Sony.NP.Trophies.NpTrophyGameDetails.NumPlatinum">
            <summary>
            Defined total number of platinum trophies
            </summary>
        </member>
        <member name="P:Sony.NP.Trophies.NpTrophyGameDetails.NumGold">
            <summary>
            Defined total number of gold trophies
            </summary>
        </member>
        <member name="P:Sony.NP.Trophies.NpTrophyGameDetails.NumSilver">
            <summary>
            Defined total number of silver trophies
            </summary>
        </member>
        <member name="P:Sony.NP.Trophies.NpTrophyGameDetails.NumBronze">
            <summary>
            Defined total number of bronze trophies
            </summary>
        </member>
        <member name="P:Sony.NP.Trophies.NpTrophyGameDetails.Title">
            <summary>
            Name of the trophy set
            </summary>
        </member>
        <member name="P:Sony.NP.Trophies.NpTrophyGameDetails.Description">
            <summary>
            Description of the trophy set
            </summary>
        </member>
        <member name="T:Sony.NP.Trophies.NpTrophyGameData">
            <summary>
            The user progress regarding the trophy package
            </summary>
        </member>
        <member name="P:Sony.NP.Trophies.NpTrophyGameData.UnlockedTrophies">
            <summary>
            Number of unlocked trophies
            </summary>
        </member>
        <member name="P:Sony.NP.Trophies.NpTrophyGameData.UnlockedPlatinum">
            <summary>
            Number of unlocked platinum trophies
            </summary>
        </member>
        <member name="P:Sony.NP.Trophies.NpTrophyGameData.UnlockedGold">
            <summary>
            Number of unlocked gold trophies
            </summary>
        </member>
        <member name="P:Sony.NP.Trophies.NpTrophyGameData.UnlockedSilver">
            <summary>
            Number of unlocked silver trophies
            </summary>
        </member>
        <member name="P:Sony.NP.Trophies.NpTrophyGameData.UnlockedBronze">
            <summary>
            Number of unlocked bronze trophies
            </summary>
        </member>
        <member name="P:Sony.NP.Trophies.NpTrophyGameData.ProgressPercentage">
            <summary>
            Progress of the processing (%)
            </summary>
        </member>
        <member name="T:Sony.NP.Trophies.TrophyPackSummaryResponse">
            <summary>
             Class containing extensive information of the trophy package (static configuration, user progress and, if requested, icon).
            </summary>
        </member>
        <member name="M:Sony.NP.Trophies.TrophyPackSummaryResponse.ReadResult(System.UInt32,Sony.NP.FunctionTypes,Sony.NP.RequestBase)">
            <summary>
            Read the response data from the plug-in
            </summary>
            <param name="id">The request id.</param>
            <param name="apiCalled">The API called.</param>
            <param name="request">The Request object.</param>
        </member>
        <member name="P:Sony.NP.Trophies.TrophyPackSummaryResponse.Icon">
            <summary>
            The icon retrieved in case it was explicitely specified in the request
            </summary>
        </member>
        <member name="P:Sony.NP.Trophies.TrophyPackSummaryResponse.StaticConfiguration">
            <summary>
            Generic configuration written when the package was created
            </summary>
        </member>
        <member name="P:Sony.NP.Trophies.TrophyPackSummaryResponse.UserProgress">
            <summary>
            The user progress regarding the trophy package
            </summary>
        </member>
        <member name="T:Sony.NP.Trophies.NpTrophyGroupDetails">
            <summary>
            Generic configuration written when the group was created
            </summary>
        </member>
        <member name="P:Sony.NP.Trophies.NpTrophyGroupDetails.GroupId">
            <summary>
            Trophy group ID
            </summary>
        </member>
        <member name="P:Sony.NP.Trophies.NpTrophyGroupDetails.NumTrophies">
            <summary>
            Defined total number of trophies
            </summary>
        </member>
        <member name="P:Sony.NP.Trophies.NpTrophyGroupDetails.NumPlatinum">
            <summary>
            Defined total number of platinum trophies
            </summary>
        </member>
        <member name="P:Sony.NP.Trophies.NpTrophyGroupDetails.NumGold">
            <summary>
            Defined total number of gold trophies
            </summary>
        </member>
        <member name="P:Sony.NP.Trophies.NpTrophyGroupDetails.NumSilver">
            <summary>
            Defined total number of silver trophies
            </summary>
        </member>
        <member name="P:Sony.NP.Trophies.NpTrophyGroupDetails.NumBronze">
            <summary>
            Defined total number of bronze trophies
            </summary>
        </member>
        <member name="P:Sony.NP.Trophies.NpTrophyGroupDetails.Title">
            <summary>
            Name of the trophy group
            </summary>
        </member>
        <member name="P:Sony.NP.Trophies.NpTrophyGroupDetails.Description">
            <summary>
            Description of the trophy group
            </summary>
        </member>
        <member name="T:Sony.NP.Trophies.NpTrophyGroupData">
            <summary>
            The user progress regarding the group
            </summary>
        </member>
        <member name="P:Sony.NP.Trophies.NpTrophyGroupData.GroupId">
            <summary>
            Trophy group ID
            </summary>
        </member>
        <member name="P:Sony.NP.Trophies.NpTrophyGroupData.UnlockedTrophies">
            <summary>
            Number of unlocked trophies
            </summary>
        </member>
        <member name="P:Sony.NP.Trophies.NpTrophyGroupData.UnlockedPlatinum">
            <summary>
            Number of unlocked platinum trophies
            </summary>
        </member>
        <member name="P:Sony.NP.Trophies.NpTrophyGroupData.UnlockedGold">
            <summary>
            Number of unlocked gold trophies
            </summary>
        </member>
        <member name="P:Sony.NP.Trophies.NpTrophyGroupData.UnlockedSilver">
            <summary>
            Number of unlocked silver trophies
            </summary>
        </member>
        <member name="P:Sony.NP.Trophies.NpTrophyGroupData.UnlockedBronze">
            <summary>
            Number of unlocked bronze trophies
            </summary>
        </member>
        <member name="P:Sony.NP.Trophies.NpTrophyGroupData.ProgressPercentage">
            <summary>
            Progress of the processing (%)
            </summary>
        </member>
        <member name="T:Sony.NP.Trophies.TrophyPackGroupResponse">
            <summary>
            Class containing extensive information of a group (static configuration, user progress and, if requested, icon).
            </summary>
        </member>
        <member name="M:Sony.NP.Trophies.TrophyPackGroupResponse.ReadResult(System.UInt32,Sony.NP.FunctionTypes,Sony.NP.RequestBase)">
            <summary>
            Read the response data from the plug-in
            </summary>
            <param name="id">The request id.</param>
            <param name="apiCalled">The API called.</param>
            <param name="request">The Request object.</param>
        </member>
        <member name="P:Sony.NP.Trophies.TrophyPackGroupResponse.Icon">
            <summary>
            The icon retrieved in case it was explicitely specified in the request
            </summary>
        </member>
        <member name="P:Sony.NP.Trophies.TrophyPackGroupResponse.StaticConfiguration">
            <summary>
            Generic configuration written when the group was created
            </summary>
        </member>
        <member name="P:Sony.NP.Trophies.TrophyPackGroupResponse.UserProgress">
            <summary>
            The user progress regarding the group
            </summary>
        </member>
        <member name="T:Sony.NP.Trophies.TrophyGrade">
            <summary>
            Trophy grade
            </summary>
        </member>
        <member name="F:Sony.NP.Trophies.TrophyGrade.Unknown">
            <summary>Grade is unknown</summary>
        </member>
        <member name="F:Sony.NP.Trophies.TrophyGrade.Platinum">
            <summary>Platinum trophy: Trophy that is automatically unlocked by the system when all the required trophies are awarded</summary>
        </member>
        <member name="F:Sony.NP.Trophies.TrophyGrade.Gold">
            <summary>Gold trophy: Most difficult trophy to be awarded</summary>
        </member>
        <member name="F:Sony.NP.Trophies.TrophyGrade.Silver">
            <summary>Silver trophy: Relatively difficult trophy to be awarded</summary>
        </member>
        <member name="F:Sony.NP.Trophies.TrophyGrade.Bronze">
            <summary>Bronze trophy: Most typical trophy that is easily awarded</summary>
        </member>
        <member name="T:Sony.NP.Trophies.NpTrophyDetails">
            <summary>
            Trophy configuration data of a trophy
            </summary>
        </member>
        <member name="P:Sony.NP.Trophies.NpTrophyDetails.TrophyId">
            <summary>
            Trophy ID
            </summary>
        </member>
        <member name="P:Sony.NP.Trophies.NpTrophyDetails.TrophyGrade">
            <summary>
            Grade of the trophy
            </summary>
        </member>
        <member name="P:Sony.NP.Trophies.NpTrophyDetails.GroupId">
            <summary>
            Trophy group ID to which this trophy belongs
            </summary>
        </member>
        <member name="P:Sony.NP.Trophies.NpTrophyDetails.Hidden">
            <summary>
            Hidden flag
            </summary>
        </member>
        <member name="P:Sony.NP.Trophies.NpTrophyDetails.Name">
            <summary>
            Name of the trophy
            </summary>
        </member>
        <member name="P:Sony.NP.Trophies.NpTrophyDetails.Description">
            <summary>
            Description of the trophy
            </summary>
        </member>
        <member name="T:Sony.NP.Trophies.NpTrophyData">
            <summary>
            Trophy record of a trophy
            </summary>
        </member>
        <member name="P:Sony.NP.Trophies.NpTrophyData.TrophyId">
            <summary>
            Trophy ID
            </summary>
        </member>
        <member name="P:Sony.NP.Trophies.NpTrophyData.Unlocked">
            <summary>
            Whether or not the trophy is unlocked
            </summary>
        </member>
        <member name="P:Sony.NP.Trophies.NpTrophyData.Timestamp">
            <summary>
            The time stamp of when the trophy was first unlocked, or 0 if the trophy has not been unlocked
            </summary>
        </member>
        <member name="T:Sony.NP.Trophies.TrophyPackTrophyResponse">
            <summary>
            Class containing extensive information of a trophy (static configuration, user progress and, if requested, icon).
            </summary>
        </member>
        <member name="M:Sony.NP.Trophies.TrophyPackTrophyResponse.ReadResult(System.UInt32,Sony.NP.FunctionTypes,Sony.NP.RequestBase)">
            <summary>
            Read the response data from the plug-in
            </summary>
            <param name="id">The request id.</param>
            <param name="apiCalled">The API called.</param>
            <param name="request">The Request object.</param>
        </member>
        <member name="P:Sony.NP.Trophies.TrophyPackTrophyResponse.Icon">
            <summary>
            The icon retrieved in case it was explicitely specified in the request
            </summary>
        </member>
        <member name="P:Sony.NP.Trophies.TrophyPackTrophyResponse.StaticConfiguration">
            <summary>
            Generic configuration written when the trophy was created
            </summary>
        </member>
        <member name="P:Sony.NP.Trophies.TrophyPackTrophyResponse.UserProgress">
            <summary>
            The user progress regarding the trophy
            </summary>
        </member>
        <member name="T:Sony.NP.Tss">
            <summary>
            TSS service related functionality.
            </summary>
        </member>
        <member name="M:Sony.NP.Tss.GetData(Sony.NP.Tss.GetDataRequest,Sony.NP.Tss.TssDataResponse)">
            <summary>
            Get Title Small Storage (TSS) data from a specified slot
            </summary>
            <param name="request">Parameters needed to retrieve TSS data</param>
            <param name="response">This response contains the return code and the TSS Data</param>
            <returns>If the operation is asynchronous, the function provides the request Id.</returns>
            <exception cref="T:Sony.NP.NpToolkitException">Will throw an exception either when the request data is invalid, or an internal error has occured inside the NpToolkit plug-in.</exception>
        </member>
        <member name="T:Sony.NP.Tss.GetDataRequest">
            <summary>
            The parameters required to retrieve data from the Title Small Storage (TSS) server
            </summary>
        </member>
        <member name="F:Sony.NP.Tss.GetDataRequest.length">
            Optional parameter - The byte offset where to start retieving the data
        </member>
        <member name="F:Sony.NP.Tss.GetDataRequest.lastModifiedTicks">
            Optional parameter - The length of the block of memory to retrieve. 
        </member>
        <member name="F:Sony.NP.Tss.GetDataRequest.tssSlotId">
            Optional parameter - Test when data was last modified and not to return it unless it has changed. This is stored in SceRtcTick format
        </member>
        <member name="M:Sony.NP.Tss.GetDataRequest.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Sony.NP.Tss.GetDataRequest"/> class.
            </summary>
        </member>
        <member name="P:Sony.NP.Tss.GetDataRequest.Offset">
            <summary>
            Specify the position from which to obtain TSS data. Defaults to 0. This is ignored if <see cref="P:Sony.NP.Tss.GetDataRequest.Length"/> is 0.
            </summary>
        </member>
        <member name="P:Sony.NP.Tss.GetDataRequest.Length">
            <summary>
            The length of the TSS data chunk to receive. Defaults to 0. If length is set then <see cref="P:Sony.NP.Tss.GetDataRequest.Offset"/> is also used to specify the start of the block.
            To retrieve the entire block of TSS data from the slot, set <see cref="P:Sony.NP.Tss.GetDataRequest.Length"/> to 0. 
            </summary>
        </member>
        <member name="P:Sony.NP.Tss.GetDataRequest.LastModifiedTicks">
            <summary>
            Optional parameter to evaluate when the TSS data was last written to the server the TSS data. If the time at which the TSS file was last updated on the server is equal to or older than the time specified the data won't be retrieved.
            Use this when caching the TSS data and only retrieve the data if it has changed on the server.
            Because evaluation is carried out according to the time on the server, do not use time obtained locally, use the time of the TSS server obtainable in the Response object <see cref="T:Sony.NP.Tss.TssDataResponse"/>. 
            This can be obtained when retrieving TSS data or when <see cref="P:Sony.NP.Tss.GetDataRequest.RetrieveStatusOnly"/> is set to true. 
            </summary>
        </member>
        <member name="P:Sony.NP.Tss.GetDataRequest.TssSlotId">
            <summary>
            The Slot ID on the TSS server to retrieve data from
            </summary>
        </member>
        <member name="P:Sony.NP.Tss.GetDataRequest.RetrieveStatusOnly">
            <summary>
            If true, only the TSS data status is retrieved. The data buffer will be empty, but other infomation about the data such as length and last modified time will be returned.
            </summary>
        </member>
        <member name="T:Sony.NP.Tss.TssStatusCodes">
            <summary>
            The status of the TSS data buffer
            </summary>
        </member>
        <member name="F:Sony.NP.Tss.TssStatusCodes.Ok">
            <summary>
            The entire buffer has been returned.
            </summary>
        </member>
        <member name="F:Sony.NP.Tss.TssStatusCodes.Partial">
            <summary>
            Not supported
            </summary>
        </member>
        <member name="F:Sony.NP.Tss.TssStatusCodes.NotModified">
            <summary>
            The buffer was not modified since the conditional time passed into the <see cref="M:Sony.NP.Tss.GetData(Sony.NP.Tss.GetDataRequest,Sony.NP.Tss.TssDataResponse)"/> method.
            </summary>
        </member>
        <member name="T:Sony.NP.Tss.TssDataResponse">
            <summary>
            The binary data that was retrieved from the TSS server along with it's status
            </summary>
        </member>
        <member name="M:Sony.NP.Tss.TssDataResponse.ReadResult(System.UInt32,Sony.NP.FunctionTypes,Sony.NP.RequestBase)">
            <summary>
            Read the response data from the plug-in
            </summary>
            <param name="id">The request id.</param>
            <param name="apiCalled">The API called.</param>
            <param name="request">The Request object.</param>
        </member>
        <member name="P:Sony.NP.Tss.TssDataResponse.Data">
            <summary>
            The binary data
            </summary>
        </member>
        <member name="P:Sony.NP.Tss.TssDataResponse.LastModified">
            <summary>
            Last update time
            </summary>
        </member>
        <member name="P:Sony.NP.Tss.TssDataResponse.StatusCode">
            <summary>
            The status of the data buffer
            </summary>
        </member>
        <member name="P:Sony.NP.Tss.TssDataResponse.ContentLength">
            <summary>
            The content length of the buffer.
            </summary>
        </member>
        <member name="T:Sony.NP.Tus">
            <summary>
            TUS service related functionality.
            </summary>
        </member>
        <member name="M:Sony.NP.Tus.SetVariables(Sony.NP.Tus.SetVariablesRequest,Sony.NP.Core.EmptyResponse)">
            <summary>
            Sets Title User Storage (TUS) variables for a given user
            </summary>
            <param name="request">The request parameters required to set a users TUS variables</param>
            <param name="response">This response does not have data, only return code</param>
            <returns>If the operation is asynchronous, the function provides the request Id.</returns>
            <exception cref="T:Sony.NP.NpToolkitException">Will throw an exception either when the request data is invalid, or an internal error has occured inside the NpToolkit plug-in.</exception>
        </member>
        <member name="M:Sony.NP.Tus.GetVariables(Sony.NP.Tus.GetVariablesRequest,Sony.NP.Tus.VariablesResponse)">
            <summary>
            Get a specified users TUS variables from specified slots
            </summary>
            <param name="request">The parameters required to retrieve TUS variables </param>
            <param name="response">The requested TUS variables that will be set upon successful completion</param>
            <returns>If the operation is asynchronous, the function provides the request Id.</returns>
            <exception cref="T:Sony.NP.NpToolkitException">Will throw an exception either when the request data is invalid, or an internal error has occured inside the NpToolkit plug-in.</exception>
        </member>
        <member name="M:Sony.NP.Tus.AddToAndGetVariable(Sony.NP.Tus.AddToAndGetVariableRequest,Sony.NP.Tus.AtomicAddToAndGetVariableResponse)">
            <summary>
            /// Adds and gets a users TUS variable in a single operation - Obsolete
            </summary>
        </member>
        <member name="M:Sony.NP.Tus.AddToAndGetVariable(Sony.NP.Tus.AddToAndGetVariableRequest,Sony.NP.Tus.VariablesResponse)">
            <summary>
            Adds and gets a users TUS variable in a single operation
            </summary>
            <param name="request">The parameters specifying the users slot and value to add to </param>
            <param name="response"> Upon successful completion, this will contain the new value of the TUS variable</param>
            <returns>If the operation is asynchronous, the function provides the request Id.</returns>
            <exception cref="T:Sony.NP.NpToolkitException">Will throw an exception either when the request data is invalid, or an internal error has occured inside the NpToolkit plug-in.</exception>
        </member>
        <member name="M:Sony.NP.Tus.SetData(Sony.NP.Tus.SetDataRequest,Sony.NP.Core.EmptyResponse)">
            <summary>
            Sets a specified users TUS binary data
            </summary>
            <param name="request">The parameters required for setting a users TUS binary data</param>
            <param name="response">This response does not have data, only return code</param>
            <returns>If the operation is asynchronous, the function provides the request Id.</returns>
            <exception cref="T:Sony.NP.NpToolkitException">Will throw an exception either when the request data is invalid, or an internal error has occured inside the NpToolkit plug-in.</exception>
        </member>
        <member name="M:Sony.NP.Tus.GetData(Sony.NP.Tus.GetDataRequest,Sony.NP.Tus.GetDataResponse)">
            <summary>
            Gets a specified user's TUS binary data
            </summary>
            <param name="request">The parameters required to retrieve a users TUS binary data</param>
            <param name="response">On successful completion, this will contain the requested users binary data</param>
            <returns>If the operation is asynchronous, the function provides the request Id.</returns>
            <exception cref="T:Sony.NP.NpToolkitException">Will throw an exception either when the request data is invalid, or an internal error has occured inside the NpToolkit plug-in.</exception>
        </member>
        <member name="M:Sony.NP.Tus.DeleteData(Sony.NP.Tus.DeleteDataRequest,Sony.NP.Core.EmptyResponse)">
            <summary>
            Deletes data from specified slots
            </summary>
            <param name="request">The required parameters for deleting a users TUS data</param>
            <param name="response">This response does not have data, only return code</param>
            <returns>If the operation is asynchronous, the function provides the request Id.</returns>
            <exception cref="T:Sony.NP.NpToolkitException">Will throw an exception either when the request data is invalid, or an internal error has occured inside the NpToolkit plug-in.</exception>
        </member>
        <member name="M:Sony.NP.Tus.TryAndSetVariable(Sony.NP.Tus.TryAndSetVariableRequest,Sony.NP.Tus.VariablesResponse)">
            <summary>
            Deletes data from specified slots
            </summary>
            <param name="request">The required parameters for deleting a users TUS data</param>
            <param name="response">This response does not have data, only return code</param>
            <returns>If the operation is asynchronous, the function provides the request Id.</returns>
            <exception cref="T:Sony.NP.NpToolkitException">Will throw an exception either when the request data is invalid, or an internal error has occured inside the NpToolkit plug-in.</exception>
        </member>
        <member name="M:Sony.NP.Tus.GetFriendsVariable(Sony.NP.Tus.GetFriendsVariableRequest,Sony.NP.Tus.FriendsVariablesResponse)">
            <summary>
            Deletes data from specified slots
            </summary>
            <param name="request">The required parameters for deleting a users TUS data</param>
            <param name="response">This response does not have data, only return code</param>
            <returns>If the operation is asynchronous, the function provides the request Id.</returns>
            <exception cref="T:Sony.NP.NpToolkitException">Will throw an exception either when the request data is invalid, or an internal error has occured inside the NpToolkit plug-in.</exception>
        </member>
        <member name="M:Sony.NP.Tus.GetUsersVariable(Sony.NP.Tus.GetUsersVariableRequest,Sony.NP.Tus.VariablesResponse)">
            <summary>
            Deletes data from specified slots
            </summary>
            <param name="request">The required parameters for deleting a users TUS data</param>
            <param name="response">This response does not have data, only return code</param>
            <returns>If the operation is asynchronous, the function provides the request Id.</returns>
            <exception cref="T:Sony.NP.NpToolkitException">Will throw an exception either when the request data is invalid, or an internal error has occured inside the NpToolkit plug-in.</exception>
        </member>
        <member name="M:Sony.NP.Tus.GetUsersDataStatus(Sony.NP.Tus.GetUsersDataStatusRequest,Sony.NP.Tus.DataStatusesResponse)">
            <summary>
            Deletes data from specified slots
            </summary>
            <param name="request">The required parameters for deleting a users TUS data</param>
            <param name="response">This response does not have data, only return code</param>
            <returns>If the operation is asynchronous, the function provides the request Id.</returns>
            <exception cref="T:Sony.NP.NpToolkitException">Will throw an exception either when the request data is invalid, or an internal error has occured inside the NpToolkit plug-in.</exception>
        </member>
        <member name="M:Sony.NP.Tus.GetFriendsDataStatus(Sony.NP.Tus.GetFriendsDataStatusRequest,Sony.NP.Tus.FriendsDataStatusesResponse)">
            <summary>
            Deletes data from specified slots
            </summary>
            <param name="request">The required parameters for deleting a users TUS data</param>
            <param name="response">This response does not have data, only return code</param>
            <returns>If the operation is asynchronous, the function provides the request Id.</returns>
            <exception cref="T:Sony.NP.NpToolkitException">Will throw an exception either when the request data is invalid, or an internal error has occured inside the NpToolkit plug-in.</exception>
        </member>
        <member name="T:Sony.NP.Tus.VirtualUserID">
            <summary>
            16 character TUS virtual user Id
            </summary>
        </member>
        <member name="F:Sony.NP.Tus.VirtualUserID.NP_ONLINEID_MAX_LENGTH">
            <summary>
            Maximum length of the virtual id
            </summary>
        </member>
        <member name="M:Sony.NP.Tus.VirtualUserID.ToString">
            <summary>
            Returns the OnlineId as a string, with a maximum of 16 characters.
            </summary>
            <returns>The OnLineId name</returns>
        </member>
        <member name="P:Sony.NP.Tus.VirtualUserID.Name">
            <summary>
            Display representation of an online user
            </summary>
        </member>
        <member name="T:Sony.NP.Tus.VariableInput">
            <summary>
            Represents a TUS (title user storage) variable
            </summary>
        </member>
        <member name="P:Sony.NP.Tus.VariableInput.Value">
            <summary>
            The TUS variable value
            </summary>
        </member>
        <member name="P:Sony.NP.Tus.VariableInput.SlotId">
            <summary>
            The slot that the variable belongs to
            </summary>
        </member>
        <member name="T:Sony.NP.Tus.UserInput">
            <summary>
            Represents a TUS user on the server.
            </summary>
        </member>
        <member name="M:Sony.NP.Tus.UserInput.#ctor(Sony.NP.Tus.VirtualUserID)">
            <summary>
            Create a Virtual user
            </summary>
            <param name="id">The virtual id of the user.</param>
        </member>
        <member name="M:Sony.NP.Tus.UserInput.#ctor(Sony.NP.Core.NpAccountId)">
            <summary>
            Create a real user
            </summary>
            <param name="id">The real account id of the user.</param>
        </member>
        <member name="P:Sony.NP.Tus.UserInput.VirtualId">
            <summary>
            The Virtual user id. 
            </summary>
            <exception cref="T:Sony.NP.NpToolkitException">Will throw an exception if the <see cref="P:Sony.NP.Tus.UserInput.IsVirtual"/> is false.</exception>
        </member>
        <member name="P:Sony.NP.Tus.UserInput.RealId">
            <summary>
            The Real user id. 
            </summary>
            <exception cref="T:Sony.NP.NpToolkitException">Will throw an exception if the <see cref="P:Sony.NP.Tus.UserInput.IsVirtual"/> is true.</exception>
        </member>
        <member name="P:Sony.NP.Tus.UserInput.IsVirtual">
            <summary>
            Returns if the user is a virtual user or not. This is set when either <see cref="P:Sony.NP.Tus.UserInput.VirtualId"/> or <see cref="P:Sony.NP.Tus.UserInput.RealId"/> value is changed.
            </summary>
        </member>
        <member name="T:Sony.NP.Tus.NpVariableBase">
            <summary>
            Common data members for TUS variable
            </summary>
        </member>
        <member name="P:Sony.NP.Tus.NpVariableBase.HasData">
            <summary>
            Flag indicating whether a value has been set.
            </summary>
        </member>
        <member name="P:Sony.NP.Tus.NpVariableBase.LastChangedDate">
            <summary>
            Last update date
            </summary>
        </member>
        <member name="P:Sony.NP.Tus.NpVariableBase.Variable">
            <summary>
            Currently set value
            </summary>
        </member>
        <member name="P:Sony.NP.Tus.NpVariableBase.OldVariable">
            <summary>
            Previously set value
            </summary>
        </member>
        <member name="P:Sony.NP.Tus.NpVariableBase.OwnerAccountId">
            <summary>
            Account ID of the owner
            </summary>
        </member>
        <member name="P:Sony.NP.Tus.NpVariableBase.LastChangedAuthorAccountId">
            <summary>
            Account ID of the user who made the last update
            </summary>
        </member>
        <member name="T:Sony.NP.Tus.NpVariable">
            <summary>
            Represents a TUS variable
            </summary>
        </member>
        <member name="P:Sony.NP.Tus.NpVariable.OwnerId">
            <summary>
            Online ID of the owner
            </summary>
        </member>
        <member name="P:Sony.NP.Tus.NpVariable.LastChangedAuthorId">
            <summary>
            Online ID of the user who made the last update
            </summary>
        </member>
        <member name="T:Sony.NP.Tus.NpVariableForCrossSave">
            <summary>
            Represents a TUS variable (for cross-platform use)
            </summary>
        </member>
        <member name="P:Sony.NP.Tus.NpVariableForCrossSave.OwnerId">
            <summary>
            Owner
            </summary>
        </member>
        <member name="P:Sony.NP.Tus.NpVariableForCrossSave.LastChangedAuthorId">
            <summary>
            Last updated by
            </summary>
        </member>
        <member name="T:Sony.NP.Tus.NpTusDataStatusBase">
            <summary>
            Common data members for TUS status
            </summary>
        </member>
        <member name="P:Sony.NP.Tus.NpTusDataStatusBase.HasData">
            <summary>
            Flag indicating whether a value has been set.
            </summary>
        </member>
        <member name="P:Sony.NP.Tus.NpTusDataStatusBase.LastChangedDate">
            <summary>
            Last update date
            </summary>
        </member>
        <member name="P:Sony.NP.Tus.NpTusDataStatusBase.Data">
            <summary>
            The TUS data
            </summary>
        </member>
        <member name="P:Sony.NP.Tus.NpTusDataStatusBase.SupplementaryInfo">
            <summary>
             The TUS sumplementary info
            </summary>
        </member>
        <member name="P:Sony.NP.Tus.NpTusDataStatusBase.OwnerAccountId">
            <summary>
            Account ID of the owner
            </summary>
        </member>
        <member name="P:Sony.NP.Tus.NpTusDataStatusBase.LastChangedAuthorAccountId">
            <summary>
            Account ID of the user who made the last update
            </summary>
        </member>
        <member name="T:Sony.NP.Tus.NpTusDataStatus">
            <summary>
            Represents the status of TUS data
            </summary>
        </member>
        <member name="P:Sony.NP.Tus.NpTusDataStatus.OwnerId">
            <summary>
            Online ID of the owner
            </summary>
        </member>
        <member name="P:Sony.NP.Tus.NpTusDataStatus.LastChangedAuthorId">
            <summary>
            Online ID of the user who made the last update
            </summary>
        </member>
        <member name="T:Sony.NP.Tus.NpTusDataStatusForCrossSave">
            <summary>
            Represents  the status of TUS data (for cross-platform use)
            </summary>
        </member>
        <member name="P:Sony.NP.Tus.NpTusDataStatusForCrossSave.OwnerId">
            <summary>
            Owner
            </summary>
        </member>
        <member name="P:Sony.NP.Tus.NpTusDataStatusForCrossSave.LastChangedAuthorId">
            <summary>
            Last updated by
            </summary>
        </member>
        <member name="T:Sony.NP.Tus.TusDataStatusBase">
            <summary>
            Common data members for TUS status
            </summary>
        </member>
        <member name="P:Sony.NP.Tus.TusDataStatusBase.HasData">
            <summary>
            Indicates whether a slot has TUS data associated with it. The data is not provided in this class. If required, requested it using <see cref="M:Sony.NP.Tus.GetData(Sony.NP.Tus.GetDataRequest,Sony.NP.Tus.GetDataResponse)"/>
            </summary>
        </member>
        <member name="P:Sony.NP.Tus.TusDataStatusBase.LastChangedDate">
            <summary>
            The date of the last change made to the TUS data.
            </summary>
        </member>
        <member name="P:Sony.NP.Tus.TusDataStatusBase.SupplementaryInfo">
            <summary>
            The supplementary information for the TUS Data.
            </summary>
        </member>
        <member name="T:Sony.NP.Tus.TusDataStatus">
            <summary>
            Represents the data status of of a TUS data record on the server.
            </summary>
        </member>
        <member name="P:Sony.NP.Tus.TusDataStatus.Owner">
            <summary>
            The owner of the TUS data.
            </summary>
        </member>
        <member name="P:Sony.NP.Tus.TusDataStatus.LastChangedBy">
            <summary>
            The user who last modified the TUS data.
            </summary>
        </member>
        <member name="T:Sony.NP.Tus.TusDataStatusForCrossSave">
            <summary>
            Represents the data status of a TUS data record that is compatibile with multiple PlayStation platforms.
            </summary>
        </member>
        <member name="P:Sony.NP.Tus.TusDataStatusForCrossSave.OwnerAccountId">
            <summary>
            The Account ID of the user who owns the TUS data.
            </summary>
        </member>
        <member name="P:Sony.NP.Tus.TusDataStatusForCrossSave.LastChangedByAccountId">
            <summary>
            The Account ID of the user who last modified the TUS data.
            </summary>
        </member>
        <member name="P:Sony.NP.Tus.TusDataStatusForCrossSave.OwnerNpId">
            <summary>
            The Np ID of the user who owns the TUS data. 
            </summary>
        </member>
        <member name="P:Sony.NP.Tus.TusDataStatusForCrossSave.LastChangedByNpId">
            <summary>
            The Np ID of the user who last modified the TUS data.
            </summary>
        </member>
        <member name="T:Sony.NP.Tus.SetVariablesRequest">
            <summary>
            Parameters required for setting a specified users TUS variables
            </summary>
        </member>
        <member name="F:Sony.NP.Tus.SetVariablesRequest.MAX_VARIABLE_SLOTS">
            <summary>
            Maximum size of the <see cref="P:Sony.NP.Tus.SetVariablesRequest.Vars"/> array.
            </summary>
        </member>
        <member name="M:Sony.NP.Tus.SetVariablesRequest.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Sony.NP.Tus.SetVariablesRequest"/> class.
            </summary>
        </member>
        <member name="P:Sony.NP.Tus.SetVariablesRequest.Vars">
            <summary>
            The TUS variables to update
            </summary>
            <exception cref="T:Sony.NP.NpToolkitException">Will throw an exception if the array is larger than <see cref="F:Sony.NP.Tus.SetVariablesRequest.MAX_VARIABLE_SLOTS"/>.</exception>
        </member>
        <member name="P:Sony.NP.Tus.SetVariablesRequest.TusUser">
            <summary>
            The account of the user to set the variables for
            </summary>
        </member>
        <member name="P:Sony.NP.Tus.SetVariablesRequest.TargetUser">
            <summary>
            The account of the user to set the variables for
            </summary>
        </member>
        <member name="P:Sony.NP.Tus.SetVariablesRequest.VirtualUserID">
            <summary>
            Identifier of a virtual user
            </summary>
        </member>
        <member name="P:Sony.NP.Tus.SetVariablesRequest.IsVirtualUser">
            <summary>
            A flag that specifies whether this update is for a virtual user. This is atomatically set depending on if <see cref="P:Sony.NP.Tus.SetVariablesRequest.TargetUser"/> or <see cref="P:Sony.NP.Tus.SetVariablesRequest.VirtualUserID"/> is set.
            </summary>
        </member>
        <member name="T:Sony.NP.Tus.GetVariablesRequest">
            <summary>
            Parameters required for getting a specified users TUS variables
            </summary>
        </member>
        <member name="F:Sony.NP.Tus.GetVariablesRequest.MAX_VARIABLE_SLOTS">
            <summary>
            Maximum size of the <see cref="P:Sony.NP.Tus.GetVariablesRequest.SlotIds"/> array.
            </summary>
        </member>
        <member name="M:Sony.NP.Tus.GetVariablesRequest.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Sony.NP.Tus.SetVariablesRequest"/> class.
            </summary>
        </member>
        <member name="P:Sony.NP.Tus.GetVariablesRequest.SlotIds">
            <summary>
            The IDs of the slots to retrieve variables from
            </summary>
            <exception cref="T:Sony.NP.NpToolkitException">Will throw an exception if the array is larger than <see cref="F:Sony.NP.Tus.GetVariablesRequest.MAX_VARIABLE_SLOTS"/>.</exception>
        </member>
        <member name="P:Sony.NP.Tus.GetVariablesRequest.TusUser">
            <summary>
            The account of the user to set the variables for
            </summary>
        </member>
        <member name="P:Sony.NP.Tus.GetVariablesRequest.TargetUser">
            <summary>
            The account of the user to set the variables for
            </summary>
        </member>
        <member name="P:Sony.NP.Tus.GetVariablesRequest.VirtualUserID">
            <summary>
            Identifier of a virtual user
            </summary>
        </member>
        <member name="P:Sony.NP.Tus.GetVariablesRequest.IsVirtualUser">
            <summary>
            A flag that specifies whether this update is for a virtual user. This is atomatically set depending on if <see cref="P:Sony.NP.Tus.GetVariablesRequest.TargetUser"/> or <see cref="P:Sony.NP.Tus.GetVariablesRequest.VirtualUserID"/> is set.
            </summary>
        </member>
        <member name="T:Sony.NP.Tus.DataContention">
            <summary>
            Used to prevent data conflicts on the TUS server
            </summary>
        </member>
        <member name="P:Sony.NP.Tus.DataContention.LastChangedDate">
            <summary>
             The date and time for conflict prevention. Processing is only executed when the time of the TUS data's last update, which is registered on the server, is identical with or older
             than the specified time. When no TUS data is registered on the server, no processing is performed. Specify 0 if no comparison is necessary.
            </summary>
        </member>
        <member name="P:Sony.NP.Tus.DataContention.RequiredLastChangeUser">
            <summary>
            The account id of the updates author for conflict prevention. Processing is only executed when the author of the TUS data's last update, which is registered on the server, 
            is identical with the specified account id. When no TUS data is registered on the server, processing is not performed. Set this value to 0 if no comparison is necessary.
            </summary>
        </member>
        <member name="T:Sony.NP.Tus.AddToAndGetVariableRequest">
            <summary>
            Parameters required for adding to a specified users TUS variable
            </summary>
        </member>
        <member name="M:Sony.NP.Tus.AddToAndGetVariableRequest.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Sony.NP.Tus.AddToAndGetVariableRequest"/> class.
            </summary>
        </member>
        <member name="P:Sony.NP.Tus.AddToAndGetVariableRequest.TusUser">
            <summary>
            The account of the user to set the variables for
            </summary>
        </member>
        <member name="P:Sony.NP.Tus.AddToAndGetVariableRequest.Var">
            <summary>
            The TUS variable to update
            </summary>
        </member>
        <member name="P:Sony.NP.Tus.AddToAndGetVariableRequest.DataContention">
            <summary>
            Prevention of data contention
            </summary>
        </member>
        <member name="P:Sony.NP.Tus.AddToAndGetVariableRequest.ForCrossSave">
            <summary>
            For compatibility with older platforms, set this when performing cross save actions
            </summary>
        </member>
        <member name="P:Sony.NP.Tus.AddToAndGetVariableRequest.TargetUser">
            <summary>
            The account of the user to set the variables for
            </summary>
        </member>
        <member name="P:Sony.NP.Tus.AddToAndGetVariableRequest.VirtualUserID">
            <summary>
            Identifier of a virtual user
            </summary>
        </member>
        <member name="P:Sony.NP.Tus.AddToAndGetVariableRequest.IsVirtualUser">
            <summary>
            A flag that specifies whether this update is for a virtual user. This is atomatically set depending on if <see cref="P:Sony.NP.Tus.AddToAndGetVariableRequest.TargetUser"/> or <see cref="P:Sony.NP.Tus.AddToAndGetVariableRequest.VirtualUserID"/> is set.
            </summary>
        </member>
        <member name="T:Sony.NP.Tus.SetDataRequest">
            <summary>
            Parameters required for setting a specified users TUS binary data
            </summary>
        </member>
        <member name="F:Sony.NP.Tus.SetDataRequest.NP_TUS_DATA_INFO_MAX_SIZE">
            <summary>
            Maximum size of the <see cref="P:Sony.NP.Tus.SetDataRequest.SupplementaryInfo"/> array.
            </summary>
        </member>
        <member name="M:Sony.NP.Tus.SetDataRequest.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Sony.NP.Tus.SetVariablesRequest"/> class.
            </summary>
        </member>
        <member name="P:Sony.NP.Tus.SetDataRequest.TusUser">
            <summary>
            The account of the user to set the variables for
            </summary>
        </member>
        <member name="P:Sony.NP.Tus.SetDataRequest.Data">
            <summary>
            The TUS data to update
            </summary>
        </member>
        <member name="P:Sony.NP.Tus.SetDataRequest.SupplementaryInfo">
            <summary>
            Supplementary Information for the  TUS Data
            </summary>
            <exception cref="T:Sony.NP.NpToolkitException">Will throw an exception if the array is larger than <see cref="F:Sony.NP.Tus.SetDataRequest.NP_TUS_DATA_INFO_MAX_SIZE"/>.</exception>
        </member>
        <member name="P:Sony.NP.Tus.SetDataRequest.SlotId">
            <summary>
            The ID of the slot that the data belongs to
            </summary>
        </member>
        <member name="P:Sony.NP.Tus.SetDataRequest.DataContention">
            <summary>
            Prevention of data contention
            </summary>
        </member>
        <member name="P:Sony.NP.Tus.SetDataRequest.TargetUser">
            <summary>
            The account of the user to set the variables for
            </summary>
        </member>
        <member name="P:Sony.NP.Tus.SetDataRequest.VirtualUserID">
            <summary>
            Identifier of a virtual user
            </summary>
        </member>
        <member name="P:Sony.NP.Tus.SetDataRequest.IsVirtualUser">
            <summary>
            A flag that specifies whether this update is for a virtual user. This is atomatically set depending on if <see cref="P:Sony.NP.Tus.SetDataRequest.TargetUser"/> or <see cref="P:Sony.NP.Tus.SetDataRequest.VirtualUserID"/> is set.
            </summary>
        </member>
        <member name="T:Sony.NP.Tus.GetDataRequest">
            <summary>
            Parameters required for getting a specified users TUS binary data
            </summary>
        </member>
        <member name="M:Sony.NP.Tus.GetDataRequest.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Sony.NP.Tus.SetVariablesRequest"/> class.
            </summary>
        </member>
        <member name="P:Sony.NP.Tus.GetDataRequest.TusUser">
            <summary>
            The account of the user to set the variables for
            </summary>
        </member>
        <member name="P:Sony.NP.Tus.GetDataRequest.SlotId">
            <summary>
            The ID of the slot that the data belongs to
            </summary>
        </member>
        <member name="P:Sony.NP.Tus.GetDataRequest.ForCrossSave">
            <summary>
            For compatibility with older platforms, set this when performing cross save actions
            </summary>
        </member>
        <member name="P:Sony.NP.Tus.GetDataRequest.RetrieveStatusOnly">
            <summary>
            If set to true, only the data size in status is retrieved. The data buffer will be empty
            </summary>
        </member>
        <member name="P:Sony.NP.Tus.GetDataRequest.TargetUser">
            <summary>
            The account of the user to set the variables for
            </summary>
        </member>
        <member name="P:Sony.NP.Tus.GetDataRequest.VirtualUserID">
            <summary>
            Identifier of a virtual user
            </summary>
        </member>
        <member name="P:Sony.NP.Tus.GetDataRequest.IsVirtualUser">
            <summary>
            A flag that specifies whether this update is for a virtual user. This is atomatically set depending on if <see cref="P:Sony.NP.Tus.GetDataRequest.TargetUser"/> or <see cref="P:Sony.NP.Tus.GetDataRequest.VirtualUserID"/> is set.
            </summary>
        </member>
        <member name="T:Sony.NP.Tus.DeleteDataRequest">
            <summary>
            Parameters required for deleting a specified users TUS binary data
            </summary>
        </member>
        <member name="F:Sony.NP.Tus.DeleteDataRequest.MAX_DATA_SLOTS">
            <summary>
            Maximum size of the <see cref="P:Sony.NP.Tus.DeleteDataRequest.SlotIds"/> array.
            </summary>
        </member>
        <member name="M:Sony.NP.Tus.DeleteDataRequest.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Sony.NP.Tus.DeleteDataRequest"/> class.
            </summary>
        </member>
        <member name="P:Sony.NP.Tus.DeleteDataRequest.TusUser">
            <summary>
            The account of the user to set the variables for
            </summary>
        </member>
        <member name="P:Sony.NP.Tus.DeleteDataRequest.SlotIds">
            <summary>
            The IDs of the slots that you want to delete
            </summary>
            <exception cref="T:Sony.NP.NpToolkitException">Will throw an exception if the array is larger than <see cref="F:Sony.NP.Tus.DeleteDataRequest.MAX_DATA_SLOTS"/>.</exception>
        </member>
        <member name="P:Sony.NP.Tus.DeleteDataRequest.TargetUser">
            <summary>
            The account of the user to set the variables for
            </summary>
        </member>
        <member name="P:Sony.NP.Tus.DeleteDataRequest.VirtualUserID">
            <summary>
            Identifier of a virtual user
            </summary>
        </member>
        <member name="P:Sony.NP.Tus.DeleteDataRequest.IsVirtualUser">
            <summary>
            A flag that specifies whether this update is for a virtual user. This is atomatically set depending on if <see cref="P:Sony.NP.Tus.DeleteDataRequest.TargetUser"/> or <see cref="P:Sony.NP.Tus.DeleteDataRequest.VirtualUserID"/> is set.
            </summary>
        </member>
        <member name="T:Sony.NP.Tus.TryAndSetCompareOperator">
            <summary>
            Represents the type of comparison to make against the TUS data on the server.
            </summary>
        </member>
        <member name="F:Sony.NP.Tus.TryAndSetCompareOperator.None">
            <summary> Indicates that no operator type has been specified. </summary>
        </member>
        <member name="F:Sony.NP.Tus.TryAndSetCompareOperator.Equal">
            <summary> Checks if the current value on the TUS server is equal to <see cref="P:Sony.NP.Tus.TryAndSetVariableRequest.VarToUpdate"/> </summary>
        </member>
        <member name="F:Sony.NP.Tus.TryAndSetCompareOperator.NotEqual">
            <summary> Checks if the current value on the TUS server is not equal to <see cref="P:Sony.NP.Tus.TryAndSetVariableRequest.VarToUpdate"/></summary>
        </member>
        <member name="F:Sony.NP.Tus.TryAndSetCompareOperator.GreaterThan">
            <summary> Checks if the current value on the TUS server is greater than <see cref="P:Sony.NP.Tus.TryAndSetVariableRequest.VarToUpdate"/></summary>
        </member>
        <member name="F:Sony.NP.Tus.TryAndSetCompareOperator.GreaterThanOrEqualTo">
            <summary> Checks if the current value on the TUS server is greater than or equal to <see cref="P:Sony.NP.Tus.TryAndSetVariableRequest.VarToUpdate"/></summary>
        </member>
        <member name="F:Sony.NP.Tus.TryAndSetCompareOperator.LessThan">
            <summary> Checks if the current value on the TUS server is less than <see cref="P:Sony.NP.Tus.TryAndSetVariableRequest.VarToUpdate"/></summary>
        </member>
        <member name="F:Sony.NP.Tus.TryAndSetCompareOperator.LessThanOrEqualTo">
            <summary> Checks if the current value on the TUS server is less than or equal to <see cref="P:Sony.NP.Tus.TryAndSetVariableRequest.VarToUpdate"/></summary>
        </member>
        <member name="T:Sony.NP.Tus.TryAndSetVariableRequest">
            <summary>
            Represents a request to write a 64-bit integer to a single specified user's TUS variable, if a condition is met.
            </summary>
            <remarks>
            The comparison can be read as "The value of the variable on the server must be <see cref="T:Sony.NP.Tus.TryAndSetCompareOperator"/> the
            one provided". For example: "The value of the variable on the server must be 
            greater than the one provided".
            </remarks>
        </member>
        <member name="M:Sony.NP.Tus.TryAndSetVariableRequest.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Sony.NP.Tus.TryAndSetVariableRequest"/> class.
            </summary>
        </member>
        <member name="P:Sony.NP.Tus.TryAndSetVariableRequest.TusUser">
            <summary>
            Information regarding the user provided as input
            </summary>
        </member>
        <member name="P:Sony.NP.Tus.TryAndSetVariableRequest.VarToUpdate">
            <summary>
            The TUS variable to update.
            </summary>
        </member>
        <member name="P:Sony.NP.Tus.TryAndSetVariableRequest.DataContention">
            <summary>
            Prevents data contention.
            </summary>
        </member>
        <member name="P:Sony.NP.Tus.TryAndSetVariableRequest.CompareValue">
            <summary>
            The 64-bit integer to compare.
            </summary>
        </member>
        <member name="P:Sony.NP.Tus.TryAndSetVariableRequest.CompareOperator">
            <summary>
            The type of comparison to make against the variable on the TUS server. See class remarks for details.
            </summary>
        </member>
        <member name="P:Sony.NP.Tus.TryAndSetVariableRequest.ForCrossSave">
            <summary>
            A flag that specifies whether this is a cross-platform save. Use this to ensure compatibility with older platforms.
            </summary>
        </member>
        <member name="T:Sony.NP.Tus.FriendsVariableSortingOrder">
            <summary>
            Represents the sorting order requested for friends' TUS variables returned from the server.
            </summary>
        </member>
        <member name="F:Sony.NP.Tus.FriendsVariableSortingOrder.DescDate">
            <summary>  Sort by last update date/time in descending order </summary>
        </member>
        <member name="F:Sony.NP.Tus.FriendsVariableSortingOrder.AscDate">
            <summary> Sort by last update date/time in ascending order </summary>
        </member>
        <member name="F:Sony.NP.Tus.FriendsVariableSortingOrder.DescValue">
            <summary> Sort the TUS variable numerical values in descending order</summary>
        </member>
        <member name="F:Sony.NP.Tus.FriendsVariableSortingOrder.AscValue">
            <summary> Sort the TUS variable numerical values in ascending order </summary>
        </member>
        <member name="T:Sony.NP.Tus.GetFriendsVariableRequest">
            <summary>
            Represents a request to get a variable from a specific slot for all the friends of the calling user.
            </summary>
        </member>
        <member name="F:Sony.NP.Tus.GetFriendsVariableRequest.MAX_PAGE_SIZE">
            <summary>
            Maximum size of the <see cref="P:Sony.NP.Tus.GetFriendsVariableRequest.PageSize"/>. Set as the default.
            </summary>
        </member>
        <member name="M:Sony.NP.Tus.GetFriendsVariableRequest.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Sony.NP.Tus.GetFriendsVariableRequest"/> class.
            </summary>
        </member>
        <member name="P:Sony.NP.Tus.GetFriendsVariableRequest.SlotId">
            <summary>
            The slot to retrieve variables from.
            </summary>
        </member>
        <member name="P:Sony.NP.Tus.GetFriendsVariableRequest.SortingOrder">
            <summary>
            The requested sorting order for the returned variables.
            </summary>
        </member>
        <member name="P:Sony.NP.Tus.GetFriendsVariableRequest.StartIndex">
            <summary>
            The start index of the search. The total amount of friends on the server is returned in <see cref="P:Sony.NP.Tus.FriendsVariablesResponse.TotalFriends"/>. That value can be greater than the <see cref="F:Sony.NP.Tus.GetFriendsVariableRequest.MAX_PAGE_SIZE"/>. The index can be used to retrieve additional pages of results.
            </summary>
        </member>
        <member name="P:Sony.NP.Tus.GetFriendsVariableRequest.PageSize">
            <summary>
            The number of friends to return. Default of <see cref="F:Sony.NP.Tus.GetFriendsVariableRequest.MAX_PAGE_SIZE"/>.
            </summary>
        </member>
        <member name="P:Sony.NP.Tus.GetFriendsVariableRequest.ForCrossSave">
            <summary>
            A flag that specifies if the variable is for cross-platform save.
            </summary>
        </member>
        <member name="P:Sony.NP.Tus.GetFriendsVariableRequest.IncludeMeIfFound">
            <summary>
            The calling user is included in the result if it is found in the requested range. Defaults to true.
            </summary>
        </member>
        <member name="T:Sony.NP.Tus.GetUsersVariableRequest">
            <summary>
            Represents a request to get variables from a specific slot for a list of virtual or real users.
            </summary>
        </member>
        <member name="F:Sony.NP.Tus.GetUsersVariableRequest.MAX_NUM_USERS">
            <summary>
            Maximum size of the Virtual user or Real user arrays <see cref="P:Sony.NP.Tus.GetUsersVariableRequest.VirtualUsersIds"/> and <see cref="P:Sony.NP.Tus.GetUsersVariableRequest.RealUsersIds"/>
            </summary>
        </member>
        <member name="M:Sony.NP.Tus.GetUsersVariableRequest.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Sony.NP.Tus.GetUsersVariableRequest"/> class.
            </summary>
        </member>
        <member name="P:Sony.NP.Tus.GetUsersVariableRequest.VirtualUsersIds">
            <summary>
            The list of virtual users.
            </summary>
            <exception cref="T:Sony.NP.NpToolkitException">Will throw an exception if the array is larger than <see cref="F:Sony.NP.Tus.GetUsersVariableRequest.MAX_NUM_USERS"/>.</exception>
        </member>
        <member name="P:Sony.NP.Tus.GetUsersVariableRequest.RealUsersIds">
            <summary>
            The list of real users.
            </summary>
            <exception cref="T:Sony.NP.NpToolkitException">Will throw an exception if the array is larger than <see cref="F:Sony.NP.Tus.GetUsersVariableRequest.MAX_NUM_USERS"/>.</exception>
        </member>
        <member name="P:Sony.NP.Tus.GetUsersVariableRequest.SlotId">
            <summary>
            The ID of the slot whose variables are requested.
            </summary>
        </member>
        <member name="P:Sony.NP.Tus.GetUsersVariableRequest.ForCrossSave">
            <summary>
            A flag that specifies if the variables are for cross-platform save. Defaults to false.
            </summary>
        </member>
        <member name="P:Sony.NP.Tus.GetUsersVariableRequest.AreVirtualUsers">
            <summary>
            A flag that specifies if the users in the list are virtual users. Defaults to false.
            </summary>
        </member>
        <member name="T:Sony.NP.Tus.GetUsersDataStatusRequest">
            <summary>
            Represents a request to get the data status of a specific slot for a list of virtual or real users.
            </summary>
            <remarks>
            Represents a request to get the data status of a specific slot for a list of virtual or real users.
            Only the data status is retrieved, not the data itself. Data status includes information on the owner of the data,
            the user who last updated the data, when the data was last updated, the supplementary information associated with
            the data and so on.
            </remarks>
        </member>
        <member name="F:Sony.NP.Tus.GetUsersDataStatusRequest.MAX_NUM_USERS">
            <summary>
            Maximum size of the Virtual user or Real user arrays <see cref="P:Sony.NP.Tus.GetUsersDataStatusRequest.VirtualUsersIds"/> and <see cref="P:Sony.NP.Tus.GetUsersDataStatusRequest.RealUsersIds"/>
            </summary>
        </member>
        <member name="M:Sony.NP.Tus.GetUsersDataStatusRequest.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Sony.NP.Tus.GetUsersDataStatusRequest"/> class.
            </summary>
        </member>
        <member name="P:Sony.NP.Tus.GetUsersDataStatusRequest.VirtualUsersIds">
            <summary>
            The list of virtual users
            </summary>
            <exception cref="T:Sony.NP.NpToolkitException">Will throw an exception if the array is larger than <see cref="F:Sony.NP.Tus.GetUsersDataStatusRequest.MAX_NUM_USERS"/>.</exception>
        </member>
        <member name="P:Sony.NP.Tus.GetUsersDataStatusRequest.RealUsersIds">
            <summary>
            The list of real users
            </summary>
            <exception cref="T:Sony.NP.NpToolkitException">Will throw an exception if the array is larger than <see cref="F:Sony.NP.Tus.GetUsersDataStatusRequest.MAX_NUM_USERS"/>.</exception>
        </member>
        <member name="P:Sony.NP.Tus.GetUsersDataStatusRequest.SlotId">
            <summary>
            The ID of the slot whose data status is requested.
            </summary>
        </member>
        <member name="P:Sony.NP.Tus.GetUsersDataStatusRequest.ForCrossSave">
            <summary>
            A flag that specifies if the data statuses are for cross-platform save. Defaults to false.
            </summary>
        </member>
        <member name="P:Sony.NP.Tus.GetUsersDataStatusRequest.AreVirtualUsers">
            <summary>
            A flag that specifies if the users in the list are virtual users. Defaults to false.
            </summary>
        </member>
        <member name="T:Sony.NP.Tus.FriendsDataStatusSortingOrder">
            <summary>
            Represents the sorting order requested for friends' TUS data statuses returned from the server.
            </summary>
        </member>
        <member name="F:Sony.NP.Tus.FriendsDataStatusSortingOrder.DescDate">
            <summary>  Sort by last update date/time in descending order </summary>
        </member>
        <member name="F:Sony.NP.Tus.FriendsDataStatusSortingOrder.AscDate">
            <summary>  Sort by last update date/time in ascending order </summary>
        </member>
        <member name="T:Sony.NP.Tus.GetFriendsDataStatusRequest">
            <summary>
            Represents a request to get the data status of a specific slot for all the friends of the calling user.
            </summary>
            <remarks>
            Represents a request to get the data status of a specific slot for all the friends of the calling user.
            Only the data status is retrieved, not the data itself. Data status includes information on the owner of the data,
            the user who last updated the data, when the data was last updated, the supplementary information associated with
            the data and so on.
            </remarks>
        </member>
        <member name="F:Sony.NP.Tus.GetFriendsDataStatusRequest.MAX_PAGE_SIZE">
            <summary>
            Maximum size of the <see cref="P:Sony.NP.Tus.GetFriendsDataStatusRequest.PageSize"/>.
            </summary>
        </member>
        <member name="M:Sony.NP.Tus.GetFriendsDataStatusRequest.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Sony.NP.Tus.GetFriendsDataStatusRequest"/> class.
            </summary>
        </member>
        <member name="P:Sony.NP.Tus.GetFriendsDataStatusRequest.PageSize">
            <summary>
            The number of friends to return. Defaults to <see cref="F:Sony.NP.Tus.GetFriendsDataStatusRequest.MAX_PAGE_SIZE"/>
            </summary>
        </member>
        <member name="P:Sony.NP.Tus.GetFriendsDataStatusRequest.SlotId">
            <summary>
            The ID of the slot whose data status is requested.
            </summary>
        </member>
        <member name="P:Sony.NP.Tus.GetFriendsDataStatusRequest.SortingOrder">
            <summary>
            The requested sorting order for the returned data statuses.
            </summary>
        </member>
        <member name="P:Sony.NP.Tus.GetFriendsDataStatusRequest.StartIndex">
            <summary>
            The start index of the search. The total amount of friends on the server will be returned in <see cref="P:Sony.NP.Tus.FriendsVariablesResponse.TotalFriends"/>. That value can be greater than the <see cref="F:Sony.NP.Tus.GetFriendsDataStatusRequest.MAX_PAGE_SIZE"/>. The index to start the search will then be useful in case pagination is needed.
            </summary>
        </member>
        <member name="P:Sony.NP.Tus.GetFriendsDataStatusRequest.ForCrossSave">
            <summary>
            A flag that specifies if the data status is for cross-platform save. Defaults to false.
            </summary>
        </member>
        <member name="P:Sony.NP.Tus.GetFriendsDataStatusRequest.IncludeMeIfFound">
            <summary>
            The calling user will be included in the result if it is found in the requested range. Defaults to true.
            </summary>
        </member>
        <member name="T:Sony.NP.Tus.VariablesResponse">
            <summary>
            TUS variables that were returned from the TUS server
            </summary>
        </member>
        <member name="M:Sony.NP.Tus.VariablesResponse.ReadResult(System.UInt32,Sony.NP.FunctionTypes,Sony.NP.RequestBase)">
            <summary>
            Read the response data from the plug-in
            </summary>
            <param name="id">The request id.</param>
            <param name="apiCalled">The API called.</param>
            <param name="request">The Request object.</param>
        </member>
        <member name="P:Sony.NP.Tus.VariablesResponse.ForCrossSave">
            <summary>
            Specifies if the variables returned are for cross save
            </summary>
        </member>
        <member name="P:Sony.NP.Tus.VariablesResponse.Vars">
            <summary>
            TUS variables
            </summary>
            <exception cref="T:Sony.NP.NpToolkitException">Will throw an exception if <see cref="P:Sony.NP.Tus.VariablesResponse.ForCrossSave"/> isn't set to false.</exception>
        </member>
        <member name="P:Sony.NP.Tus.VariablesResponse.VarsForCrossSave">
            <summary>
            TUS variables for cross save
            </summary>
            <exception cref="T:Sony.NP.NpToolkitException">Will throw an exception if <see cref="P:Sony.NP.Tus.VariablesResponse.ForCrossSave"/> isn't set to true.</exception>
        </member>
        <member name="T:Sony.NP.Tus.AtomicAddToAndGetVariableResponse">
            <summary>
            Contains the result of the add and get TUS variable operation
            </summary>
        </member>
        <member name="M:Sony.NP.Tus.AtomicAddToAndGetVariableResponse.ReadResult(System.UInt32,Sony.NP.FunctionTypes,Sony.NP.RequestBase)">
            <summary>
            Read the response data from the plug-in
            </summary>
            <param name="id">The request id.</param>
            <param name="apiCalled">The API called.</param>
            <param name="request">The Request object.</param>
        </member>
        <member name="P:Sony.NP.Tus.AtomicAddToAndGetVariableResponse.ForCrossSave">
            <summary>
            Specifies if the variable returned is for cross save
            </summary>
        </member>
        <member name="P:Sony.NP.Tus.AtomicAddToAndGetVariableResponse.Var">
            <summary>
            TUS variable
            </summary>
            <exception cref="T:Sony.NP.NpToolkitException">Will throw an exception if <see cref="P:Sony.NP.Tus.AtomicAddToAndGetVariableResponse.ForCrossSave"/> isn't set to false.</exception>
        </member>
        <member name="P:Sony.NP.Tus.AtomicAddToAndGetVariableResponse.VarForCrossSave">
            <summary>
            TUS variable for cross save
            </summary>
            <exception cref="T:Sony.NP.NpToolkitException">Will throw an exception if <see cref="P:Sony.NP.Tus.AtomicAddToAndGetVariableResponse.ForCrossSave"/> isn't set to true.</exception>
        </member>
        <member name="T:Sony.NP.Tus.GetDataResponse">
            <summary>
            TUS data that was returned from the TUS server
            </summary>
        </member>
        <member name="M:Sony.NP.Tus.GetDataResponse.ReadResult(System.UInt32,Sony.NP.FunctionTypes,Sony.NP.RequestBase)">
            <summary>
            Read the response data from the plug-in
            </summary>
            <param name="id">The request id.</param>
            <param name="apiCalled">The API called.</param>
            <param name="request">The Request object.</param>
        </member>
        <member name="P:Sony.NP.Tus.GetDataResponse.Data">
            <summary>
            The TUS data
            </summary>
        </member>
        <member name="P:Sony.NP.Tus.GetDataResponse.ForCrossSave">
            <summary>
            Specifies if the data returned is for cross save
            </summary>
        </member>
        <member name="P:Sony.NP.Tus.GetDataResponse.Status">
            <summary>
            The status of the data.
            </summary>
            <exception cref="T:Sony.NP.NpToolkitException">Will throw an exception if <see cref="P:Sony.NP.Tus.GetDataResponse.ForCrossSave"/> isn't set to false.</exception>
        </member>
        <member name="P:Sony.NP.Tus.GetDataResponse.StatusForCrossSave">
            <summary>
            The status of the data when cross save us used
            </summary>
            <exception cref="T:Sony.NP.NpToolkitException">Will throw an exception if <see cref="P:Sony.NP.Tus.GetDataResponse.ForCrossSave"/> isn't set to true.</exception>
        </member>
        <member name="P:Sony.NP.Tus.GetDataResponse.DataStatus">
            <summary>
            The status of the data.
            </summary>
            <exception cref="T:Sony.NP.NpToolkitException">Will throw an exception if <see cref="P:Sony.NP.Tus.GetDataResponse.ForCrossSave"/> isn't set to false.</exception>
        </member>
        <member name="P:Sony.NP.Tus.GetDataResponse.DataStatusForCrossSave">
            <summary>
            The status of the data when cross save us used
            </summary>
            <exception cref="T:Sony.NP.NpToolkitException">Will throw an exception if <see cref="P:Sony.NP.Tus.GetDataResponse.ForCrossSave"/> isn't set to true.</exception>
        </member>
        <member name="T:Sony.NP.Tus.FriendsVariablesResponse">
            <summary>
            Contains a list of the variables that the user's friends have in a specific slot.
            </summary>
        </member>
        <member name="M:Sony.NP.Tus.FriendsVariablesResponse.ReadResult(System.UInt32,Sony.NP.FunctionTypes,Sony.NP.RequestBase)">
            <summary>
            Read the response data from the plug-in
            </summary>
            <param name="id">The request id.</param>
            <param name="apiCalled">The API called.</param>
            <param name="request">The Request object.</param>
        </member>
        <member name="P:Sony.NP.Tus.FriendsVariablesResponse.TotalFriends">
            <summary>
            The total number of friends on the %TUS server. This can be used for pagination.
            </summary>
        </member>
        <member name="P:Sony.NP.Tus.FriendsVariablesResponse.ForCrossSave">
            <summary>
            A flag that specifies if the variables returned are for a cross-platform save.
            </summary>
        </member>
        <member name="P:Sony.NP.Tus.FriendsVariablesResponse.Vars">
            <summary>
            The TUS variables.
            </summary>
            <exception cref="T:Sony.NP.NpToolkitException">Will throw an exception if <see cref="P:Sony.NP.Tus.FriendsVariablesResponse.ForCrossSave"/> isn't set to false.</exception>
        </member>
        <member name="P:Sony.NP.Tus.FriendsVariablesResponse.VarsForCrossSave">
            <summary>
            The TUS variables if the variables returned are for a cross-platform save.
            </summary>
            <exception cref="T:Sony.NP.NpToolkitException">Will throw an exception if <see cref="P:Sony.NP.Tus.FriendsVariablesResponse.ForCrossSave"/> isn't set to true.</exception>
        </member>
        <member name="T:Sony.NP.Tus.DataStatusesResponse">
            <summary>
            TUS data that was returned from the TUS server
            </summary>
        </member>
        <member name="M:Sony.NP.Tus.DataStatusesResponse.ReadResult(System.UInt32,Sony.NP.FunctionTypes,Sony.NP.RequestBase)">
            <summary>
            Read the response data from the plug-in
            </summary>
            <param name="id">The request id.</param>
            <param name="apiCalled">The API called.</param>
            <param name="request">The Request object.</param>
        </member>
        <member name="P:Sony.NP.Tus.DataStatusesResponse.ForCrossSave">
            <summary>
            Specifies if the variables returned are for cross save
            </summary>
        </member>
        <member name="P:Sony.NP.Tus.DataStatusesResponse.Statuses">
            <summary>
            The TUS statuses.
            </summary>
            <exception cref="T:Sony.NP.NpToolkitException">Will throw an exception if <see cref="P:Sony.NP.Tus.DataStatusesResponse.ForCrossSave"/> isn't set to false.</exception>
        </member>
        <member name="P:Sony.NP.Tus.DataStatusesResponse.StatusesForCrossSave">
            <summary>
            The TUS statuses if the statuses returned are for a cross-platform save.
            </summary>
            <exception cref="T:Sony.NP.NpToolkitException">Will throw an exception if <see cref="P:Sony.NP.Tus.DataStatusesResponse.ForCrossSave"/> isn't set to true.</exception>
        </member>
        <member name="T:Sony.NP.Tus.FriendsDataStatusesResponse">
            <summary>
            TUS data that was returned from the TUS server
            </summary>
        </member>
        <member name="M:Sony.NP.Tus.FriendsDataStatusesResponse.ReadResult(System.UInt32,Sony.NP.FunctionTypes,Sony.NP.RequestBase)">
            <summary>
            Read the response data from the plug-in
            </summary>
            <param name="id">The request id.</param>
            <param name="apiCalled">The API called.</param>
            <param name="request">The Request object.</param>
        </member>
        <member name="P:Sony.NP.Tus.FriendsDataStatusesResponse.TotalFriends">
            <summary>
            The total number of friends on the TUS server. This can be used for pagination.
            </summary>
        </member>
        <member name="P:Sony.NP.Tus.FriendsDataStatusesResponse.ForCrossSave">
            <summary>
            A flag that specifies if the statuses returned are for a cross-platform save.
            </summary>
        </member>
        <member name="P:Sony.NP.Tus.FriendsDataStatusesResponse.Statuses">
            <summary>
            The TUS statuses.
            </summary>
            <exception cref="T:Sony.NP.NpToolkitException">Will throw an exception if <see cref="P:Sony.NP.Tus.FriendsDataStatusesResponse.ForCrossSave"/> isn't set to false.</exception>
        </member>
        <member name="P:Sony.NP.Tus.FriendsDataStatusesResponse.StatusesForCrossSave">
            <summary>
            The TUS statuses if the statuses returned are for a cross-platform save.
            </summary>
            <exception cref="T:Sony.NP.NpToolkitException">Will throw an exception if <see cref="P:Sony.NP.Tus.FriendsDataStatusesResponse.ForCrossSave"/> isn't set to true.</exception>
        </member>
        <member name="T:Sony.NP.Tus.Variable">
            <summary>
            Represents a TUS (title user storage) variable - Renamed to VariableInput in SDK 5.0
            </summary>
        </member>
        <member name="P:Sony.NP.Tus.Variable.Value">
            <summary>
            The TUS variable value
            </summary>
        </member>
        <member name="P:Sony.NP.Tus.Variable.SlotId">
            <summary>
            The slot that the variable belongs to
            </summary>
        </member>
        <member name="T:Sony.NP.UserProfiles">
            <summary>
            User Profile service related functionality.
            </summary>
        </member>
        <member name="M:Sony.NP.UserProfiles.GetLocalUsers(Sony.NP.UserProfiles.LocalUsers)">
            <summary>
            Fill in the local users. This is a synchronous method and will return the results immediately. 
            </summary>
            <param name="users">The <see cref="T:Sony.NP.UserProfiles.LocalUsers"/> instance to fill in.</param>
            <exception cref="T:Sony.NP.NpToolkitException">Will throw an exception if one or more of the users in the array has an error code regarding the status of the user.</exception>
        </member>
        <member name="M:Sony.NP.UserProfiles.GetNpProfiles(Sony.NP.UserProfiles.GetNpProfilesRquest,Sony.NP.UserProfiles.NpProfilesResponse)">
            <summary>
            Function to obtain the user profile information for a set ofusers specified in the request.
            </summary>
            <param name="request">Parameters with the target users to get the profiles information from.</param>
            <param name="response">This response contains the information of the profiles for the previously specified users as response data, and also contains the return code.</param>
            <returns>If the operation is asynchronous, the function provides the request Id.</returns>
            <exception cref="T:Sony.NP.NpToolkitException">Will throw an exception either when the request data is invalid, or an internal error has occured inside the NpToolkit plug-in.</exception>
        </member>
        <member name="M:Sony.NP.UserProfiles.GetVerifiedAccountsForTitle(Sony.NP.UserProfiles.GetVerifiedAccountsForTitleRequest,Sony.NP.UserProfiles.NpProfilesResponse)">
            <summary>
            Function to obtain the profile information for Verified Accounts of the running application (Title Id).
            </summary>
            <param name="request">Parameters with the limit of the maximum number of Verified Accounts linked to a title to retrieve in one call</param>
            <param name="response">This response contains the information of the verified account profiles linked to the title, and also contains the return code</param>
            <returns>If the operation is asynchronous, the function provides the request Id.</returns>
            <exception cref="T:Sony.NP.NpToolkitException">Will throw an exception either when the request data is invalid, or an internal error has occured inside the NpToolkit plug-in.</exception>
        </member>
        <member name="M:Sony.NP.UserProfiles.DisplayUserProfileDialog(Sony.NP.UserProfiles.DisplayUserProfileDialogRequest,Sony.NP.Core.EmptyResponse)">
            <summary>
            This function opens the System User Profile Dialog for a specified target user. The user can be the calling user in case its own profile wants to be opened.
            </summary>
            <param name="request">Parameters with the target user and reasons to report </param>
            <param name="response">This response does not have data, only return code</param>
            <returns>If the operation is asynchronous, the function provides the request Id.</returns>
            <exception cref="T:Sony.NP.NpToolkitException">Will throw an exception either when the request data is invalid, or an internal error has occured inside the NpToolkit plug-in.</exception>
        </member>
        <member name="M:Sony.NP.UserProfiles.DisplayGriefReportingDialog(Sony.NP.UserProfiles.DisplayGriefReportingDialogRequest,Sony.NP.Core.EmptyResponse)">
            <summary>
            This function opens directly the Grief Reporting section of the System User Profile Dialog for a specified target user.
            </summary>
            <param name="request">Parameters with the target user and reasons to report </param>
            <param name="response">This response does not have data, only return code</param>
            <returns>If the operation is asynchronous, the function provides the request Id.</returns>
            <exception cref="T:Sony.NP.NpToolkitException">Will throw an exception either when the request data is invalid, or an internal error has occured inside the NpToolkit plug-in.</exception>
        </member>
        <member name="T:Sony.NP.UserProfiles.LocalUsers">
            <summary>
            Contains details about all local users, up to a maximum of <see cref="F:Sony.NP.UserProfiles.LocalUsers.MaxLocalUsers"/>
            </summary>
        </member>
        <member name="F:Sony.NP.UserProfiles.LocalUsers.MaxLocalUsers">
            <summary>
            The maximum number of local users
            </summary>
        </member>
        <member name="P:Sony.NP.UserProfiles.LocalUsers.LocalUsersIds">
            <summary>
            The array of local users, with a fixed size of <see cref="F:Sony.NP.UserProfiles.LocalUsers.MaxLocalUsers"/>
            </summary>
            <remarks>
            Returns a full array of local users. The array may contain invalid users as the full compliment of users might not be logged into the PS4 system.
            Use <see cref="F:Sony.NP.Core.UserServiceUserId.UserIdInvalid"/> to test if the local user information is valid.
            </remarks>
        </member>
        <member name="T:Sony.NP.UserProfiles.LocalLoginUserId">
            <summary>
            Mapping for a local user from their local service id  to their account id. 
            </summary>
        </member>
        <member name="P:Sony.NP.UserProfiles.LocalLoginUserId.UserId">
            <summary>
            The local user id.
            </summary>
        </member>
        <member name="P:Sony.NP.UserProfiles.LocalLoginUserId.AccountId">
            <summary>
            The unique 64bit account id if the user is logged into PSN
            </summary>
        </member>
        <member name="P:Sony.NP.UserProfiles.LocalLoginUserId.SceErrorCode">
            <summary>
            Any error code returned by the system when checking for the users Account Id using sceNpGetAccountIdA. Use this to detemine if it retuned errors such as SCE_NP_ERROR_SIGNED_OUT or SCE_NP_ERROR_NOT_SIGNED_UP
            </summary>
        </member>
        <member name="T:Sony.NP.UserProfiles.NpProfilesResponse">
            <summary>
            Contains the profile information of the target users.
            </summary>
        </member>
        <member name="M:Sony.NP.UserProfiles.NpProfilesResponse.ReadResult(System.UInt32,Sony.NP.FunctionTypes,Sony.NP.RequestBase)">
            <summary>
            Read the response data from the plug-in
            </summary>
            <param name="id">The request id.</param>
            <param name="apiCalled">The API called.</param>
            <param name="request">The Request object.</param>
        </member>
        <member name="P:Sony.NP.UserProfiles.NpProfilesResponse.Profiles">
            <summary>
            The array of profiles retrieved
            </summary>
        </member>
        <member name="T:Sony.NP.UserProfiles.GetNpProfilesRquest">
            <summary>
            Parameters to obtain profile information of a set of users provided as input.
            </summary>
        </member>
        <member name="F:Sony.NP.UserProfiles.GetNpProfilesRquest.MAX_SIZE_ACCOUNT_IDS">
            <summary>
            The maximum size of the <c><i>accountIds</i></c> array
            </summary>
        </member>
        <member name="F:Sony.NP.UserProfiles.GetNpProfilesRquest.accountIds">
            A list of users to retrieve profile information from
        </member>
        <member name="M:Sony.NP.UserProfiles.GetNpProfilesRquest.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Sony.NP.UserProfiles.GetNpProfilesRquest"/> class.
            </summary>
        </member>
        <member name="P:Sony.NP.UserProfiles.GetNpProfilesRquest.AccountIds">
            <summary>
            A list of users to retrieve profile information from
            </summary>
            <exception cref="T:Sony.NP.NpToolkitException">Will throw an exception if the array is more than <see cref="F:Sony.NP.UserProfiles.GetNpProfilesRquest.MAX_SIZE_ACCOUNT_IDS"/>.</exception>
        </member>
        <member name="T:Sony.NP.UserProfiles.GetVerifiedAccountsForTitleRequest">
            <summary>
            Obtain profile information of Verified Accounts related to the current title.
            </summary>
        </member>
        <member name="M:Sony.NP.UserProfiles.GetVerifiedAccountsForTitleRequest.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Sony.NP.UserProfiles.GetVerifiedAccountsForTitleRequest"/> class.
            </summary>
        </member>
        <member name="P:Sony.NP.UserProfiles.GetVerifiedAccountsForTitleRequest.Limit">
            <summary>
            The maximum number of profiles from Verified Accounts to retrieve. Defaults to 10
            </summary>
        </member>
        <member name="T:Sony.NP.UserProfiles.DisplayUserProfileDialogRequest">
            <summary>
            Parameters passed to open the user profile dialog of a target user.
            </summary>
        </member>
        <member name="M:Sony.NP.UserProfiles.DisplayUserProfileDialogRequest.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Sony.NP.UserProfiles.DisplayUserProfileDialogRequest"/> class.
            </summary>
        </member>
        <member name="P:Sony.NP.UserProfiles.DisplayUserProfileDialogRequest.TargetAccountId">
            <summary>
            The user profile dialog will be opened for this account
            </summary>
        </member>
        <member name="T:Sony.NP.UserProfiles.DisplayGriefReportingDialogRequest">
            <summary>
            Parameters passed to open the grief reporting dialog of a target user.
            </summary>
        </member>
        <member name="F:Sony.NP.UserProfiles.DisplayGriefReportingDialogRequest.targetAccountId">
            The maximum number of profiles from Verified Accounts to retrieve. Defaults to 10   
        </member>
        <member name="F:Sony.NP.UserProfiles.DisplayGriefReportingDialogRequest.reportOnlineId">
            true when the Online Id should be reported
        </member>
        <member name="F:Sony.NP.UserProfiles.DisplayGriefReportingDialogRequest.reportName">
            true when the Name should be reported
        </member>
        <member name="F:Sony.NP.UserProfiles.DisplayGriefReportingDialogRequest.reportPicture">
            true when the Picture of the profile should be reported
        </member>
        <member name="F:Sony.NP.UserProfiles.DisplayGriefReportingDialogRequest.reportAboutMe">
            true when the About Me section of the profile should be reported
        </member>
        <member name="M:Sony.NP.UserProfiles.DisplayGriefReportingDialogRequest.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Sony.NP.UserProfiles.DisplayGriefReportingDialogRequest"/> class.
            </summary>
        </member>
        <member name="P:Sony.NP.UserProfiles.DisplayGriefReportingDialogRequest.TargetAccountId">
            <summary>
            The grief reporting dialog will be opened to report this account
            </summary>
        </member>
        <member name="P:Sony.NP.UserProfiles.DisplayGriefReportingDialogRequest.ReportOnlineId">
            <summary>
            True when the Online Id should be reported. Defaults to false.
            </summary>
        </member>
        <member name="P:Sony.NP.UserProfiles.DisplayGriefReportingDialogRequest.ReportName">
            <summary>
            True when the Name should be reported. Defaults to false.
            </summary>
        </member>
        <member name="P:Sony.NP.UserProfiles.DisplayGriefReportingDialogRequest.ReportPicture">
            <summary>
            True when the Picture should be reported. Defaults to false.
            </summary>
        </member>
        <member name="P:Sony.NP.UserProfiles.DisplayGriefReportingDialogRequest.ReportAboutMe">
            <summary>
            True when the About Me section should be reported. Defaults to false.
            </summary>
        </member>
        <member name="T:Sony.NP.WordFilter">
            <summary>
            Word Filter service related functionality.
            </summary>
        </member>
        <member name="M:Sony.NP.WordFilter.FilterComment(Sony.NP.WordFilter.FilterCommentRequest,Sony.NP.WordFilter.SanitizedCommentResponse)">
            <summary>
            This function will filter the comment provided in case it is necessary.
            </summary>
            <param name="request">Parameters needed to filter a comment</param>
            <param name="response">This response contains the return code, a flag indicating if the comment was modified, the resulted comment and its size</param>
            <returns>If the operation is asynchronous, the function provides the request Id.</returns>
            <exception cref="T:Sony.NP.NpToolkitException">Will throw an exception either when the request data is invalid, or an internal error has occured inside the NpToolkit plug-in.</exception>
        </member>
        <member name="T:Sony.NP.WordFilter.FilterCommentRequest">
            <summary>
            Parameters passed to filter a comment that may contain profanity.
            </summary>
        </member>
        <member name="F:Sony.NP.WordFilter.FilterCommentRequest.MAX_SIZE_COMMENT">
            <summary>
            The maximum size of the comment to filter
            </summary>
        </member>
        <member name="M:Sony.NP.WordFilter.FilterCommentRequest.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Sony.NP.WordFilter.FilterCommentRequest"/> class.
            </summary>
        </member>
        <member name="P:Sony.NP.WordFilter.FilterCommentRequest.Comment">
            <summary>
            The comment to filter.
            </summary>
            <exception cref="T:Sony.NP.NpToolkitException">Will throw an exception if the path is more than <see cref="F:Sony.NP.WordFilter.FilterCommentRequest.MAX_SIZE_COMMENT"/> characters.</exception>
        </member>
        <member name="T:Sony.NP.WordFilter.SanitizedCommentResponse">
            <summary>
            Class containing a comment that has been sanitized in case it is needed.
            </summary>
        </member>
        <member name="M:Sony.NP.WordFilter.SanitizedCommentResponse.ReadResult(System.UInt32,Sony.NP.FunctionTypes,Sony.NP.RequestBase)">
            <summary>
            Read the response data from the plug-in
            </summary>
            <param name="id">The request id.</param>
            <param name="apiCalled">The API called.</param>
            <param name="request">The Request object.</param>
        </member>
        <member name="P:Sony.NP.WordFilter.SanitizedCommentResponse.ResultComment">
            <summary>
            The comment sanitized in case it wants to be used
            </summary>
        </member>
        <member name="P:Sony.NP.WordFilter.SanitizedCommentResponse.IsCommentChanged">
            <summary>
            True if the comment had words that have been filtered
            </summary>
        </member>
    </members>
</doc>
